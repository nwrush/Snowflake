<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Miyagi</name>
    </assembly>
    <members>
        <member name="T:Miyagi.Common.Binding">
            <summary>
            One or two-way property binding helper.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Binding.#ctor(System.ComponentModel.INotifyPropertyChanged,System.String,System.ComponentModel.INotifyPropertyChanged,System.String)">
            <summary>
            Initializes a new instance of the Binding class (two-way binding).
            </summary>
            <param name="first">The first object.</param>
            <param name="firstProperty">The name of the property of the first object.</param>
            <param name="second">The second object.</param>
            <param name="secondProperty">The name of the property of the second object.</param>
        </member>
        <member name="M:Miyagi.Common.Binding.#ctor(System.ComponentModel.INotifyPropertyChanged,System.String,System.Object,System.String)">
            <summary>
            Initializes a new instance of the Binding class (one-way binding).
            </summary>
            <param name="source">The source object.</param>
            <param name="sourceProperty">The name of the property of the source object.</param>
            <param name="target">The target object.</param>
            <param name="targetProperty">The name of the property of the target object.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Miyagi.Common.Binding.#ctor(System.ComponentModel.INotifyPropertyChanged,System.String,System.Action{System.Object})">
            <summary>
            Initializes a new instance of the Binding class (one-way binding).
            </summary>
            <param name="source">The source object.</param>
            <param name="sourceProperty">The name of the property of the source object.</param>
            <param name="customSetter">The custom setter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="customSetter"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Miyagi.Common.Binding.Dispose">
            <summary>
            Disposes the binding.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Binding.Paused">
            <summary>
            Gets or sets a value indicating whether the binding is currently paused.
            </summary>
        </member>
        <member name="T:Miyagi.Common.Events.CollectionEventArgs`1">
            <summary>
            EventArgs for collection events.
            </summary>
            <typeparam name="T">The type of the items.</typeparam>
        </member>
        <member name="M:Miyagi.Common.Events.CollectionEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the CollectionEventArgs class.
            </summary>
            <param name="item">The affected item.</param>
        </member>
        <member name="P:Miyagi.Common.Events.CollectionEventArgs`1.Item">
            <summary>
            Gets the affected item.
            </summary>
        </member>
        <member name="T:Miyagi.Common.Events.MiyagiEventArgs">
            <summary>
            Base class for EventArgs
            </summary>
        </member>
        <member name="P:Miyagi.Common.Events.MiyagiEventArgs.CancelEvent">
            <summary>
            Gets or sets a value indicating whether the event should be canceled.
            </summary>
        </member>
        <member name="T:Miyagi.Common.MiyagiCollection`1">
            <summary>
            A custom implementation of IList.
            </summary>
            <typeparam name = "T">The type of items in the collection.</typeparam>
        </member>
        <member name="M:Miyagi.Common.MiyagiCollection`1.#ctor">
            <summary>
            Initializes a new instance of the MiyagiCollection class.
            </summary>
        </member>
        <member name="M:Miyagi.Common.MiyagiCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns the enumerator of the collection.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Miyagi.Common.MiyagiCollection`1.Add(`0)">
            <summary>
            Adds a item to the collection.
            </summary>
            <param name="item">The new item.</param>
        </member>
        <member name="M:Miyagi.Common.MiyagiCollection`1.AddRange(`0[])">
            <summary>
            Adds a array of items to the collection.
            </summary>
            <param name="items">The array of items.</param>
        </member>
        <member name="M:Miyagi.Common.MiyagiCollection`1.ChangeIndex(System.Int32,`0)">
            <summary>
            This method changes the position of an existing item in the list.
            </summary>
            <param name="newIndex">The zero-based index to where the item should be moved.</param>
            <param name="item">The object to move.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>newIndex</c> is out of range.</exception>
            <exception cref="T:System.ArgumentException">item is not in the list</exception>
        </member>
        <member name="M:Miyagi.Common.MiyagiCollection`1.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Miyagi.Common.MiyagiCollection`1.Contains(`0)">
            <summary>
            Determines whether the collection contains an item.
            </summary>
            <param name="item">The item to find.</param>
            <returns><c>true</c> if found; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Miyagi.Common.MiyagiCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the collection to an array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The starting index.</param>
            <exception cref="T:System.ArgumentNullException">Argument is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>arrayIndex</c> is out of range.</exception>
            <exception cref="T:System.ArgumentException">Array is multi-dimensional</exception>
        </member>
        <member name="M:Miyagi.Common.MiyagiCollection`1.ForEach(System.Action{`0})">
            <summary>
            Executes an action for each item in the collection.
            </summary>
            <param name="action">The action to perform.</param>
        </member>
        <member name="M:Miyagi.Common.MiyagiCollection`1.GetEnumerator">
            <summary>
            Returns the enumerator of the collection.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Miyagi.Common.MiyagiCollection`1.GetReverseEnumerator">
            <summary>
            Returns an enumerator that goes from the last to the first element.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Miyagi.Common.MiyagiCollection`1.IndexOf(`0)">
            <summary>
            Returns the index of the specified item.
            </summary>
            <param name="item">The object to locate in the MiyagiCollection.</param>
            <returns>The zero-based index of the item.</returns>
        </member>
        <member name="M:Miyagi.Common.MiyagiCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item at the specified index.
            </summary>
            <param name="index">The index at which item should be inserted.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Miyagi.Common.MiyagiCollection`1.Remove(`0)">
            <summary>
            Removes an item from the collection.
            </summary>
            <param name="item">The item to remove.</param>
            <returns><c>true</c> if the item has been removed sucessfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Miyagi.Common.MiyagiCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes an item at the specific index.
            </summary>
            <param name="index">The index of the item to remove.</param>
        </member>
        <member name="E:Miyagi.Common.MiyagiCollection`1.ItemAdded">
            <summary>
            Occurs when a new item is added.
            </summary>
        </member>
        <member name="E:Miyagi.Common.MiyagiCollection`1.ItemChanged">
            <summary>
            Occurs after an item changes.
            </summary>
        </member>
        <member name="E:Miyagi.Common.MiyagiCollection`1.ItemInserted">
            <summary>
            Occurs when a new item is inserted.
            </summary>
        </member>
        <member name="E:Miyagi.Common.MiyagiCollection`1.ItemRemoved">
            <summary>
            Occurs when a item is removed.
            </summary>
        </member>
        <member name="P:Miyagi.Common.MiyagiCollection`1.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
            <value>The number of items in the collection.</value>
        </member>
        <member name="P:Miyagi.Common.MiyagiCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is readonly.
            </summary>
            <value><c>true</c> if readonly; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Miyagi.Common.MiyagiCollection`1.Items">
            <summary>
            Gets the list of items.
            </summary>
            <value>The list of items.</value>
        </member>
        <member name="P:Miyagi.Common.MiyagiCollection`1.Item(System.String)">
            <summary>
            Gets or sets an item with the specified name.
            </summary>
            <param name="name">The name of the item.</param>
        </member>
        <member name="P:Miyagi.Common.MiyagiCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets an item by index.
            </summary>
            <param name="index">The index of the item.</param>
        </member>
        <member name="T:Miyagi.Common.Data.Vector3">
            <summary>
            Represents a point in  three-dimensional space.
            </summary>
        </member>
        <member name="F:Miyagi.Common.Data.Vector3.Empty">
            <summary>
            Gets a value that represents a static empty Vector3.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Data.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.Common.Data.Vector3"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
        </member>
        <member name="M:Miyagi.Common.Data.Vector3.op_Inequality(Miyagi.Common.Data.Vector3,Miyagi.Common.Data.Vector3)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Vector3.op_Multiply(Miyagi.Common.Data.Vector3,System.Single)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Vector3.op_Multiply(Miyagi.Common.Data.Vector3,Miyagi.Common.Data.Vector3)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Vector3.op_Multiply(System.Single,Miyagi.Common.Data.Vector3)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Vector3.op_Addition(Miyagi.Common.Data.Vector3,Miyagi.Common.Data.Vector3)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Vector3.op_UnaryNegation(Miyagi.Common.Data.Vector3)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="p">The p.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Vector3.op_Subtraction(Miyagi.Common.Data.Vector3,Miyagi.Common.Data.Vector3)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Vector3.op_Division(Miyagi.Common.Data.Vector3,System.Single)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Vector3.op_Division(Miyagi.Common.Data.Vector3,Miyagi.Common.Data.Vector3)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Vector3.op_Equality(Miyagi.Common.Data.Vector3,Miyagi.Common.Data.Vector3)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Vector3.Add(Miyagi.Common.Data.Vector3,Miyagi.Common.Data.Vector3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="first">The first vector.</param>
            <param name="second">The second vector.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Vector3.Divide(Miyagi.Common.Data.Vector3,Miyagi.Common.Data.Vector3)">
            <summary>
            Divides two vectors.
            </summary>
            <param name="first">The first vector.</param>
            <param name="second">The second vector.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Vector3.FromXElement(System.Xml.Linq.XElement)">
            <summary>
            Converts an XElement representation to a <see cref="T:Miyagi.Common.Data.Vector3"/> instance.
            </summary>
            <param name="xelement">The xelement.</param>
            <returns>The resulting <see cref="T:Miyagi.Common.Data.Vector3"/>.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Vector3.Multiply(Miyagi.Common.Data.Vector3,Miyagi.Common.Data.Vector3)">
            <summary>
            Multiplies two vectors.
            </summary>
            <param name="first">The first vector.</param>
            <param name="second">The second vector.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Vector3.Parse(System.String)">
            <summary>
            Converts a string representation to a PointF instance.
            </summary>
            <param name="s">A string representation of a PointF instance.</param>
            <returns>The PointF instance.</returns>
            <exception cref="T:System.FormatException"><c>FormatException</c>.</exception>
        </member>
        <member name="M:Miyagi.Common.Data.Vector3.Subtract(Miyagi.Common.Data.Vector3,Miyagi.Common.Data.Vector3)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="first">The first vector.</param>
            <param name="second">The second vector.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Vector3.Equals(Miyagi.Common.Data.Vector3)">
            <summary>
            Determines whether the specified <see cref="T:Miyagi.Common.Data.Vector3"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Miyagi.Common.Data.Vector3"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:Miyagi.Common.Data.Vector3"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Miyagi.Common.Data.Vector3.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">Another object to compare to.</param>
        </member>
        <member name="M:Miyagi.Common.Data.Vector3.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:Miyagi.Common.Data.Vector3.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Miyagi.Common.Data.Vector3.ToXElement(System.String)">
            <summary>
            Converts a <see cref="T:Miyagi.Common.Data.Vector3"/> to an XElement representation.
            </summary>
            <param name="name">The name of the XElement.</param>
            <returns>The XElement representation of this instance.</returns>
        </member>
        <member name="P:Miyagi.Common.Data.Vector3.X">
            <summary>
            Gets the x-component of the vector.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Vector3.Y">
            <summary>
            Gets the y-component of the vector.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Vector3.Z">
            <summary>
            Gets the z-component of the vector.
            </summary>
        </member>
        <member name="T:Miyagi.Common.Data.Quaternion">
            <summary>
            Represents a rotation in three dimensions.
            </summary>
        </member>
        <member name="F:Miyagi.Common.Data.Quaternion.Empty">
            <summary>
            Gets a value that represents a static empty Quaternion.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Data.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.Common.Data.Quaternion"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
            <param name="w">The w.</param>
        </member>
        <member name="M:Miyagi.Common.Data.Quaternion.op_Inequality(Miyagi.Common.Data.Quaternion,Miyagi.Common.Data.Quaternion)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Quaternion.op_UnaryNegation(Miyagi.Common.Data.Quaternion)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="left">The left.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Quaternion.op_Equality(Miyagi.Common.Data.Quaternion,Miyagi.Common.Data.Quaternion)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
            Creates a new <see cref="T:Miyagi.Common.Data.Quaternion"/> from specified yaw, pitch, and roll angles.
            </summary>
            <param name="yaw">The yaw angle, in radians, around the y-axis.</param>
            <param name="pitch">The pitch angle, in radians, around the x-axis.</param>
            <param name="roll">The roll angle, in radians, around the z-axis.</param>
            <returns></returns>
        </member>
        <member name="M:Miyagi.Common.Data.Quaternion.CreateFromYawPitchRollDegrees(System.Single,System.Single,System.Single)">
            <summary>
            Creates a new <see cref="T:Miyagi.Common.Data.Quaternion"/> from specified yaw, pitch, and roll angles.
            </summary>
            <param name="yaw">The yaw angle, in degrees, around the y-axis.</param>
            <param name="pitch">The pitch angle, in degrees, around the x-axis.</param>
            <param name="roll">The roll angle, in degrees, around the z-axis.</param>
            <returns></returns>
        </member>
        <member name="M:Miyagi.Common.Data.Quaternion.Parse(System.String)">
            <summary>
            Converts a string representation to a Quaternion instance.
            </summary>
            <param name="s">A string representation of a Quaternion instance.</param>
            <returns>The Quaternion instance.</returns>
            <exception cref="T:System.FormatException"><c>FormatException</c>.</exception>
        </member>
        <member name="M:Miyagi.Common.Data.Quaternion.Transform(Miyagi.Common.Data.Vector3,Miyagi.Common.Data.Quaternion)">
            <summary>
            Transforms the specified <see cref="T:Miyagi.Common.Data.Vector3"/>.
            </summary>
            <param name="value">The vector.</param>
            <param name="rotation">The rotation.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Quaternion.Transform(Miyagi.Common.Data.PointF,Miyagi.Common.Data.Quaternion)">
            <summary>
            Transforms the specified <see cref="T:Miyagi.Common.Data.PointF"/>.
            </summary>
            <param name="value">The vector.</param>
            <param name="rotation">The rotation.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Quaternion.Equals(Miyagi.Common.Data.Quaternion)">
            <summary>
            Determines whether the specified <see cref="T:Miyagi.Common.Data.Quaternion"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Miyagi.Common.Data.Quaternion"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:Miyagi.Common.Data.Quaternion"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Miyagi.Common.Data.Quaternion.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">Another object to compare to.</param>
        </member>
        <member name="M:Miyagi.Common.Data.Quaternion.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:Miyagi.Common.Data.Quaternion.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Miyagi.Common.Data.Quaternion.Pitch">
            <summary>
            Gets the pitch in radians.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Quaternion.Roll">
            <summary>
            Gets the roll in radians.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Quaternion.W">
            <summary>
            Gets the W component of the quaternion.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Quaternion.X">
            <summary>
            Gets the X component of the quaternion.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Quaternion.Y">
            <summary>
            Gets the Y component of the quaternion.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Quaternion.Yaw">
            <summary>
            Gets the yaw in radians.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Quaternion.Z">
            <summary>
            Gets the Z component of the quaternion.
            </summary>
        </member>
        <member name="T:Miyagi.Common.Data.Range">
            <summary>
            Represents a range of integer values.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Data.Range.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.Common.Data.Range"/> struct.
            </summary>
            <param name="first">The first.</param>
            <param name="last">The last.</param>
        </member>
        <member name="M:Miyagi.Common.Data.Range.op_Inequality(Miyagi.Common.Data.Range,Miyagi.Common.Data.Range)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Range.op_Equality(Miyagi.Common.Data.Range,Miyagi.Common.Data.Range)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Range.Parse(System.String)">
            <summary>
            Converts a string representation to a Range instance.
            </summary>
            <param name="s">A string representation of a Range instance.</param>
            <returns>The Range instance.</returns>
            <exception cref="T:System.FormatException"><c>FormatException</c>.</exception>
        </member>
        <member name="M:Miyagi.Common.Data.Range.Equals(Miyagi.Common.Data.Range)">
            <summary>
            Determines whether the specified <see cref="T:Miyagi.Common.Data.Range"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Miyagi.Common.Data.Range"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:Miyagi.Common.Data.Range"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Miyagi.Common.Data.Range.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Miyagi.Common.Data.Range.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Miyagi.Common.Data.Range.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Miyagi.Common.Data.Range.First">
            <summary>
            Gets the first value.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Range.Last">
            <summary>
            Gets the last value.
            </summary>
        </member>
        <member name="T:Miyagi.Common.Data.Colour">
            <summary>
            Represents an ARGB colour.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Data.Colour.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.Common.Data.Colour"/> struct.
            </summary>
            <param name="alpha">The alpha component.</param>
            <param name="red">The red component.</param>
            <param name="green">The green component.</param>
            <param name="blue">The blue component.</param>
        </member>
        <member name="M:Miyagi.Common.Data.Colour.op_Inequality(Miyagi.Common.Data.Colour,Miyagi.Common.Data.Colour)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Colour.op_Equality(Miyagi.Common.Data.Colour,Miyagi.Common.Data.Colour)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Colour.FromArgb(System.Byte,System.Int32)">
            <summary>
            Creates a <see cref="T:Miyagi.Common.Data.Colour"/> structure from an ARGB value.
            </summary>
            <param name="alpha">The alpha.</param>
            <param name="rgb">The RGB.</param>
            <returns>The <see cref="T:Miyagi.Common.Data.Colour"/> structure representing the ARGB value.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Colour.FromArgb(System.Int64)">
            <summary>
            Creates a <see cref="T:Miyagi.Common.Data.Colour"/> structure from an ARGB value.
            </summary>
            <param name="argb">The ARGB.</param>
            <returns>The <see cref="T:Miyagi.Common.Data.Colour"/> structure representing the ARGB value.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Colour.FromRgb(System.Int32)">
            <summary>
            Creates a <see cref="T:Miyagi.Common.Data.Colour"/> structure from a RGB value.
            </summary>
            <param name="rgb">The RGB.</param>
            <returns>The <see cref="T:Miyagi.Common.Data.Colour"/> structure representing the RGB value.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Colour.Parse(System.String)">
            <summary>
            Converts a string representation to a Colour instance.
            </summary>
            <param name="s">A string representation of a Colour instance.</param>
            <returns>The Colour instance.</returns>
            <exception cref="T:System.FormatException"><c>FormatException</c>.</exception>
        </member>
        <member name="M:Miyagi.Common.Data.Colour.Equals(Miyagi.Common.Data.Colour)">
            <summary>
            Determines whether the specified <see cref="T:Miyagi.Common.Data.Colour"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Miyagi.Common.Data.Colour"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:Miyagi.Common.Data.Colour"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Miyagi.Common.Data.Colour.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Miyagi.Common.Data.Colour.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Miyagi.Common.Data.Colour.ToArgb">
            <summary>
            Gets the 64-bit ARGB value of this <see cref="T:Miyagi.Common.Data.Colour"/> structure.
            </summary>
            <returns>A <see cref="T:System.Int64"/> representing the ARGB value of this <see cref="T:Miyagi.Common.Data.Colour"/> structure.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Colour.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Miyagi.Common.Data.Colour.Alpha">
            <summary>
            Gets the alpha component value of this <see cref="T:Miyagi.Common.Data.Colour"/> structure.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colour.Blue">
            <summary>
            Gets the blue component value of this <see cref="T:Miyagi.Common.Data.Colour"/> structure.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colour.Green">
            <summary>
            Gets the green component value of this <see cref="T:Miyagi.Common.Data.Colour"/> structure.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colour.Red">
            <summary>
            Gets the red component value of this <see cref="T:Miyagi.Common.Data.Colour"/> structure.
            </summary>
        </member>
        <member name="T:Miyagi.Common.Data.Colours">
            <summary>
            A collection of colours.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.AliceBlue">
            <summary>
            Gets a color that has an ARGB value of 0xfff0f8ff.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.AntiqueWhite">
            <summary>
            Gets a color that has an ARGB value of 0xfffaebd7.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Aqua">
            <summary>
            Gets a color that has an ARGB value of 0xff00ffff.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Aquamarine">
            <summary>
            Gets a color that has an ARGB value of 0xff7fffd4.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Azure">
            <summary>
            Gets a color that has an ARGB value of 0xfff0ffff.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Beige">
            <summary>
            Gets a color that has an ARGB value of 0xfff5f5dc.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Bisque">
            <summary>
            Gets a color that has an ARGB value of 0xffffe4c4.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Black">
            <summary>
            Gets a color that has an ARGB value of 0xff000000.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.BlanchedAlmond">
            <summary>
            Gets a color that has an ARGB value of 0xffffebcd.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Blue">
            <summary>
            Gets a color that has an ARGB value of 0xff0000ff.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.BlueViolet">
            <summary>
            Gets a color that has an ARGB value of 0xff8a2be2.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Brown">
            <summary>
            Gets a color that has an ARGB value of 0xffa52a2a.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Burlywood">
            <summary>
            Gets a color that has an ARGB value of 0xffdeb887.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.CadetBlue">
            <summary>
            Gets a color that has an ARGB value of 0xff5f9ea0.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Chartreuse">
            <summary>
            Gets a color that has an ARGB value of 0xff7fff00.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Chocolate">
            <summary>
            Gets a color that has an ARGB value of 0xffd2691e.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Coral">
            <summary>
            Gets a color that has an ARGB value of 0xffff7f50.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.CornflowerBlue">
            <summary>
            Gets a color that has an ARGB value of 0xff6495ed.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Cornsilk">
            <summary>
            Gets a color that has an ARGB value of 0xfffff8dc.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Crimson">
            <summary>
            Gets a color that has an ARGB value of 0xffdc143c.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Cyan">
            <summary>
            Gets a color that has an ARGB value of 0xff00ffff.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.DarkBlue">
            <summary>
            Gets a color that has an ARGB value of 0xff00008b.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.DarkCyan">
            <summary>
            Gets a color that has an ARGB value of 0xff008b8b.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.DarkGoldenrod">
            <summary>
            Gets a color that has an ARGB value of 0xffb8860b.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.DarkGreen">
            <summary>
            Gets a color that has an ARGB value of 0xff006400.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.DarkGrey">
            <summary>
            Gets a color that has an ARGB value of 0xffa9a9a9.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.DarkKhaki">
            <summary>
            Gets a color that has an ARGB value of 0xffbdb76b.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.DarkMagenta">
            <summary>
            Gets a color that has an ARGB value of 0xff8b008b.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.DarkOliveGreen">
            <summary>
            Gets a color that has an ARGB value of 0xff556b2f.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.DarkOrange">
            <summary>
            Gets a color that has an ARGB value of 0xffff8c00.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.DarkOrchid">
            <summary>
            Gets a color that has an ARGB value of 0xff9932cc.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.DarkRed">
            <summary>
            Gets a color that has an ARGB value of 0xff8b0000.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.DarkSalmon">
            <summary>
            Gets a color that has an ARGB value of 0xffe9967a.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.DarkSeagreen">
            <summary>
            Gets a color that has an ARGB value of 0xff8fbc8f.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.DarkSlateblue">
            <summary>
            Gets a color that has an ARGB value of 0xff483d8b.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.DarkSlateGrey">
            <summary>
            Gets a color that has an ARGB value of 0xff2f4f4f.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.DarkTurquoise">
            <summary>
            Gets a color that has an ARGB value of 0xff00ced1.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.DarkViolet">
            <summary>
            Gets a color that has an ARGB value of 0xff9400d3.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.DeepPink">
            <summary>
            Gets a color that has an ARGB value of 0xffff1493.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.DeepSkyblue">
            <summary>
            Gets a color that has an ARGB value of 0xff00bfff.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.DimGrey">
            <summary>
            Gets a color that has an ARGB value of 0xff696969.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.DodgerBlue">
            <summary>
            Gets a color that has an ARGB value of 0xff1e90ff.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.FireBrick">
            <summary>
            Gets a color that has an ARGB value of 0xffb22222.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.FloralWhite">
            <summary>
            Gets a color that has an ARGB value of 0xfffffaf0.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.ForestGreen">
            <summary>
            Gets a color that has an ARGB value of 0xff228b22.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Fuchsia">
            <summary>
            Gets a color that has an ARGB value of 0xffff00ff.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Gainsboro">
            <summary>
            Gets a color that has an ARGB value of 0xffdcdcdc.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.GhostWhite">
            <summary>
            Gets a color that has an ARGB value of 0xfff8f8ff.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Gold">
            <summary>
            Gets a color that has an ARGB value of 0xffffd700.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Goldenrod">
            <summary>
            Gets a color that has an ARGB value of 0xffdaa520.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Green">
            <summary>
            Gets a color that has an ARGB value of 0xff008000.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.GreenYellow">
            <summary>
            Gets a color that has an ARGB value of 0xffadff2f.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Grey">
            <summary>
            Gets a color that has an ARGB value of 0xff808080.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Honeydew">
            <summary>
            Gets a color that has an ARGB value of 0xfff0fff0.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.HotPink">
            <summary>
            Gets a color that has an ARGB value of 0xffff69b4.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.IndianRed">
            <summary>
            Gets a color that has an ARGB value of 0xffcd5c5c.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Indigo">
            <summary>
            Gets a color that has an ARGB value of 0xff4b0082.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Ivory">
            <summary>
            Gets a color that has an ARGB value of 0xfffffff0.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Khaki">
            <summary>
            Gets a color that has an ARGB value of 0xfff0e68c.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Lavender">
            <summary>
            Gets a color that has an ARGB value of 0xffe6e6fa.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.LavenderBlush">
            <summary>
            Gets a color that has an ARGB value of 0xfffff0f5.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.LawnGreen">
            <summary>
            Gets a color that has an ARGB value of 0xff7cfc00.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.LemonChiffon">
            <summary>
            Gets a color that has an ARGB value of 0xfffffacd.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.LightBlue">
            <summary>
            Gets a color that has an ARGB value of 0xffadd8e6.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.LightCoral">
            <summary>
            Gets a color that has an ARGB value of 0xfff08080.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.LightCyan">
            <summary>
            Gets a color that has an ARGB value of 0xffe0ffff.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.LightGoldenrodyellow">
            <summary>
            Gets a color that has an ARGB value of 0xfffafad2.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.LightGreen">
            <summary>
            Gets a color that has an ARGB value of 0xff90ee90.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.LightGrey">
            <summary>
            Gets a color that has an ARGB value of 0xffd3d3d3.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.LightPink">
            <summary>
            Gets a color that has an ARGB value of 0xffffb6c1.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.LightSalmon">
            <summary>
            Gets a color that has an ARGB value of 0xffffa07a.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.LightSeagreen">
            <summary>
            Gets a color that has an ARGB value of 0xff20b2aa.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.LightSkyblue">
            <summary>
            Gets a color that has an ARGB value of 0xff87cefa.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.LightSlateGrey">
            <summary>
            Gets a color that has an ARGB value of 0xff778899.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.LightSteelblue">
            <summary>
            Gets a color that has an ARGB value of 0xffb0c4de.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.LightYellow">
            <summary>
            Gets a color that has an ARGB value of 0xffffffe0.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Lime">
            <summary>
            Gets a color that has an ARGB value of 0xff00ff00.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.LimeGreen">
            <summary>
            Gets a color that has an ARGB value of 0xff32cd32.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Linen">
            <summary>
            Gets a color that has an ARGB value of 0xfffaf0e6.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Magenta">
            <summary>
            Gets a color that has an ARGB value of 0xffff00ff.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Maroon">
            <summary>
            Gets a color that has an ARGB value of 0xff800000.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.MediumAquamarine">
            <summary>
            Gets a color that has an ARGB value of 0xff66cdaa.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.MediumBioletRed">
            <summary>
            Gets a color that has an ARGB value of 0xffc71585.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.MediumBlue">
            <summary>
            Gets a color that has an ARGB value of 0xff0000cd.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.MediumOrchid">
            <summary>
            Gets a color that has an ARGB value of 0xffba55d3.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.MediumPurple">
            <summary>
            Gets a color that has an ARGB value of 0xff9370db.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.MediumSeaGreen">
            <summary>
            Gets a color that has an ARGB value of 0xff3cb371.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.MediumSlateBlue">
            <summary>
            Gets a color that has an ARGB value of 0xff7b68ee.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.MediumSpringGreen">
            <summary>
            Gets a color that has an ARGB value of 0xff00fa9a.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.MediumTurquoise">
            <summary>
            Gets a color that has an ARGB value of 0xff48d1cc.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.MidnightBlue">
            <summary>
            Gets a color that has an ARGB value of 0xff191970.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.MintCream">
            <summary>
            Gets a color that has an ARGB value of 0xfff5fffa.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.MistyRose">
            <summary>
            Gets a color that has an ARGB value of 0xffffe4e1.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Moccasin">
            <summary>
            Gets a color that has an ARGB value of 0xffffe4b5.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.NavajoWhite">
            <summary>
            Gets a color that has an ARGB value of 0xffffdead.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Navy">
            <summary>
            Gets a color that has an ARGB value of 0xff000080.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.OldLace">
            <summary>
            Gets a color that has an ARGB value of 0xfffdf5e6.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Olive">
            <summary>
            Gets a color that has an ARGB value of 0xff808000.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.OliveDrab">
            <summary>
            Gets a color that has an ARGB value of 0xff6b8e23.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Orange">
            <summary>
            Gets a color that has an ARGB value of 0xffffa500.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.OrangeRed">
            <summary>
            Gets a color that has an ARGB value of 0xffff4500.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Orchid">
            <summary>
            Gets a color that has an ARGB value of 0xffda70d6.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.PaleGoldenrod">
            <summary>
            Gets a color that has an ARGB value of 0xffeee8aa.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.PaleGreen">
            <summary>
            Gets a color that has an ARGB value of 0xff98fb98.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.PaleTurquoise">
            <summary>
            Gets a color that has an ARGB value of 0xffafeeee.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.PaleVioletRed">
            <summary>
            Gets a color that has an ARGB value of 0xffdb7093.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.PapayaWhip">
            <summary>
            Gets a color that has an ARGB value of 0xffffefd5.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.PeachPuff">
            <summary>
            Gets a color that has an ARGB value of 0xffffdab9.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Peru">
            <summary>
            Gets a color that has an ARGB value of 0xffcd853f.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Pink">
            <summary>
            Gets a color that has an ARGB value of 0xffffc0cb.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Plum">
            <summary>
            Gets a color that has an ARGB value of 0xffdda0dd.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.PowderBlue">
            <summary>
            Gets a color that has an ARGB value of 0xffb0e0e6.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Purple">
            <summary>
            Gets a color that has an ARGB value of 0xff800080.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Red">
            <summary>
            Gets a color that has an ARGB value of 0xffff0000.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.RosyBrown">
            <summary>
            Gets a color that has an ARGB value of 0xffbc8f8f.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.RoyalBlue">
            <summary>
            Gets a color that has an ARGB value of 0xff4169e1.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.SaddleBrown">
            <summary>
            Gets a color that has an ARGB value of 0xff8b4513.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Salmon">
            <summary>
            Gets a color that has an ARGB value of 0xfffa8072.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.SandyBrown">
            <summary>
            Gets a color that has an ARGB value of 0xfff4a460.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.SeaGreen">
            <summary>
            Gets a color that has an ARGB value of 0xff2e8b57.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.SeaShell">
            <summary>
            Gets a color that has an ARGB value of 0xfffff5ee.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Sienna">
            <summary>
            Gets a color that has an ARGB value of 0xffa0522d.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Silver">
            <summary>
            Gets a color that has an ARGB value of 0xffc0c0c0.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.SkyBlue">
            <summary>
            Gets a color that has an ARGB value of 0xff87ceeb.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.SlateBlue">
            <summary>
            Gets a color that has an ARGB value of 0xff6a5acd.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.SlateGrey">
            <summary>
            Gets a color that has an ARGB value of 0xff708090.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Snow">
            <summary>
            Gets a color that has an ARGB value of 0xfffffafa.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.SpringGreen">
            <summary>
            Gets a color that has an ARGB value of 0xff00ff7f.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.SteelBlue">
            <summary>
            Gets a color that has an ARGB value of 0xff4682b4.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Tan">
            <summary>
            Gets a color that has an ARGB value of 0xffd2b48c.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Teal">
            <summary>
            Gets a color that has an ARGB value of 0xff008080.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Thistle">
            <summary>
            Gets a color that has an ARGB value of 0xffd8bfd8.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Tomato">
            <summary>
            Gets a color that has an ARGB value of 0xffff6347.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Transparent">
            <summary>
            Gets a color that has an ARGB value of 0x00000000.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Turquoise">
            <summary>
            Gets a color that has an ARGB value of 0xff40e0d0.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Violet">
            <summary>
            Gets a color that has an ARGB value of 0xffee82ee.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Wheat">
            <summary>
            Gets a color that has an ARGB value of 0xfff5deb3.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.White">
            <summary>
            Gets a color that has an ARGB value of 0xffffffff.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.WhiteSmoke">
            <summary>
            Gets a color that has an ARGB value of 0xfff5f5f5.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.Yellow">
            <summary>
            Gets a color that has an ARGB value of 0xffffff00.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Colours.YellowGreen">
            <summary>
            Gets a color that has an ARGB value of 0xff9acd32.
            </summary>
        </member>
        <member name="T:Miyagi.Common.Rendering.IRenderable3D">
            <summary>
            Interface for 3D renderable objects.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.IRenderable3D.Offset">
            <summary>
            Gets or sets the offset.
            </summary>
            <value>The offset.</value>
        </member>
        <member name="P:Miyagi.Common.Rendering.IRenderable3D.Orientation">
            <summary>
            Gets or sets the orientation.
            </summary>
            <value>The orientation.</value>
        </member>
        <member name="T:Miyagi.Common.Rendering.ISpriteRenderer">
            <summary>
            Interface for sprite renderer.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Rendering.ISpriteRenderer.AddSprite(Miyagi.Common.Rendering.Sprite)">
            <summary>
            Adds a Sprite to the Renderer.
            </summary>
            <param name="sprite">The sprite to add.</param>
            <returns><c>true</c> if the sprite has been added successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Miyagi.Common.Rendering.ISpriteRenderer.RemoveSprite(Miyagi.Common.Rendering.Sprite)">
            <summary>
            Removes a Sprite from the Renderer.
            </summary>
            <param name="sprite">The sprite to remove.</param>
            <returns><c>true</c> if the sprite has been removed successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Miyagi.Common.Rendering.ISpriteRenderer.RenderSprites">
            <summary>
            Renders the sprites.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Rendering.ISpriteRenderer.SortSprites">
            <summary>
            Sort the sprites.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Rendering.ISpriteRenderer.TransformCoordinate(System.Int32@,System.Int32@)">
            <summary>
            Transforms a screen coordinate to a viewport coordinate.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <returns><c>true</c> if the coordinate is inside the viewport; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Miyagi.Common.Rendering.ISpriteRenderer.TransformCoordinate(Miyagi.Common.Data.Point)">
            <summary>
            Transforms a screen coordinate to a viewport coordinate.
            </summary>
            <param name="p">The coordinate.</param>
            <returns>The transformed coordinate.</returns>
        </member>
        <member name="P:Miyagi.Common.Rendering.ISpriteRenderer.BufferDirty">
            <summary>
            Gets or sets a value indicating whether the buffer is dirty.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.ISpriteRenderer.CacheToTexture">
            <summary>
            Gets or sets a value indicating whether the sprite renderer should cache to texture.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.ISpriteRenderer.HardwareBufferCapacity">
            <summary>
            Gets the hardware buffer capacity.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.ISpriteRenderer.RenderManager">
            <summary>
            Gets the render manager.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.ISpriteRenderer.SpriteOrderDirty">
            <summary>
            Gets or sets a value indicating whether the sprite list needs to be sorted.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.ISpriteRenderer.Viewport">
            <summary>
            Gets or sets the viewport.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.ISpriteRenderer.ZOrder">
            <summary>
            Gets or sets the zorder.
            </summary>
        </member>
        <member name="T:Miyagi.Common.Rendering.ISpriteRenderer3D">
            <summary>
            Interface for 3D sprite renderer.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Rendering.ISpriteRenderer3D.SetRenderable(Miyagi.Common.Rendering.IRenderable3D)">
            <summary>
            Sets the renderable.
            </summary>
            <param name="renderable">The renderable.</param>
        </member>
        <member name="T:Miyagi.Common.Rendering.Primitive">
            <summary>
            Represents a render primitive.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Rendering.Primitive.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.Common.Rendering.Primitive"/> class.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Rendering.Primitive.ApplyTransformation(System.Single)">
            <summary>
            Applies the transformation.
            </summary>
            <param name="aspectRatio">The aspect ratio.</param>
        </member>
        <member name="M:Miyagi.Common.Rendering.Primitive.GetVertex(System.Int32)">
            <summary>
            Gets a vertex of the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>A <see cref="T:Miyagi.Common.Rendering.Vertex"/> of the specified index.</returns>
        </member>
        <member name="M:Miyagi.Common.Rendering.Primitive.HitTest(System.Single,System.Single)">
            <summary>
            Performs a hit test.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <returns><c>true</c> if the primitive is hit; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Miyagi.Common.Rendering.Primitive.Move(Miyagi.Common.Data.PointF)">
            <summary>
            Moves the primitive.
            </summary>
            <param name="delta">The distance to move.</param>
        </member>
        <member name="M:Miyagi.Common.Rendering.Primitive.RemoveTransformation">
            <summary>
            Removes the transformation.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Rendering.Primitive.Resize(Miyagi.Common.Data.PointF)">
            <summary>
            Resizes the primitive.
            </summary>
            <param name="delta">The distance to resize.</param>
        </member>
        <member name="M:Miyagi.Common.Rendering.Primitive.Rotate(System.Single,Miyagi.Common.Data.PointF)">
            <summary>
            Rotates the Quad.
            </summary>
            <param name="angle">The rotation angle in degrees.</param>
            <param name="pivot">The pivot point.</param>
        </member>
        <member name="M:Miyagi.Common.Rendering.Primitive.Scale(Miyagi.Common.Data.PointF,Miyagi.Common.Data.PointF)">
            <summary>
            Scales the Quad.
            </summary>
            <param name="scaleFactor">The scale factor..</param>
            <param name="pivot">The pivot point.</param>
        </member>
        <member name="M:Miyagi.Common.Rendering.Primitive.SetVertexColours(Miyagi.Common.Data.ColourDefinition)">
            <summary>
            Sets the vertex colours.
            </summary>
            <param name="colour">The colour.</param>
        </member>
        <member name="M:Miyagi.Common.Rendering.Primitive.SetVertexLocations(Miyagi.Common.Data.PointF[])">
            <summary>
            Sets the vertex locations.
            </summary>
            <param name="points">The points.</param>
        </member>
        <member name="M:Miyagi.Common.Rendering.Primitive.SetVertexUVs(Miyagi.Common.Data.PointF[])">
            <summary>
            Sets the vertex UVs.
            </summary>
            <param name="points">The points.</param>
        </member>
        <member name="M:Miyagi.Common.Rendering.Primitive.Skew(Miyagi.Common.Data.PointF)">
            <summary>
            Skews the primitive.
            </summary>
            <param name="skewFactor">The skew factor.</param>
        </member>
        <member name="M:Miyagi.Common.Rendering.Primitive.Translate(Miyagi.Common.Data.PointF)">
            <summary>
            Translates the primitive.
            </summary>
            <param name="offset">The offset.</param>
        </member>
        <member name="P:Miyagi.Common.Rendering.Primitive.GeometricCopy">
            <summary>
            Gets a geometric copy of the primitive.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.Primitive.SkipRender">
            <summary>
            Gets or sets a value indicating whether rendering of this primitive should be skipped.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.Primitive.TriangleCount">
            <summary>
            Gets the triangle count.
            </summary>
            <value>The triangle count.</value>
        </member>
        <member name="P:Miyagi.Common.Rendering.Primitive.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.Primitive.VertexCount">
            <summary>
            Gets the vertex count.
            </summary>
            <value>The vertex count.</value>
        </member>
        <member name="P:Miyagi.Common.Rendering.Primitive.RenderVertexColours">
            <summary>
            Gets the render vertex colours.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.Primitive.RenderVertexPositions">
            <summary>
            Gets the render vertex positions.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.Primitive.RenderVertexUV">
            <summary>
            Gets the render vertex UVs.
            </summary>
            <value>The render vertex UVs.</value>
        </member>
        <member name="P:Miyagi.Common.Rendering.Primitive.VertexColours">
            <summary>
            Gets the vertex colours.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.Primitive.VertexPositions">
            <summary>
            Gets the vertex positions.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.Primitive.VertexUV">
            <summary>
            Gets the vertex UV.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.Primitive.IsTransformed">
            <summary>
            Gets a value indicating whether this instance is transformed.
            </summary>
            <value>
            <c>true</c> if this instance is transformed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Miyagi.Common.Rendering.Primitive.TransformedVertexPositions">
            <summary>
            Gets or sets the transformed vertex positions.
            </summary>
        </member>
        <member name="T:Miyagi.Common.Rendering.Quad">
            <summary>
            A primitive representing a quad.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Rendering.Quad.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.Common.Rendering.Quad"/> class.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Rendering.Quad.#ctor(Miyagi.Common.Data.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.Common.Rendering.Quad"/> class.
            </summary>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="M:Miyagi.Common.Rendering.Quad.#ctor(Miyagi.Common.Data.RectangleF,Miyagi.Common.Data.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.Common.Rendering.Quad"/> class.
            </summary>
            <param name="bounds">The bounds.</param>
            <param name="uv">The uv.</param>
        </member>
        <member name="M:Miyagi.Common.Rendering.Quad.#ctor(Miyagi.Common.Data.ColourDefinition,Miyagi.Common.Data.RectangleF,Miyagi.Common.Data.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.Common.Rendering.Quad"/> class.
            </summary>
            <param name="colourDefinition">The colour definition.</param>
            <param name="bounds">The bounds.</param>
            <param name="uv">The uv.</param>
        </member>
        <member name="M:Miyagi.Common.Rendering.Quad.CreateDummy(Miyagi.Common.Data.RectangleF)">
            <summary>
            Creates a dummy quad.
            </summary>
            <param name="posRect">A RectangleF representing the location.</param>
            <returns>The newly created quad.</returns>
        </member>
        <member name="M:Miyagi.Common.Rendering.Quad.HitTest(System.Single,System.Single)">
            <summary>
            Performs a hit test.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <returns><c>true</c> if the primitive is hit; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Miyagi.Common.Rendering.Quad.Move(Miyagi.Common.Data.PointF)">
            <summary>
            Moves the Quad.
            </summary>
            <param name="delta">The distance to move.</param>
        </member>
        <member name="M:Miyagi.Common.Rendering.Quad.MoveBottomEdge(Miyagi.Common.Data.PointF)">
            <summary>
            Moves the bottom edge of the Quad.
            </summary>
            <param name="delta">The distance to move.</param>
        </member>
        <member name="M:Miyagi.Common.Rendering.Quad.MoveLeftEdge(Miyagi.Common.Data.PointF)">
            <summary>
            Moves the left edge of the Quad.
            </summary>
            <param name="delta">The distance to move.</param>
        </member>
        <member name="M:Miyagi.Common.Rendering.Quad.MoveRightEdge(Miyagi.Common.Data.PointF)">
            <summary>
            Moves the right edge of the Quad.
            </summary>
            <param name="delta">The distance to move.</param>
        </member>
        <member name="M:Miyagi.Common.Rendering.Quad.MoveTopEdge(Miyagi.Common.Data.PointF)">
            <summary>
            Moves the top edge of the Quad.
            </summary>
            <param name="delta">The distance to move.</param>
        </member>
        <member name="M:Miyagi.Common.Rendering.Quad.RemoveCrop">
            <summary>
            Removes the crop.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Rendering.Quad.Resize(Miyagi.Common.Data.PointF)">
            <summary>
            Resizes the Quad.
            </summary>
            <param name="delta">The distance to resize.</param>
        </member>
        <member name="M:Miyagi.Common.Rendering.Quad.SetBounds(Miyagi.Common.Data.RectangleF)">
            <summary>
            Sets the position of the Quad.
            </summary>
            <param name="rect">A rect representing the position of the Quad in pixel.</param>
        </member>
        <member name="M:Miyagi.Common.Rendering.Quad.SetCroppedValues(Miyagi.Common.Data.RectangleF)">
            <summary>
            Crops the Quad.
            </summary>
            <param name="cropArea">A RectangleF representing the area the Quad should be cropped to.</param>
        </member>
        <member name="M:Miyagi.Common.Rendering.Quad.SetVertexUVs(Miyagi.Common.Data.RectangleF)">
            <summary>
            Sets the uv-coordinates of the Quad.
            </summary>
            <param name="rect">A FloatRect representing the uv-coordinates.</param>
        </member>
        <member name="P:Miyagi.Common.Rendering.Quad.Bottom">
            <summary>
            Gets the bottom of the Quad.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.Quad.Center">
            <summary>
            Gets the center of the Quad.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.Quad.GeometricCopy">
            <summary>
            Gets a geometric copy of the quad.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.Quad.Height">
            <summary>
            Gets the height of the Quad.
            </summary>
            <value>A float representing the height of the Quad.</value>
        </member>
        <member name="P:Miyagi.Common.Rendering.Quad.Left">
            <summary>
            Gets the x coordinate of the left edge of the Quad.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.Quad.Right">
            <summary>
            Gets the x coordinate of the right edge of the Quad.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.Quad.SkipRender">
            <summary>
            Gets or sets a value indicating whether rendering of this Quad should be skipped.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.Quad.Top">
            <summary>
            Gets the top of the Quad.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.Quad.TriangleCount">
            <summary>
            Gets the triangle count.
            </summary>
            <value>The triangle count.</value>
        </member>
        <member name="P:Miyagi.Common.Rendering.Quad.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.Quad.VertexCount">
            <summary>
            Gets the vertex count.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.Quad.Width">
            <summary>
            Gets the width of the Quad.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.Quad.RenderVertexPositions">
            <summary>
            Gets the positions of the verticies.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.Quad.RenderVertexUV">
            <summary>
            Gets the uv-coordinates of the verticies.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.Quad.GeometryVertexPos">
            <summary>
            Gets the untransformed verticies positions.
            </summary>
        </member>
        <member name="T:Miyagi.Common.Rendering.Triangle">
            <summary>
            A primitive representing a triangle.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Rendering.Triangle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.Common.Rendering.Triangle"/> class.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Rendering.Triangle.#ctor(Miyagi.Common.Data.PointF,Miyagi.Common.Data.PointF,Miyagi.Common.Data.PointF)">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.Common.Rendering.Triangle"/> class.
            </summary>
            <param name="a">The a.</param>
            <param name="b">The b.</param>
            <param name="c">The c.</param>
        </member>
        <member name="M:Miyagi.Common.Rendering.Triangle.Move(Miyagi.Common.Data.PointF)">
            <summary>
            Moves the primitive.
            </summary>
            <param name="delta">The distance to move.</param>
        </member>
        <member name="M:Miyagi.Common.Rendering.Triangle.Resize(Miyagi.Common.Data.PointF)">
            <summary>
            Resizes the primitive.
            </summary>
            <param name="delta">The distance to resize.</param>
        </member>
        <member name="P:Miyagi.Common.Rendering.Triangle.GeometricCopy">
            <summary>
            Gets a geometric copy of the primitive.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.Triangle.SkipRender">
            <summary>
            Gets or sets a value indicating whether rendering of this primitive should be skipped.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.Triangle.TriangleCount">
            <summary>
            Gets the triangle count.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.Triangle.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.Triangle.VertexCount">
            <summary>
            Gets the vertex count.
            </summary>
        </member>
        <member name="T:Miyagi.Common.Rendering.Vertex">
            <summary>
            Represents a vertex.
            </summary>
        </member>
        <member name="F:Miyagi.Common.Rendering.Vertex.Colour">
            <summary>
            Gets or sets the colour.
            </summary>
        </member>
        <member name="F:Miyagi.Common.Rendering.Vertex.Location">
            <summary>
            Gets or sets the location.
            </summary>
        </member>
        <member name="F:Miyagi.Common.Rendering.Vertex.UV">
            <summary>
            Gets or sets the UV.
            </summary>
        </member>
        <member name="T:Miyagi.Common.TextFormatterSettings">
            <summary>
            Represents settings for the <see cref="T:Miyagi.Common.TextFormatter"/>.
            </summary>
        </member>
        <member name="M:Miyagi.Common.TextFormatterSettings.#ctor(Miyagi.Common.Alignment,Miyagi.Common.Data.ColourDefinition,Miyagi.Common.Resources.Font,System.Boolean,System.Boolean,Miyagi.Common.Data.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.Common.TextFormatterSettings"/> class.
            </summary>
            <param name="alignment">The alignment.</param>
            <param name="colourDefinition">The colour definition.</param>
            <param name="font">The font.</param>
            <param name="multiline">if set to <c>true</c> the text can extend more than one line.</param>
            <param name="wordWrap">if set to <c>true</c> words should be wrapped to the next line when necessary.</param>
            <param name="viewportSize">Size of the viewport.</param>
        </member>
        <member name="P:Miyagi.Common.TextFormatterSettings.Alignment">
            <summary>
            Gets the alignment.
            </summary>
        </member>
        <member name="P:Miyagi.Common.TextFormatterSettings.ColourDefinition">
            <summary>
            Gets the colour definition.
            </summary>
        </member>
        <member name="P:Miyagi.Common.TextFormatterSettings.Font">
            <summary>
            Gets the font.
            </summary>
        </member>
        <member name="P:Miyagi.Common.TextFormatterSettings.Multiline">
            <summary>
            Gets a value indicating whether the text can extend more than one line.
            </summary>
        </member>
        <member name="P:Miyagi.Common.TextFormatterSettings.ViewportSize">
            <summary>
            Gets the size of the viewport.
            </summary>
        </member>
        <member name="P:Miyagi.Common.TextFormatterSettings.WordWrap">
            <summary>
            Gets a value indicating whether words should be wrapped to the next line when necessary.
            </summary>
        </member>
        <member name="T:Miyagi.Internals.ThirdParty.Matrix">
             <summary>
            
             </summary>
        </member>
        <member name="M:Miyagi.Internals.ThirdParty.Matrix.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.Internals.ThirdParty.Matrix"/> struct.
            </summary>
            <param name="m11">The M11.</param>
            <param name="m12">The M12.</param>
            <param name="m21">The M21.</param>
            <param name="m22">The M22.</param>
            <param name="offsetX">The offset X.</param>
            <param name="offsetY">The offset Y.</param>
        </member>
        <member name="T:Miyagi.Common.Data.Point">
            <summary>
            Represents an ordered pair of integer x- and y-coordinates that defines a point in a two-dimensional plane.
            </summary>
        </member>
        <member name="F:Miyagi.Common.Data.Point.Empty">
            <summary>
            Gets a value that represents a static empty Point.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Data.Point.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.Common.Data.Point"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:Miyagi.Common.Data.Point.op_Implicit(Miyagi.Common.Data.Point)~Miyagi.Common.Data.PointF">
            <summary>
            Performs an implicit conversion from <see cref="T:Miyagi.Common.Data.Point"/> to <see cref="T:Miyagi.Common.Data.PointF"/>.
            </summary>
            <param name="point">The point.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Point.op_Inequality(Miyagi.Common.Data.Point,Miyagi.Common.Data.Point)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Point.op_Multiply(Miyagi.Common.Data.Point,System.Int32)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Point.op_Multiply(Miyagi.Common.Data.Point,Miyagi.Common.Data.Point)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Point.op_Multiply(System.Int32,Miyagi.Common.Data.Point)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Point.op_Addition(Miyagi.Common.Data.Point,Miyagi.Common.Data.Point)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Point.op_UnaryNegation(Miyagi.Common.Data.Point)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="p">The p.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Point.op_Subtraction(Miyagi.Common.Data.Point,Miyagi.Common.Data.Point)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Point.op_Division(Miyagi.Common.Data.Point,System.Int32)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Point.op_Division(Miyagi.Common.Data.Point,Miyagi.Common.Data.Point)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Point.op_Equality(Miyagi.Common.Data.Point,Miyagi.Common.Data.Point)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Point.Add(Miyagi.Common.Data.Point,Miyagi.Common.Data.Point)">
            <summary>
            Adds two points.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns>The <see cref="T:Miyagi.Common.Data.Point"/> that is the result of the addition operation.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Point.Add(Miyagi.Common.Data.Point,System.Int32,System.Int32)">
            <summary>
            Adds two points.
            </summary>
            <param name="first">The first.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>The <see cref="T:Miyagi.Common.Data.Point"/> that is the result of the addition operation.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Point.Divide(Miyagi.Common.Data.Point,Miyagi.Common.Data.Point)">
            <summary>
            Divides two points.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns>The <see cref="T:Miyagi.Common.Data.Point"/> that is the result of the division operation.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Point.Multiply(Miyagi.Common.Data.Point,Miyagi.Common.Data.Point)">
            <summary>
            Multiplies two points.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns>The <see cref="T:Miyagi.Common.Data.Point"/> that is the result of the multiplication operation.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Point.Parse(System.String)">
            <summary>
            Converts a string representation to a Point instance.
            </summary>
            <param name="s">A string representation of a Point instance.</param>
            <returns>The Point instance.</returns>
            <exception cref="T:System.FormatException"><c>FormatException</c>.</exception>
        </member>
        <member name="M:Miyagi.Common.Data.Point.Subtract(Miyagi.Common.Data.Point,Miyagi.Common.Data.Point)">
            <summary>
            Subtracts two points.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns>The <see cref="T:Miyagi.Common.Data.Point"/> that is the result of the subtraction operation.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Point.AngleBetween(Miyagi.Common.Data.Point)">
            <summary>
            Gets the angle between two points.
            </summary>
            <param name="p">The p.</param>
            <returns>A <see cref="T:System.Double"/> representing the angle in degrees.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Point.Distance(Miyagi.Common.Data.Point)">
            <summary>
            Gets the distance between two points.
            </summary>
            <param name="p">The p.</param>
            <returns>A <see cref="T:System.Double"/> representing the distance.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Point.Equals(Miyagi.Common.Data.Point)">
            <summary>
            Determines whether the specified <see cref="T:Miyagi.Common.Data.Point"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Miyagi.Common.Data.Point"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:Miyagi.Common.Data.Point"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Miyagi.Common.Data.Point.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Miyagi.Common.Data.Point.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Miyagi.Common.Data.Point.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Miyagi.Common.Data.Point.Length">
            <summary>
            Gets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:Miyagi.Common.Data.Point.X">
            <summary>
            Gets the x-coordinate of this <see cref="T:Miyagi.Common.Data.Point"/>.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Point.Y">
            <summary>
            Gets the y-coordinate of this <see cref="T:Miyagi.Common.Data.Point"/>.
            </summary>
        </member>
        <member name="T:Miyagi.Common.Data.PointF">
            <summary>
            Represents an ordered pair of floating point x- and y-coordinates that defines a point in a two-dimensional plane.
            </summary>
        </member>
        <member name="F:Miyagi.Common.Data.PointF.Empty">
            <summary>
            Gets a value that represents a static empty PointF.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Data.PointF.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.Common.Data.PointF"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:Miyagi.Common.Data.PointF.op_Inequality(Miyagi.Common.Data.PointF,Miyagi.Common.Data.PointF)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.PointF.op_Multiply(Miyagi.Common.Data.PointF,System.Single)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.PointF.op_Multiply(Miyagi.Common.Data.PointF,Miyagi.Common.Data.PointF)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.PointF.op_Multiply(System.Single,Miyagi.Common.Data.PointF)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.PointF.op_Addition(Miyagi.Common.Data.PointF,Miyagi.Common.Data.PointF)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.PointF.op_UnaryNegation(Miyagi.Common.Data.PointF)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="p">The p.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.PointF.op_Subtraction(Miyagi.Common.Data.PointF,Miyagi.Common.Data.PointF)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.PointF.op_Division(Miyagi.Common.Data.PointF,System.Single)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.PointF.op_Division(Miyagi.Common.Data.PointF,Miyagi.Common.Data.PointF)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.PointF.op_Equality(Miyagi.Common.Data.PointF,Miyagi.Common.Data.PointF)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.PointF.Add(Miyagi.Common.Data.PointF,Miyagi.Common.Data.PointF)">
            <summary>
            Adds two points.
            </summary>
            <param name="first">The first point.</param>
            <param name="second">The second point.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.PointF.Add(Miyagi.Common.Data.PointF,System.Single,System.Single)">
            <summary>
            Adds two points.
            </summary>
            <param name="first">The first point.</param>
            <param name="x">The x-coordnate of the second point.</param>
            <param name="y">The y-coordnate of the second point.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.PointF.Divide(Miyagi.Common.Data.PointF,Miyagi.Common.Data.PointF)">
            <summary>
            Divides two points.
            </summary>
            <param name="first">The first point.</param>
            <param name="second">The second point.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.PointF.FromXElement(System.Xml.Linq.XElement)">
            <summary>
            Converts an XElement representation to a <see cref="T:Miyagi.Common.Data.PointF"/> instance.
            </summary>
            <param name="xelement">The xelement.</param>
            <returns>The resulting <see cref="T:Miyagi.Common.Data.PointF"/>.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.PointF.Multiply(Miyagi.Common.Data.PointF,Miyagi.Common.Data.PointF)">
            <summary>
            Multiplies two points.
            </summary>
            <param name="first">The first point.</param>
            <param name="second">The second point.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.PointF.Parse(System.String)">
            <summary>
            Converts a string representation to a <see cref="T:Miyagi.Common.Data.PointF"/> instance.
            </summary>
            <param name="s">A string representation of a <see cref="T:Miyagi.Common.Data.PointF"/> instance.</param>
            <returns>The <see cref="T:Miyagi.Common.Data.PointF"/> instance.</returns>
            <exception cref="T:System.FormatException"><c>FormatException</c>.</exception>
        </member>
        <member name="M:Miyagi.Common.Data.PointF.Subtract(Miyagi.Common.Data.PointF,Miyagi.Common.Data.PointF)">
            <summary>
            Subtracts two points.
            </summary>
            <param name="first">The first point.</param>
            <param name="second">The second point.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.PointF.AngleBetween(Miyagi.Common.Data.PointF)">
            <summary>
            Gets the angle between two points.
            </summary>
            <param name="p">The p.</param>
            <returns>A <see cref="T:System.Double"/> representing the angle in degrees.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.PointF.Distance(Miyagi.Common.Data.PointF)">
            <summary>
            Gets the distance between two points.
            </summary>
            <param name="p">The p.</param>
            <returns>A <see cref="T:System.Double"/> representing the distance.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.PointF.Equals(Miyagi.Common.Data.PointF)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            true if <paramref name="other"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="other">Another object to compare to.</param>
        </member>
        <member name="M:Miyagi.Common.Data.PointF.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">Another object to compare to.</param>
        </member>
        <member name="M:Miyagi.Common.Data.PointF.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:Miyagi.Common.Data.PointF.IsInsidePolygon(Miyagi.Common.Data.PointF[])">
            <summary>
            Determines whether this inside is inside the specified polygon.
            </summary>
            <param name="polygon">The polygon.</param>
            <returns>
            <c>true</c> if this instance is in the specified polygon; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Miyagi.Common.Data.PointF.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Miyagi.Common.Data.PointF.ToXElement(System.String)">
            <summary>
            Converts a <see cref="T:Miyagi.Common.Data.PointF"/> to an XElement representation.
            </summary>
            <param name="name">The name of the XElement.</param>
            <returns>The XElement representation of this instance.</returns>
        </member>
        <member name="P:Miyagi.Common.Data.PointF.Length">
            <summary>
            Gets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:Miyagi.Common.Data.PointF.X">
            <summary>
            Gets the x-coordinate of this <see cref="T:Miyagi.Common.Data.PointF"/>.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.PointF.Y">
            <summary>
            Gets the y-coordinate of this <see cref="T:Miyagi.Common.Data.PointF"/>.
            </summary>
        </member>
        <member name="T:Miyagi.Common.Data.Rectangle">
            <summary>
            Represents the location and size of a rectangle as integer values.
            </summary>
        </member>
        <member name="F:Miyagi.Common.Data.Rectangle.Empty">
            <summary>
            Gets a value that represents a static empty Rectangle.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Data.Rectangle.#ctor(Miyagi.Common.Data.Point,Miyagi.Common.Data.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.Common.Data.Rectangle"/> struct.
            </summary>
            <param name="location">The location.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:Miyagi.Common.Data.Rectangle.#ctor(System.Int32,System.Int32,Miyagi.Common.Data.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.Common.Data.Rectangle"/> struct.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:Miyagi.Common.Data.Rectangle.#ctor(Miyagi.Common.Data.Point,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.Common.Data.Rectangle"/> struct.
            </summary>
            <param name="location">The location.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Miyagi.Common.Data.Rectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.Common.Data.Rectangle"/> struct.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Miyagi.Common.Data.Rectangle.op_Implicit(Miyagi.Common.Data.Rectangle)~Miyagi.Common.Data.RectangleF">
            <summary>
            Performs an implicit conversion from <see cref="T:Miyagi.Common.Data.Rectangle"/> to <see cref="T:Miyagi.Common.Data.RectangleF"/>.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Rectangle.op_Inequality(Miyagi.Common.Data.Rectangle,Miyagi.Common.Data.Rectangle)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Rectangle.op_Equality(Miyagi.Common.Data.Rectangle,Miyagi.Common.Data.Rectangle)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Rectangle.FromLTRB(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a rectangle from edge locations.
            </summary>
            <param name="left">The left.</param>
            <param name="top">The top.</param>
            <param name="right">The right.</param>
            <param name="bottom">The bottom.</param>
            <returns>The newly created Rectangle.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Rectangle.Intersect(Miyagi.Common.Data.Rectangle,Miyagi.Common.Data.Rectangle)">
            <summary>
            Intersects two <see cref="T:Miyagi.Common.Data.Rectangle"/> instances.
            </summary>
            <param name="a">The first rectangle.</param>
            <param name="b">The second rectangle.</param>
            <returns>The intersected rectangle.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Rectangle.Parse(System.String)">
            <summary>
            Converts a string representation to a Rectangle instance.
            </summary>
            <param name="s">A string representation of a Rectangle instance.</param>
            <returns>The Rectangle instance.</returns>
            <exception cref="T:System.FormatException"><c>FormatException</c>.</exception>
        </member>
        <member name="M:Miyagi.Common.Data.Rectangle.Contains(Miyagi.Common.Data.Rectangle)">
            <summary>
            Determines whether this <see cref="T:Miyagi.Common.Data.Rectangle"/> instance contains the specified <see cref="T:Miyagi.Common.Data.Rectangle"/> instance.
            </summary>
            <param name="rect">The <see cref="T:Miyagi.Common.Data.Rectangle"/> to test.</param>
            <returns>
            <c>true</c> if this instance contains the specified <see cref="T:Miyagi.Common.Data.Rectangle"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Miyagi.Common.Data.Rectangle.Contains(Miyagi.Common.Data.Point)">
            <summary>
            Determines whether this <see cref="T:Miyagi.Common.Data.Rectangle"/> instance contains the specified <see cref="T:Miyagi.Common.Data.Point"/> instance.
            </summary>
            <param name="p">The <see cref="T:Miyagi.Common.Data.Point"/> to test.</param>
            <returns>
            <c>true</c> if this instance contains the specified <see cref="T:Miyagi.Common.Data.Point"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Miyagi.Common.Data.Rectangle.Contains(System.Int32,System.Int32)">
            <summary>
            Determines whether this <see cref="T:Miyagi.Common.Data.Rectangle"/> instance contains the specified coordinate.
            </summary>
            <param name="x">The x-coordinate to test.</param>
            <param name="y">The y-coordinate to test..</param>
            <returns>
            <c>true</c> if this instance contains the specified coordinate; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Miyagi.Common.Data.Rectangle.Equals(Miyagi.Common.Data.Rectangle)">
            <summary>
            Determines whether the specified <see cref="T:Miyagi.Common.Data.Rectangle"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Miyagi.Common.Data.Rectangle"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:Miyagi.Common.Data.Rectangle"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Miyagi.Common.Data.Rectangle.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Miyagi.Common.Data.Rectangle.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Miyagi.Common.Data.Rectangle.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Miyagi.Common.Data.Rectangle.Bottom">
            <summary>
            Gets the y-coordinate of the bottom edge.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Rectangle.Center">
            <summary>
            Gets the center.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Rectangle.Height">
            <summary>
            Gets the height.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Rectangle.Left">
            <summary>
            Gets the x-coordinate of the left edge.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Rectangle.Location">
            <summary>
            Gets the location.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Rectangle.Right">
            <summary>
            Gets the x-coordinate of the right edge.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Rectangle.Size">
            <summary>
            Gets the size.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Rectangle.Top">
            <summary>
            Gets the y-coordinate of the top edge.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Rectangle.Width">
            <summary>
            Gets the width.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Rectangle.X">
            <summary>
            Gets the X-coordinate.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.Rectangle.Y">
            <summary>
            Gets the Y-coordinate.
            </summary>
        </member>
        <member name="T:Miyagi.Common.Data.RectangleF">
            <summary>
            Represents the location and size of a rectangle as floating point values.
            </summary>
        </member>
        <member name="F:Miyagi.Common.Data.RectangleF.Empty">
            <summary>
            Gets a value that represents a static empty RectangleF.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Data.RectangleF.#ctor(Miyagi.Common.Data.PointF,Miyagi.Common.Data.SizeF)">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.Common.Data.RectangleF"/> struct.
            </summary>
            <param name="location">The location.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:Miyagi.Common.Data.RectangleF.#ctor(Miyagi.Common.Data.PointF,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.Common.Data.RectangleF"/> struct.
            </summary>
            <param name="location">The location.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Miyagi.Common.Data.RectangleF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.Common.Data.RectangleF"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Miyagi.Common.Data.RectangleF.op_Inequality(Miyagi.Common.Data.RectangleF,Miyagi.Common.Data.RectangleF)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.RectangleF.op_Equality(Miyagi.Common.Data.RectangleF,Miyagi.Common.Data.RectangleF)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.RectangleF.FromLTRB(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a rectangle from edge locations.
            </summary>
            <param name="left">The left.</param>
            <param name="top">The top.</param>
            <param name="right">The right.</param>
            <param name="bottom">The bottom.</param>
            <returns>The newly created Rectangle.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.RectangleF.FromXElement(System.Xml.Linq.XElement)">
            <summary>
            Converts an XElement representation to a <see cref="T:Miyagi.Common.Data.RectangleF"/> instance.
            </summary>
            <param name="xelement">The xelement.</param>
            <returns>The resulting <see cref="T:Miyagi.Common.Data.RectangleF"/>.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.RectangleF.Intersect(Miyagi.Common.Data.RectangleF,Miyagi.Common.Data.RectangleF)">
            <summary>
            Intersects two <see cref="T:Miyagi.Common.Data.RectangleF"/> instances.
            </summary>
            <param name="a">The first rectangle.</param>
            <param name="b">The second rectangle.</param>
            <returns>The intersected rectangle.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.RectangleF.Parse(System.String)">
            <summary>
            Converts a string representation to a <see cref="T:Miyagi.Common.Data.RectangleF"/> instance.
            </summary>
            <param name="s">A string representation of a <see cref="T:Miyagi.Common.Data.RectangleF"/> instance.</param>
            <returns>The <see cref="T:Miyagi.Common.Data.RectangleF"/> instance.</returns>
            <exception cref="T:System.FormatException"><c>FormatException</c>.</exception>
        </member>
        <member name="M:Miyagi.Common.Data.RectangleF.TryParse(System.String,Miyagi.Common.Data.RectangleF@)">
            <summary>
            Converts a string representation to a <see cref="T:Miyagi.Common.Data.RectangleF"/> instance.
            </summary>
            <param name="s">A string representation of a <see cref="T:Miyagi.Common.Data.RectangleF"/> instance.</param>
            <param name="rectangleF">A <see cref="T:Miyagi.Common.Data.RectangleF"/> instance representing the conversion result.</param>
            <returns><c>true</c> if the conversion was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.RectangleF.Contains(Miyagi.Common.Data.RectangleF)">
            <summary>
            Determines whether this <see cref="T:Miyagi.Common.Data.RectangleF"/> instance contains the specified <see cref="T:Miyagi.Common.Data.RectangleF"/> instance.
            </summary>
            <param name="rect">The <see cref="T:Miyagi.Common.Data.RectangleF"/> to test.</param>
            <returns>
            <c>true</c> if this instance contains the specified <see cref="T:Miyagi.Common.Data.RectangleF"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Miyagi.Common.Data.RectangleF.Contains(Miyagi.Common.Data.PointF)">
            <summary>
            Determines whether this <see cref="T:Miyagi.Common.Data.RectangleF"/> instance contains the specified <see cref="T:Miyagi.Common.Data.PointF"/> instance.
            </summary>
            <param name="p">The <see cref="T:Miyagi.Common.Data.PointF"/> to test.</param>
            <returns>
            <c>true</c> if this instance contains the specified <see cref="T:Miyagi.Common.Data.PointF"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Miyagi.Common.Data.RectangleF.Contains(System.Single,System.Single)">
            <summary>
            Determines whether this <see cref="T:Miyagi.Common.Data.RectangleF"/> instance contains the specified coordinate.
            </summary>
            <param name="x">The x-coordinate to test.</param>
            <param name="y">The y-coordinate to test..</param>
            <returns>
            <c>true</c> if this instance contains the specified coordinate; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Miyagi.Common.Data.RectangleF.Equals(Miyagi.Common.Data.RectangleF)">
            <summary>
            Determines whether the specified <see cref="T:Miyagi.Common.Data.RectangleF"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Miyagi.Common.Data.RectangleF"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:Miyagi.Common.Data.RectangleF"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Miyagi.Common.Data.RectangleF.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Miyagi.Common.Data.RectangleF.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Miyagi.Common.Data.RectangleF.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Miyagi.Common.Data.RectangleF.ToXElement(System.String)">
            <summary>
            Converts a <see cref="T:Miyagi.Common.Data.RectangleF"/> to an XElement representation.
            </summary>
            <param name="name">The name of the XElement.</param>
            <returns>The XElement representation of this instance.</returns>
        </member>
        <member name="P:Miyagi.Common.Data.RectangleF.Bottom">
            <summary>
            Gets the y-coordinate of the bottom edge.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.RectangleF.Center">
            <summary>
            Gets the center.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.RectangleF.Height">
            <summary>
            Gets the height.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.RectangleF.Left">
            <summary>
            Gets the x-coordinate of the left edge.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.RectangleF.Location">
            <summary>
            Gets the location.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.RectangleF.Right">
            <summary>
            Gets the x-coordinate of the right edge.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.RectangleF.Size">
            <summary>
            Gets the size.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.RectangleF.Top">
            <summary>
            Gets the y-coordinate of the top edge.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.RectangleF.Width">
            <summary>
            Gets the width.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.RectangleF.X">
            <summary>
            Gets the X-coordinate.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Data.RectangleF.Y">
            <summary>
            Gets the Y-coordinate.
            </summary>
        </member>
        <member name="T:Miyagi.Common.Data.Size">
            <summary>
            A structure describing the Size of an object as a pair of integers. 
            </summary>
        </member>
        <member name="F:Miyagi.Common.Data.Size.Empty">
            <summary>
            Gets a value that represents a static empty Size.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Data.Size.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.Common.Data.Size"/> struct.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Miyagi.Common.Data.Size.op_Implicit(Miyagi.Common.Data.Size)~Miyagi.Common.Data.SizeF">
            <summary>
            Performs an implicit conversion from <see cref="T:Miyagi.Common.Data.Size"/> to <see cref="T:Miyagi.Common.Data.SizeF"/>.
            </summary>
            <param name="size">The size.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Size.op_Inequality(Miyagi.Common.Data.Size,Miyagi.Common.Data.Size)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Size.op_Addition(Miyagi.Common.Data.Size,Miyagi.Common.Data.Size)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Size.op_Subtraction(Miyagi.Common.Data.Size,Miyagi.Common.Data.Size)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Size.op_Subtraction(Miyagi.Common.Data.Size,Miyagi.Common.Data.Thickness)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Size.op_Subtraction(Miyagi.Common.Data.Thickness,Miyagi.Common.Data.Size)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Size.op_Equality(Miyagi.Common.Data.Size,Miyagi.Common.Data.Size)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Size.Add(Miyagi.Common.Data.Size,Miyagi.Common.Data.Size)">
            <summary>
            Adds two sizes.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Size.Parse(System.String)">
            <summary>
            Converts a string representation to a Size instance.
            </summary>
            <param name="s">A string representation of a Size instance.</param>
            <returns>The Size instance.</returns>
            <exception cref="T:System.FormatException"><c>FormatException</c>.</exception>
        </member>
        <member name="M:Miyagi.Common.Data.Size.Equals(Miyagi.Common.Data.Size)">
            <summary>
            Determines whether the specified <see cref="T:Miyagi.Common.Data.Size"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Miyagi.Common.Data.Size"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:Miyagi.Common.Data.Size"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Miyagi.Common.Data.Size.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Miyagi.Common.Data.Size.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Miyagi.Common.Data.Size.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Miyagi.Common.Data.Size.Height">
            <summary>
            Gets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:Miyagi.Common.Data.Size.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Miyagi.Common.Data.Size.Width">
            <summary>
            Gets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="T:Miyagi.Common.Data.SizeF">
            <summary>
            A structure describing the Size of an object as a pair of floats. 
            </summary>
        </member>
        <member name="F:Miyagi.Common.Data.SizeF.Empty">
            <summary>
            Gets a value that represents a static empty SizeF.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Data.SizeF.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.Common.Data.SizeF"/> struct.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Miyagi.Common.Data.SizeF.op_Inequality(Miyagi.Common.Data.SizeF,Miyagi.Common.Data.SizeF)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.SizeF.op_Addition(Miyagi.Common.Data.SizeF,Miyagi.Common.Data.SizeF)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.SizeF.op_Subtraction(Miyagi.Common.Data.SizeF,Miyagi.Common.Data.SizeF)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.SizeF.op_Equality(Miyagi.Common.Data.SizeF,Miyagi.Common.Data.SizeF)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.SizeF.Add(Miyagi.Common.Data.SizeF,Miyagi.Common.Data.SizeF)">
            <summary>
            Adds two sizes.
            </summary>
            <param name="first">The first size.</param>
            <param name="second">The second size.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.SizeF.Parse(System.String)">
            <summary>
            Converts a string representation to a SizeF instance.
            </summary>
            <param name="s">A string representation of a SizeF instance.</param>
            <returns>The SizeF instance.</returns>
            <exception cref="T:System.FormatException"><c>FormatException</c>.</exception>
        </member>
        <member name="M:Miyagi.Common.Data.SizeF.Equals(Miyagi.Common.Data.SizeF)">
            <summary>
            Determines whether the specified <see cref="T:Miyagi.Common.Data.SizeF"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Miyagi.Common.Data.SizeF"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:Miyagi.Common.Data.SizeF"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Miyagi.Common.Data.SizeF.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Miyagi.Common.Data.SizeF.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Miyagi.Common.Data.SizeF.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Miyagi.Common.Data.SizeF.Height">
            <summary>
            Gets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:Miyagi.Common.Data.SizeF.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Miyagi.Common.Data.SizeF.Width">
            <summary>
            Gets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="T:Miyagi.Common.Alignment">
            <summary>
            Specifies the alignment of content.
            </summary>
        </member>
        <member name="F:Miyagi.Common.Alignment.None">
            <summary>
            No alignment.
            </summary>
        </member>
        <member name="F:Miyagi.Common.Alignment.MiddleLeft">
            <summary>
            Left alignment.
            </summary>
        </member>
        <member name="F:Miyagi.Common.Alignment.MiddleRight">
            <summary>
            Right alignment.
            </summary>
        </member>
        <member name="F:Miyagi.Common.Alignment.MiddleCenter">
            <summary>
            Center alignment.
            </summary>
        </member>
        <member name="F:Miyagi.Common.Alignment.TopLeft">
            <summary>
            Top left alignment.
            </summary>
        </member>
        <member name="F:Miyagi.Common.Alignment.TopCenter">
            <summary>
            Top center alignment.
            </summary>
        </member>
        <member name="F:Miyagi.Common.Alignment.TopRight">
            <summary>
            Top right alignment.
            </summary>
        </member>
        <member name="F:Miyagi.Common.Alignment.BottomLeft">
            <summary>
            Bottom left alignment.
            </summary>
        </member>
        <member name="F:Miyagi.Common.Alignment.BottomCenter">
            <summary>
            Bottom center alignment.
            </summary>
        </member>
        <member name="F:Miyagi.Common.Alignment.BottomRight">
            <summary>
            Bottom right alignment.
            </summary>
        </member>
        <member name="T:Miyagi.Common.FrameAnimationMode">
            <summary>
            Specifies the texture animation mode.
            </summary>
        </member>
        <member name="F:Miyagi.Common.FrameAnimationMode.BackwardOnce">
            <summary>
            Frames are animated backwards once.
            </summary>
        </member>
        <member name="F:Miyagi.Common.FrameAnimationMode.BackwardLoop">
            <summary>
            Frames are looped backwards.
            </summary>
        </member>
        <member name="F:Miyagi.Common.FrameAnimationMode.ForwardBackwardOnce">
            <summary>
            Frames are animated forwards and backwards once.
            </summary>
        </member>
        <member name="F:Miyagi.Common.FrameAnimationMode.ForwardBackwardLoop">
            <summary>
            Frames are looped forwards and backwards.
            </summary>
        </member>
        <member name="F:Miyagi.Common.FrameAnimationMode.ForwardOnce">
            <summary>
            Frames are animated forwards once.
            </summary>
        </member>
        <member name="F:Miyagi.Common.FrameAnimationMode.ForwardLoop">
            <summary>
            Frames are looped forwards.
            </summary>
        </member>
        <member name="T:Miyagi.Common.GpuProgramType">
            <summary>
            Gpu program types.
            </summary>
        </member>
        <member name="F:Miyagi.Common.GpuProgramType.Fragment">
            <summary>
            Fragment gpu program.
            </summary>
        </member>
        <member name="F:Miyagi.Common.GpuProgramType.Vertex">
            <summary>
            Vertex gpu program.
            </summary>
        </member>
        <member name="T:Miyagi.Common.LoggerLevel">
            <summary>
            Logger filter level.
            </summary>
        </member>
        <member name="F:Miyagi.Common.LoggerLevel.None">
            <summary>
            No message is logged.
            </summary>
        </member>
        <member name="F:Miyagi.Common.LoggerLevel.Debug">
            <summary>
            Every message is logged.
            </summary>
        </member>
        <member name="F:Miyagi.Common.LoggerLevel.Information">
            <summary>
            Messages with Information severity and higher are logged.
            </summary>
        </member>
        <member name="F:Miyagi.Common.LoggerLevel.Warning">
            <summary>
            Messages with Warning severity and higher are logged.
            </summary>
        </member>
        <member name="F:Miyagi.Common.LoggerLevel.Error">
            <summary>
            Only messages with Error severity are logged.
            </summary>
        </member>
        <member name="T:Miyagi.Common.LogSeverity">
            <summary>
            Specifies the severity of a log message.
            </summary>
        </member>
        <member name="F:Miyagi.Common.LogSeverity.Debug">
            <summary>
            Debug severity.
            </summary>
        </member>
        <member name="F:Miyagi.Common.LogSeverity.Information">
            <summary>
            Information severity.
            </summary>
        </member>
        <member name="F:Miyagi.Common.LogSeverity.Warning">
            <summary>
            Warning severity.
            </summary>
        </member>
        <member name="F:Miyagi.Common.LogSeverity.Error">
            <summary>
            Error severity.
            </summary>
        </member>
        <member name="T:Miyagi.Common.MouseButton">
            <summary>
            Specifies a mouse button.
            </summary>
        </member>
        <member name="F:Miyagi.Common.MouseButton.Left">
            <summary>
            The left mouse button.
            </summary>
        </member>
        <member name="F:Miyagi.Common.MouseButton.Middle">
            <summary>
            The middle mouse button.
            </summary>
        </member>
        <member name="F:Miyagi.Common.MouseButton.Right">
            <summary>
            The right mouse button.
            </summary>
        </member>
        <member name="T:Miyagi.Common.MouseGestures">
            <summary>
            Mouse gestures.
            </summary>
        </member>
        <member name="F:Miyagi.Common.MouseGestures.None">
            <summary>
            No mouse gesture.
            </summary>
        </member>
        <member name="F:Miyagi.Common.MouseGestures.Up">
            <summary>
            Up mouse gesture.
            </summary>
        </member>
        <member name="F:Miyagi.Common.MouseGestures.Down">
            <summary>
            Down mouse gesture.
            </summary>
        </member>
        <member name="F:Miyagi.Common.MouseGestures.Right">
            <summary>
            Right mouse gesture.
            </summary>
        </member>
        <member name="F:Miyagi.Common.MouseGestures.Left">
            <summary>
            Left mouse gesture.
            </summary>
        </member>
        <member name="F:Miyagi.Common.MouseGestures.UpLeft">
            <summary>
            UpLeft mouse gesture.
            </summary>
        </member>
        <member name="F:Miyagi.Common.MouseGestures.UpRight">
            <summary>
            UpRight mouse gesture.
            </summary>
        </member>
        <member name="F:Miyagi.Common.MouseGestures.DownLeft">
            <summary>
            DownLeft mouse gesture.
            </summary>
        </member>
        <member name="F:Miyagi.Common.MouseGestures.DownRight">
            <summary>
            DownRight mouse gesture.
            </summary>
        </member>
        <member name="T:Miyagi.Common.Orientation">
            <summary>
            Specifies the orientation of a control.
            </summary>
        </member>
        <member name="F:Miyagi.Common.Orientation.Horizontal">
            <summary>
            Horizontal orientation.
            </summary>
        </member>
        <member name="F:Miyagi.Common.Orientation.Vertical">
            <summary>
            Vertical orientation.
            </summary>
        </member>
        <member name="T:Miyagi.Common.PrimitiveType">
            <summary>
            Specifies the type of a primitive.
            </summary>
        </member>
        <member name="F:Miyagi.Common.PrimitiveType.Triangle">
            <summary>
            A triangle primitive.
            </summary>
        </member>
        <member name="F:Miyagi.Common.PrimitiveType.Quad">
            <summary>
            A quad primitive.
            </summary>
        </member>
        <member name="F:Miyagi.Common.PrimitiveType.Custom">
            <summary>
            A custom primitive.
            </summary>
        </member>
        <member name="T:Miyagi.Common.Progression">
            <summary>
            Specifies the progression.
            </summary>
        </member>
        <member name="F:Miyagi.Common.Progression.Constant">
            <summary>
            Constant progression.
            </summary>
        </member>
        <member name="F:Miyagi.Common.Progression.Increasing">
            <summary>
            Increasing progression.
            </summary>
        </member>
        <member name="F:Miyagi.Common.Progression.Decreasing">
            <summary>
            Decreasing progression.
            </summary>
        </member>
        <member name="T:Miyagi.Common.ScrollEventType">
            <summary>
            Specifies the type of action used to raise the Scroll event.
            </summary>
        </member>
        <member name="F:Miyagi.Common.ScrollEventType.SmallDecrement">
            <summary>
            The scroll box was moved a small distance. The user clicked the left(horizontal) or top(vertical) scroll arrow, or pressed the UP ARROW key.
            </summary>
        </member>
        <member name="F:Miyagi.Common.ScrollEventType.SmallIncrement">
            <summary>
            The scroll box was moved a small distance. The user clicked the right(horizontal) or bottom(vertical) scroll arrow, or pressed the DOWN ARROW key.
            </summary>
        </member>
        <member name="F:Miyagi.Common.ScrollEventType.LargeDecrement">
            <summary>
            The scroll box moved a large distance. The user clicked the scroll bar to the left(horizontal) or above(vertical) the scroll box, or pressed the PAGE UP key.
            </summary>
        </member>
        <member name="F:Miyagi.Common.ScrollEventType.LargeIncrement">
            <summary>
            The scroll box moved a large distance. The user clicked the scroll bar to the right(horizontal) or below(vertical) the scroll box, or pressed the PAGE DOWN key.
            </summary>
        </member>
        <member name="F:Miyagi.Common.ScrollEventType.ThumbLocation">
            <summary>
            The scroll box was moved.
            </summary>
        </member>
        <member name="F:Miyagi.Common.ScrollEventType.ThumbTrack">
            <summary>
            The scroll box is currently being moved.
            </summary>
        </member>
        <member name="F:Miyagi.Common.ScrollEventType.First">
            <summary>
            The scroll box was moved to the Minimum position.
            </summary>
        </member>
        <member name="F:Miyagi.Common.ScrollEventType.Last">
            <summary>
            The scroll box was moved to the Maximum position.
            </summary>
        </member>
        <member name="F:Miyagi.Common.ScrollEventType.EndScroll">
            <summary>
            The scroll box has stopped moving.
            </summary>
        </member>
        <member name="T:Miyagi.Common.SkinChangingEvent">
            <summary>
            Skin changing events.
            </summary>
        </member>
        <member name="F:Miyagi.Common.SkinChangingEvent.MouseDown">
            <summary>
            Occurs when a mouse button is pressed over a control.
            </summary>
        </member>
        <member name="F:Miyagi.Common.SkinChangingEvent.MouseUp">
            <summary>
            Occurs when a mouse button is released over a control.
            </summary>
        </member>
        <member name="F:Miyagi.Common.SkinChangingEvent.MouseEnter">
            <summary>
            Occurs when the mouse cursor enters a control.
            </summary>
        </member>
        <member name="F:Miyagi.Common.SkinChangingEvent.MouseLeave">
            <summary>
            Occurs when the mouse cursor leaves a control.
            </summary>
        </member>
        <member name="T:Miyagi.Common.TextureFiltering">
            <summary>
            Specifies the texture filtering.
            </summary>
        </member>
        <member name="F:Miyagi.Common.TextureFiltering.None">
            <summary>
            No texture filtering.
            </summary>
        </member>
        <member name="F:Miyagi.Common.TextureFiltering.Anisotropic">
            <summary>
            Anisotropic texture filtering.
            </summary>
        </member>
        <member name="F:Miyagi.Common.TextureFiltering.Point">
            <summary>
            Point texture filtering.
            </summary>
        </member>
        <member name="F:Miyagi.Common.TextureFiltering.Linear">
            <summary>
            Linear texture filtering.
            </summary>
        </member>
        <member name="T:Miyagi.Common.IDeepCopiable`1">
            <summary>
            Supports the creation of a deep copy.
            </summary>
            <typeparam name="T">The type of the deep copy.</typeparam>
        </member>
        <member name="M:Miyagi.Common.IDeepCopiable`1.CreateDeepCopy">
            <summary>
            Creates a deep copy.
            </summary>
            <returns>The deep copy.</returns>
        </member>
        <member name="T:Miyagi.Common.IManager">
            <summary>
            The interface for managers.
            </summary>
        </member>
        <member name="M:Miyagi.Common.IManager.Initialize">
            <summary>
            Initializes the manager.
            </summary>
        </member>
        <member name="M:Miyagi.Common.IManager.LoadSerializationData(Miyagi.Common.Serialization.SerializationData)">
            <summary>
            Loads the serialization data.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:Miyagi.Common.IManager.NotifyManagerRegistered(Miyagi.Common.IManager)">
            <summary>
            Notifies a manager on registration of another manager.
            </summary>
            <param name="manager">The newly registered manager.</param>
        </member>
        <member name="M:Miyagi.Common.IManager.SaveSerializationData(Miyagi.Common.Serialization.SerializationData)">
            <summary>
            Saves the serialization data.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:Miyagi.Common.IManager.Update">
            <summary>
            Updates the manager.
            </summary>
        </member>
        <member name="E:Miyagi.Common.IManager.Disposing">
            <summary>
            Occurs when the manager is disposing.
            </summary>
        </member>
        <member name="P:Miyagi.Common.IManager.IsDisposed">
            <summary>
            Gets a value indicating whether the manager has been disposed.
            </summary>
        </member>
        <member name="P:Miyagi.Common.IManager.Type">
            <summary>
            Gets the type of the manager.
            </summary>
        </member>
        <member name="T:Miyagi.Common.INamable">
            <summary>
            Interface for namable objects.
            </summary>
        </member>
        <member name="P:Miyagi.Common.INamable.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="T:Miyagi.Common.IXmlWritable">
            <summary>
            Indicates that a type can be converted to an XElement.
            </summary>
        </member>
        <member name="M:Miyagi.Common.IXmlWritable.ToXElement">
            <summary>
            Converts the type to a XElement.
            </summary>
            <returns>A <see cref="T:System.Xml.Linq.XElement"/> representing the type.</returns>
        </member>
        <member name="T:Miyagi.Common.Keyboard">
            <summary>
            Keyboard wrapper.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Keyboard.GetString(Miyagi.Common.Events.KeyEvent)">
            <summary>
            Gets a string representation of a KeyEvent.
            </summary>
            <param name="evt">The KeyEvent.</param>
            <returns>A string representation of a KeyEvent.</returns>
        </member>
        <member name="M:Miyagi.Common.Keyboard.ScanCodeToConsoleKey(System.Int32,System.Boolean)">
            <summary>
            Converts a scancode to a ConsoleKey enum.
            </summary>
            <param name="scanCode">An <see cref="T:System.Int32"/> representing the scancode.</param>
            <param name="numpad">Indicates whether the scancode represents a numpad key.</param>
            <returns>A ConsoleKey representing the scancode.</returns>
        </member>
        <member name="P:Miyagi.Common.Keyboard.AdditionalLayoutsFolder">
            <summary>
            Gets or sets the folder that contains additional keyboard layouts.
            </summary>
        </member>
        <member name="T:Miyagi.Common.Rendering.IViewport">
            <summary>
            Encapsulates a backend viewport.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Rendering.IViewport.UpdateBounds">
            <summary>
            Updates the bounds of the viewport.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.IViewport.Bounds">
            <summary>
            Gets the bounds of the viewport.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.IViewport.Native">
            <summary>
            Gets the backend viewport.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.IViewport.Offset">
            <summary>
            Gets the offset of the viewport.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.IViewport.Size">
            <summary>
            Gets the size of the viewport.
            </summary>
        </member>
        <member name="T:Miyagi.Common.Resources.GpuProgram">
            <summary>
            Defines a program which runs on the Gpu.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Resources.GpuProgram.Create(Miyagi.Common.MiyagiSystem,System.String,System.String,System.String,Miyagi.Common.GpuProgramType,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Create a GpuProgram.
            </summary>
            <param name="system">The MiyagiSystem.</param>
            <param name="name">The name of the GpuProgam.</param>
            <param name="language">The shader language of GpuProgram.</param>
            <param name="sourceFile">The path to the source file.</param>
            <param name="type">The type of the GpuProgram.</param>
            <param name="parameters">The parameters of the GpuProgram.</param>
            <returns>The newly created GpuProgram.</returns>
        </member>
        <member name="M:Miyagi.Common.Resources.GpuProgram.CreateDeepCopy">
            <summary>
            Creates a deep copy of the GpuProgram.
            </summary>
            <returns>A deep copy of the GpuProgram.</returns>
        </member>
        <member name="P:Miyagi.Common.Resources.GpuProgram.AdditonalTextures">
            <summary>
            Gets the additonal textures for multi-texture shaders.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Resources.GpuProgram.Language">
            <summary>
            Gets the language.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Resources.GpuProgram.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Resources.GpuProgram.NamedConstants">
            <summary>
            Gets the named constant dictionary.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Resources.GpuProgram.Parameters">
            <summary>
            Gets the parameter dictionary.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Resources.GpuProgram.SourceFile">
            <summary>
            Gets the path to the source file.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Resources.GpuProgram.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="T:Miyagi.Common.Serialization.SerializationData">
            <summary>
            A dictionary a serializable data.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Serialization.SerializationData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.Common.Serialization.SerializationData"/> class.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Serialization.SerializationData.Add(System.String,System.Object)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="obj">The obj.</param>
        </member>
        <member name="M:Miyagi.Common.Serialization.SerializationData.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:Miyagi.Common.Serialization.SerializationData.HasData">
            <summary>
            Gets a value indicating whether this instance has data.
            </summary>
            <value><c>true</c> if this instance has data; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Miyagi.Common.Serialization.SerializationData.Item(System.String)">
            <summary>
            Gets the <see cref="T:System.Object"/> with the specified key.
            </summary>
        </member>
        <member name="T:Miyagi.Internals.Resources.Gfx.DialogBoxSkin">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Miyagi.Internals.Resources.Gfx.DialogBoxSkin.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Miyagi.Internals.Resources.Gfx.DialogBoxSkin.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Miyagi.Internals.Resources.Gfx.DialogBoxSkin.UV_Button">
            <summary>
              Looks up a localized string similar to 0.75,0,0.125,0.25.
            </summary>
        </member>
        <member name="P:Miyagi.Internals.Resources.Gfx.DialogBoxSkin.UV_Button_MouseDown">
            <summary>
              Looks up a localized string similar to 0.5,0,0.125,0.25.
            </summary>
        </member>
        <member name="P:Miyagi.Internals.Resources.Gfx.DialogBoxSkin.UV_Button_MouseEnter">
            <summary>
              Looks up a localized string similar to 0.625,0,0.125,0.25.
            </summary>
        </member>
        <member name="P:Miyagi.Internals.Resources.Gfx.DialogBoxSkin.UV_Panel">
            <summary>
              Looks up a localized string similar to 0,0,0.5,1.
            </summary>
        </member>
        <member name="T:Miyagi.Internals.ThirdParty.FastSmartWeakEvent`1">
            <summary>
            A class for managing a weak event.
            </summary>
            <typeparam name="T">The delegate type.</typeparam>
        </member>
        <member name="T:Miyagi.Internals.ThirdParty.ZipStorer">
            <summary>
            Unique class for compression/decompression file. Represents a Zip file.
            </summary>
        </member>
        <member name="F:Miyagi.Internals.ThirdParty.ZipStorer.EncodeUtf8">
            <summary><c>true</c> if UTF8 encoding for filename and comments, false if default (CP 437)</summary>
        </member>
        <member name="M:Miyagi.Internals.ThirdParty.ZipStorer.Create(System.String,System.String)">
            <summary>
            Method to create a new storage file
            </summary>
            <param name="filename">Full path of Zip file to create</param>
            <param name="comment">General comment for Zip file</param>
            <returns>A valid ZipStorer object</returns>
        </member>
        <member name="M:Miyagi.Internals.ThirdParty.ZipStorer.Open(System.String,System.IO.FileAccess)">
            <summary>
            Method to open an existing storage file
            </summary>
            <param name="filename">Full path of Zip file to open</param>
            <param name="access">File access mode as used in FileStream constructor</param>
            <returns>A valid ZipStorer object</returns>
        </member>
        <member name="M:Miyagi.Internals.ThirdParty.ZipStorer.Open(System.IO.Stream,System.IO.FileAccess)">
            <summary>
            Method to open an existing storage from stream
            </summary>
            <param name="stream">Already opened stream with zip contents</param>
            <param name="access">File access mode for stream operations</param>
            <returns>A valid ZipStorer object</returns>
        </member>
        <member name="M:Miyagi.Internals.ThirdParty.ZipStorer.RemoveEntries(Miyagi.Internals.ThirdParty.ZipStorer@,System.Collections.Generic.List{Miyagi.Internals.ThirdParty.ZipStorer.ZipFileEntry})">
            <summary>
            Removes one of many files in storage. It creates a new Zip file.
            </summary>
            <param name="zip">Reference to the current Zip object</param>
            <param name="zfes">List of Entries to remove from storage</param>
            <returns><c>true</c> if success, false if not</returns>
            <remarks>This method only works for storage of type FileStream</remarks>
        </member>
        <member name="M:Miyagi.Internals.ThirdParty.ZipStorer.AddFile(Miyagi.Internals.ThirdParty.ZipStorer.Compression,System.String,System.String,System.String)">
            <summary>
            Add full contents of a file into the Zip storage
            </summary>
            <param name="method">Compression method</param>
            <param name="pathname">Full path of file to add to Zip storage</param>
            <param name="filenameInZip">Filename and path as desired in Zip directory</param>
            <param name="comment">Comment for stored file</param>
        </member>
        <member name="M:Miyagi.Internals.ThirdParty.ZipStorer.AddStream(Miyagi.Internals.ThirdParty.ZipStorer.Compression,System.String,System.IO.Stream,System.DateTime,System.String)">
            <summary>
            Add full contents of a stream into the Zip storage
            </summary>
            <param name="method">Compression method</param>
            <param name="filenameInZip">Filename and path as desired in Zip directory</param>
            <param name="source">Stream object containing the data to store in Zip</param>
            <param name="modTime">Modification time of the data to store</param>
            <param name="comment">Comment for stored file</param>
        </member>
        <member name="M:Miyagi.Internals.ThirdParty.ZipStorer.Close">
            <summary>
            Updates central directory (if pertinent) and close the Zip storage
            </summary>
            <remarks>This is a required step, unless automatic dispose is used</remarks>
        </member>
        <member name="M:Miyagi.Internals.ThirdParty.ZipStorer.Dispose">
            <summary>
            Closes the Zip file stream
            </summary>
        </member>
        <member name="M:Miyagi.Internals.ThirdParty.ZipStorer.ExtractFile(Miyagi.Internals.ThirdParty.ZipStorer.ZipFileEntry,System.String)">
            <summary>
            Copy the contents of a stored file into a physical file
            </summary>
            <param name="zfe">Entry information of file to extract</param>
            <param name="filename">Name of file to store uncompressed data</param>
            <returns><c>true</c> if success, false if not.</returns>
            <remarks>Unique compression methods are Store and Deflate</remarks>
        </member>
        <member name="M:Miyagi.Internals.ThirdParty.ZipStorer.ExtractFile(Miyagi.Internals.ThirdParty.ZipStorer.ZipFileEntry,System.IO.Stream)">
            <summary>
            Copy the contents of a stored file into an opened stream
            </summary>
            <param name="zfe">Entry information of file to extract</param>
            <param name="stream">Stream to store the uncompressed data</param>
            <returns><c>true</c> if success, false if not.</returns>
            <remarks>Unique compression methods are Store and Deflate</remarks>
        </member>
        <member name="M:Miyagi.Internals.ThirdParty.ZipStorer.ReadCentralDir">
            <summary>
            Read all the file records in the central directory
            </summary>
            <returns>List of all entries in directory</returns>
        </member>
        <member name="T:Miyagi.Internals.ThirdParty.ZipStorer.Compression">
            <summary>
            Compression method enumeration
            </summary>
        </member>
        <member name="F:Miyagi.Internals.ThirdParty.ZipStorer.Compression.Store">
            <summary>Uncompressed storage</summary>
        </member>
        <member name="F:Miyagi.Internals.ThirdParty.ZipStorer.Compression.Deflate">
            <summary>Deflate compression method</summary>
        </member>
        <member name="T:Miyagi.Internals.ThirdParty.ZipStorer.ZipFileEntry">
            <summary>
            Represents an entry in Zip file directory
            </summary>
        </member>
        <member name="F:Miyagi.Internals.ThirdParty.ZipStorer.ZipFileEntry.Comment">
            <summary>User comment for file</summary>
        </member>
        <member name="F:Miyagi.Internals.ThirdParty.ZipStorer.ZipFileEntry.CompressedSize">
            <summary>Compressed file size</summary>
        </member>
        <member name="F:Miyagi.Internals.ThirdParty.ZipStorer.ZipFileEntry.Crc32">
            <summary>32-bit checksum of entire file</summary>
        </member>
        <member name="F:Miyagi.Internals.ThirdParty.ZipStorer.ZipFileEntry.EncodeUTF8">
            <summary><c>true</c> if UTF8 encoding for filename and comments, false if default (CP 437)</summary>
        </member>
        <member name="F:Miyagi.Internals.ThirdParty.ZipStorer.ZipFileEntry.FilenameInZip">
            <summary>Full path and filename as stored in Zip</summary>
        </member>
        <member name="F:Miyagi.Internals.ThirdParty.ZipStorer.ZipFileEntry.FileOffset">
            <summary>Offset of file inside Zip storage</summary>
        </member>
        <member name="F:Miyagi.Internals.ThirdParty.ZipStorer.ZipFileEntry.FileSize">
            <summary>Original file size</summary>
        </member>
        <member name="F:Miyagi.Internals.ThirdParty.ZipStorer.ZipFileEntry.HeaderOffset">
            <summary>Offset of header information inside Zip storage</summary>
        </member>
        <member name="F:Miyagi.Internals.ThirdParty.ZipStorer.ZipFileEntry.HeaderSize">
            <summary>Size of header information</summary>
        </member>
        <member name="F:Miyagi.Internals.ThirdParty.ZipStorer.ZipFileEntry.Method">
            <summary>Compression method</summary>
        </member>
        <member name="F:Miyagi.Internals.ThirdParty.ZipStorer.ZipFileEntry.ModifyTime">
            <summary>Last modification time of file</summary>
        </member>
        <member name="M:Miyagi.Internals.ThirdParty.ZipStorer.ZipFileEntry.ToString">
            <summary>Overriden method</summary>
            <returns>Filename in Zip</returns>
        </member>
        <member name="T:Miyagi.Common.Scripting.CodeProviderScriptingPlugin">
            <summary>
            An abstract base class for ScriptingPlugins which are based on a CodeDomProvider.
            </summary>
        </member>
        <member name="T:Miyagi.Common.Scripting.ScriptingPlugin">
            <summary>
            The base class for scripting plugins.
            </summary>
        </member>
        <member name="T:Miyagi.Common.Plugins.Plugin">
            <summary>
            The abstract base class for plugins.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Plugins.Plugin.#ctor(Miyagi.Common.MiyagiSystem)">
            <summary>
            Initializes a new instance of the Plugin class.
            </summary>
            <param name="system">The MiyagiSystem.</param>
        </member>
        <member name="M:Miyagi.Common.Plugins.Plugin.NotifyLoaded(System.Object[])">
            <summary>
            Is called when the plugin is loaded.
            </summary>
            <param name="args">Optional array of load arguments.</param>
        </member>
        <member name="M:Miyagi.Common.Plugins.Plugin.NotifyUnloaded">
            <summary>
            Is called when the plugin is unloaded.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Plugins.Plugin.Name">
            <summary>
            Gets the name of the plugin.
            </summary>
            <value>A string representing the name.</value>
        </member>
        <member name="P:Miyagi.Common.Plugins.Plugin.MiyagiSystem">
            <summary>
            Gets the MiyagiSystem.
            </summary>
            <value>The MiyagiSystem.</value>
        </member>
        <member name="M:Miyagi.Common.Scripting.ScriptingPlugin.#ctor(Miyagi.Common.MiyagiSystem)">
            <summary>
            Initializes a new instance of the ScriptingPlugin class.
            </summary>
            <param name="system">The MiyagiSystem.</param>
        </member>
        <member name="M:Miyagi.Common.Scripting.ScriptingPlugin.NotifyLoaded(System.Object[])">
            <summary>
            Is called when the plugin is loaded.
            </summary>
            <param name="args">Optional array of load arguments.</param>
        </member>
        <member name="M:Miyagi.Common.Scripting.ScriptingPlugin.NotifyUnloaded">
            <summary>
            Is called when the plugin is unloaded.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Scripting.ScriptingPlugin.BindEvents(Miyagi.Common.Scripting.ScriptingScheme)">
            <summary>
            Binds the events.
            </summary>
            <param name="scheme">The ScriptingScheme.</param>
        </member>
        <member name="P:Miyagi.Common.Scripting.ScriptingPlugin.Language">
            <summary>
            Gets the name of the scripting language.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Scripting.CodeProviderScriptingPlugin.#ctor(Miyagi.Common.MiyagiSystem)">
            <summary>
            Initializes a new instance of the CodeProviderScriptingPlugin class.
            </summary>
            <param name="system">The MiyagiSystem.</param>
        </member>
        <member name="M:Miyagi.Common.Scripting.CodeProviderScriptingPlugin.NotifyUnloaded">
            <summary>
            Is called when the plugin is unloaded.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Scripting.CodeProviderScriptingPlugin.BindEvents(Miyagi.Common.Scripting.ScriptingScheme)">
            <summary>
            Binds the events.
            </summary>
            <param name="scheme">The ScriptingScheme.</param>
        </member>
        <member name="M:Miyagi.Common.Scripting.CodeProviderScriptingPlugin.CreateAssembly(Miyagi.Common.Scripting.ScriptingScheme)">
            <summary>
            Creates an assembly.
            </summary>
            <param name="scheme">The ScriptingScheme.</param>
            <returns>The newly created assembly.</returns>
        </member>
        <member name="M:Miyagi.Common.Scripting.CodeProviderScriptingPlugin.CreateAssembly(Miyagi.Common.Scripting.ScriptingScheme,System.CodeDom.Compiler.CodeDomProvider,System.CodeDom.Compiler.CompilerParameters)">
            <summary>
            Creates an assembly.
            </summary>
            <param name="scheme">The ScriptingScheme.</param>
            <param name="provider">The CodeDomProvider.</param>
            <param name="cp">The CompilerParameters.</param>
            <returns>The newly created assembly.</returns>
        </member>
        <member name="P:Miyagi.Common.Scripting.CodeProviderScriptingPlugin.Assemblies">
            <summary>
            Gets a Dictionary of created assemblies.
            </summary>
        </member>
        <member name="T:Miyagi.Common.Rendering.Backend">
            <summary>
            The base class for rendering back-ends.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Rendering.Backend.#ctor(Miyagi.Common.MiyagiSystem)">
            <summary>
            Initializes a new instance of the Backend class.
            </summary>
            <param name="system">The MiyagiSystem.</param>
        </member>
        <member name="M:Miyagi.Common.Rendering.Backend.NormalizeFilePath(System.String)">
            <summary>
            Normalizes the file path.
            </summary>
            <param name="file">The file that should be normalized.</param>
            <returns>The normalizerd file path.</returns>
        </member>
        <member name="M:Miyagi.Common.Rendering.Backend.CreateGpuProgram(Miyagi.Common.Resources.GpuProgram)">
            <summary>
            Creates a GPU program.
            </summary>
            <param name="gpuProg">The GpuProgram.</param>
        </member>
        <member name="M:Miyagi.Common.Rendering.Backend.CreateRenderTexture(System.String,Miyagi.Common.Data.Size,Miyagi.Common.Data.Colour,System.Object)">
            <summary>
            Creates a render texture.
            </summary>
            <param name="name">The name of the render texture.</param>
            <param name="size">The size of the render texture.</param>
            <param name="backgroundColour">The background colour of the render texture.</param>
            <param name="camera">The backend camera.</param>
        </member>
        <member name="M:Miyagi.Common.Rendering.Backend.CreateTexture(System.String,Miyagi.Common.Data.Size)">
            <summary>
            Creates a texture.
            </summary>
            <param name="name">The name of the texture.</param>
            <param name="size">The size of the texture.</param>
        </member>
        <member name="M:Miyagi.Common.Rendering.Backend.GetTextureAlpha(System.Int64,Miyagi.Common.Data.Point)">
            <summary>
            Gets the alpha value of the specified texture at the specified point.
            </summary>
            <param name="handle">The handle.</param>
            <param name="p">The point.</param>
            <returns>The alpha value</returns>
        </member>
        <member name="M:Miyagi.Common.Rendering.Backend.GetTextureSize(System.String)">
            <summary>
            Gets the size of a texture.
            </summary>
            <param name="name">The name of the texture.</param>
            <returns>A Size representing the size of a texture.</returns>
        </member>
        <member name="M:Miyagi.Common.Rendering.Backend.GetTextureSize(System.Int64)">
            <summary>
            Gets the size of a texture.
            </summary>
            <param name="handle">The handle of the texture.</param>
            <returns>A Size representing the size of a texture.</returns>
        </member>
        <member name="M:Miyagi.Common.Rendering.Backend.LoadTexture(System.String)">
            <summary>
            Loads the texture.
            </summary>
            <param name="name">The name of the texture.</param>
            <returns>An <see cref="T:System.Int32"/> representing the handle of the texture.</returns>
        </member>
        <member name="M:Miyagi.Common.Rendering.Backend.MessagePump">
            <summary>
            Updates the current window.
            </summary>
            <returns><c>true</c> if the window is open; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Miyagi.Common.Rendering.Backend.RemoveTexture(System.String)">
            <summary>
            Removes a texture.
            </summary>
            <param name="name">The name of the texture.</param>
        </member>
        <member name="M:Miyagi.Common.Rendering.Backend.SetContext(System.Object)">
            <summary>
            Sets the context.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:Miyagi.Common.Rendering.Backend.TextureExists(System.String)">
            <summary>
            Gets whether a texture exists.
            </summary>
            <param name="name">The name of the texture.</param>
            <returns><c>true</c> if the texture exists; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Miyagi.Common.Rendering.Backend.WriteToTexture(System.Byte[],System.String)">
            <summary>
            Converts a byte array to a texture.
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="textureName">The name of the texture.</param>
        </member>
        <member name="P:Miyagi.Common.Rendering.Backend.RenderManager">
            <summary>
            Gets the render manager of the back-end.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.Backend.ResourceGroupName">
            <summary>
            Gets or sets the name of the resource group.
            </summary>
            <value>The name of the resource group.</value>
        </member>
        <member name="P:Miyagi.Common.Rendering.Backend.DoNormalizeFilePath">
            <summary>
            Gets or sets method used to normalize file path.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.Backend.MiyagiSystem">
            <summary>
            Gets the MiyagiSystem.
            </summary>
        </member>
        <member name="T:Miyagi.Common.Data.ColourDefinition">
            <summary>
            Maps <see cref="T:Miyagi.Common.Data.Colour"/> structs to verticies.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Data.ColourDefinition.#ctor(Miyagi.Common.Data.Colour[])">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.Common.Data.ColourDefinition"/> struct.
            </summary>
            <param name="colours">The colours.</param>
        </member>
        <member name="M:Miyagi.Common.Data.ColourDefinition.#ctor(Miyagi.Common.Data.Colour,Miyagi.Common.Data.Colour)">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.Common.Data.ColourDefinition"/> struct for <see cref="T:Miyagi.Common.Rendering.Quad"/> primitives.
            </summary>
            <param name="topColour">The top colour.</param>
            <param name="bottomColour">The bottom colour.</param>
        </member>
        <member name="M:Miyagi.Common.Data.ColourDefinition.op_Implicit(Miyagi.Common.Data.Colour)~Miyagi.Common.Data.ColourDefinition">
            <summary>
            Performs an implicit conversion from <see cref="T:Miyagi.Common.Data.Colour"/> to <see cref="T:Miyagi.Common.Data.ColourDefinition"/>.
            </summary>
            <param name="colour">The colour.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.ColourDefinition.op_Inequality(Miyagi.Common.Data.ColourDefinition,Miyagi.Common.Data.ColourDefinition)">
            <summary>
            Returns a value indicating whether two ColourDefinition instances are not equal.
            </summary>
            <param name="left">A ColourDefinition instance.</param>
            <param name="right">Another ColourDefinition instance.</param>
            <returns><c>true</c> if both are unequal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.ColourDefinition.op_Equality(Miyagi.Common.Data.ColourDefinition,Miyagi.Common.Data.ColourDefinition)">
            <summary>
            Returns a value indicating whether two ColourDefinition instances are equal.
            </summary>
            <param name="left">A ColourDefinition instance.</param>
            <param name="right">Another ColourDefinition instance.</param>
            <returns><c>true</c> if both are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.ColourDefinition.Parse(System.String)">
            <summary>
            Converts a string representation to a ColourDefinition instance.
            </summary>
            <param name="s">A string representation of a ColourDefinition instance.</param>
            <returns>The ColourDefinition instance.</returns>
            <exception cref="T:System.FormatException"><c>FormatException</c>.</exception>
        </member>
        <member name="M:Miyagi.Common.Data.ColourDefinition.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified Object.
            </summary>
            <param name="obj">The other Object.</param>
            <returns><c>true</c> if both are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.ColourDefinition.Equals(Miyagi.Common.Data.ColourDefinition)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified ColourDefinition.
            </summary>
            <param name="other">The other ColourDefinition.</param>
            <returns><c>true</c> if both are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.ColourDefinition.GetHashCode">
            <summary>
            Returns the HashCode of the current instance.
            </summary>
            <returns>The HashCode of the Thickness.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.ColourDefinition.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Miyagi.Common.Data.ColourDefinition.Colours">
            <summary>
            Gets the bottom colour.
            </summary>
            <value>The colour of the bottom of the text.</value>
        </member>
        <member name="T:Miyagi.Common.Resources.ImageFont">
            <summary>
            A font based on an image file.
            </summary>
        </member>
        <member name="T:Miyagi.Common.Resources.Font">
            <summary>
            A Font represents a font.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Resources.Font.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Font class.
            </summary>
            <param name="name">The name of the Font.</param>
        </member>
        <member name="M:Miyagi.Common.Resources.Font.MeasureString(System.String)">
            <summary>
            Gets the size required to fit the given text, including line breaks.
            </summary>
            <param name="text">The text to measure.</param>
            <returns>A size where the text can fit.</returns>
        </member>
        <member name="M:Miyagi.Common.Resources.Font.MeasureString(System.String,Miyagi.Common.Data.Size)">
            <summary>
            Gets the size required to fit the given text, including line breaks.
            </summary>
            <param name="text">The text.</param>
            <param name="maxSize">The maximum size.</param>
            <returns>A size where the text can fit.</returns>
        </member>
        <member name="M:Miyagi.Common.Resources.Font.ToXElement">
            <summary>
            Converts the font to an XElement.
            </summary>
            <returns>An <see cref="T:System.Xml.Linq.XElement"/> representing the font.</returns>
        </member>
        <member name="M:Miyagi.Common.Resources.Font.CreateFont(Miyagi.Common.MiyagiSystem)">
            <summary>
            Creates the font.
            </summary>
            <param name="system">The MiyagiSystem.</param>
        </member>
        <member name="M:Miyagi.Common.Resources.Font.OnPropertyChanged(System.String)">
            <summary>
            Handles property changes.
            </summary>
            <param name="propertyName">The name of the property.</param>
        </member>
        <member name="P:Miyagi.Common.Resources.Font.Default">
            <summary>
            Gets or sets the default font.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Resources.Font.FileName">
            <summary>
            Gets or sets the filename of the font.
            </summary>
            <value>The filename of the font.</value>
        </member>
        <member name="P:Miyagi.Common.Resources.Font.Leading">
            <summary>
            Gets or sets the vertical spacing.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Resources.Font.Name">
            <summary>
            Gets or sets the name of the Font.
            </summary>
            <value>The name of the Font.</value>
        </member>
        <member name="P:Miyagi.Common.Resources.Font.SpaceWidth">
            <summary>
            Gets or sets the width of the space character.
            </summary>
            <value>The width of the space character.</value>
        </member>
        <member name="P:Miyagi.Common.Resources.Font.TabSize">
            <summary>
            Gets or sets the number of spaces that a tab represents.
            </summary>
            <value>An <see cref="T:System.Int32"/> representing the number of spaces that a tab represents.</value>
        </member>
        <member name="P:Miyagi.Common.Resources.Font.TextureName">
            <summary>
            Gets the name of the texture of the font.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Resources.Font.Tracking">
            <summary>
            Gets or sets the horizontal spacing.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Resources.Font.TextureSize">
            <summary>
            Gets or sets the size of the font texture.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Resources.Font.GlyphCoordinates">
            <summary>
            Gets or sets the glyph coordinates.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Resources.ImageFont.Create(Miyagi.Common.MiyagiSystem,System.String,System.String,System.Collections.Generic.IDictionary{System.Char,Miyagi.Common.Data.RectangleF})">
            <summary>
            Creates a new Font for an image font.
            </summary>
            <param name="system">The MiyagiSystem.</param>
            <param name="name">The name of the ImageFont.</param>
            <param name="fontFileName">The filename of the ImageFont.</param>
            <param name="glyphCoordinates">The glyph coordinates of the ImageFont.</param>
            <returns>The newly created ImageFont.</returns>
        </member>
        <member name="M:Miyagi.Common.Resources.ImageFont.CreateFromXml(System.String,Miyagi.Common.MiyagiSystem)">
            <summary>
            Creates ImageFonts from XML.
            </summary>
            <param name="fileName">The location of the XML file.</param>
            <param name="system">The system.</param>
            <returns>The newly created ImageFonts.</returns>
        </member>
        <member name="M:Miyagi.Common.Resources.ImageFont.CreateFromXml(System.Xml.Linq.XElement,Miyagi.Common.MiyagiSystem)">
            <summary>
            Creates a ImageFont from XML.
            </summary>
            <param name="xElement">An XElement that contains the XML representation of the ImageFont.</param>
            <param name="system">The MiyagiSystem.</param>
            <returns>The newly created ImageFont or null if the XML file is invalid.</returns>
        </member>
        <member name="M:Miyagi.Common.Resources.ImageFont.ToString">
            <summary>
            Returns a string representing the ImageFont.
            </summary>
            <returns>A string representing the ImageFont.</returns>
        </member>
        <member name="M:Miyagi.Common.Resources.ImageFont.ToXElement">
            <summary>
            Converts the font to an XElement.
            </summary>
            <returns>An <see cref="T:System.Xml.Linq.XElement"/> representing the font.</returns>
        </member>
        <member name="M:Miyagi.Common.Resources.ImageFont.CreateFont(Miyagi.Common.MiyagiSystem)">
            <summary>
            Creates the font.
            </summary>
            <param name="system">The MiyagiSystem.</param>
        </member>
        <member name="P:Miyagi.Common.Resources.ImageFont.TextureName">
            <summary>
            Gets the name of the texture of the font.
            </summary>
        </member>
        <member name="T:Miyagi.Common.Resources.Texture">
            <summary>
            A Texture represents different TextureFrames.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Resources.Texture.#ctor">
            <summary>
            Initializes a new instance of the Texture class.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Resources.Texture.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Texture class.
            </summary>
            <param name="fileName">The filename of the texture.</param>
        </member>
        <member name="M:Miyagi.Common.Resources.Texture.#ctor(System.String,Miyagi.Common.Data.RectangleF)">
            <summary>
            Initializes a new instance of the Texture class.
            </summary>
            <param name="fileName">The filename of the texture.</param>
            <param name="uvCoordinates">A <see cref="T:Miyagi.Common.Data.RectangleF"/> representing the uv coordinates.</param>
        </member>
        <member name="M:Miyagi.Common.Resources.Texture.#ctor(Miyagi.Common.Resources.TextureFrame[])">
            <summary>
            Initializes a new instance of the Texture class.
            </summary>
            <param name="frames">The frames of the texture.</param>
        </member>
        <member name="M:Miyagi.Common.Resources.Texture.#ctor(Miyagi.Common.FrameAnimationMode,Miyagi.Common.Resources.TextureFrame[])">
            <summary>
            Initializes a new instance of the Texture class.
            </summary>
            <param name="animationMode">A <see cref="P:Miyagi.Common.Resources.Texture.FrameAnimationMode"/> representing the way the frames should be animated.</param>
            <param name="frames">The frames of the texture.</param>
        </member>
        <member name="M:Miyagi.Common.Resources.Texture.#ctor(Miyagi.Common.FrameAnimationMode,System.Collections.Generic.IEnumerable{Miyagi.Common.Resources.TextureFrame})">
            <summary>
            Initializes a new instance of the Texture class.
            </summary>
            <param name="animationMode">A <see cref="P:Miyagi.Common.Resources.Texture.FrameAnimationMode"/> representing the way the frames should be animated.</param>
            <param name="frames">The frames of the texture.</param>
        </member>
        <member name="M:Miyagi.Common.Resources.Texture.#ctor(Miyagi.Common.FrameAnimationMode,System.Collections.Generic.IEnumerable{Miyagi.Common.Resources.TextureFrame},Miyagi.Common.Data.PointF)">
            <summary>
            Initializes a new instance of the Texture class.
            </summary>
            <param name="animationMode">A <see cref="P:Miyagi.Common.Resources.Texture.FrameAnimationMode"/> representing the way the frames should be animated.</param>
            <param name="frames">The frames of the texture.</param>
            <param name="scrollVector">A <see cref="T:Miyagi.Common.Data.PointF"/> representing the scroll vector.</param>
        </member>
        <member name="M:Miyagi.Common.Resources.Texture.#ctor(Miyagi.Common.FrameAnimationMode,System.Collections.Generic.IEnumerable{Miyagi.Common.Resources.TextureFrame},Miyagi.Common.Data.PointF,System.Collections.Generic.IEnumerable{Miyagi.Common.Resources.GpuProgram})">
            <summary>
            Initializes a new instance of the Texture class.
            </summary>
            <param name="animationMode">A <see cref="P:Miyagi.Common.Resources.Texture.FrameAnimationMode"/> representing the way the frames should be animated.</param>
            <param name="frames">The frames of the texture.</param>
            <param name="scrollVector">A <see cref="T:Miyagi.Common.Data.PointF"/> representing the scroll vector.</param>
            <param name="gpuPrograms">A collection of GPU programs.</param>
        </member>
        <member name="M:Miyagi.Common.Resources.Texture.CreateFromXml(System.Xml.Linq.XElement,Miyagi.Common.MiyagiSystem)">
            <summary>
            Creates a texture from Xml.
            </summary>
            <param name="xElement">An XElement that contains the XML representation of the Texture.</param>
            <param name="system">The MiyagiSystem.</param>
            <returns>The newly created Texture.</returns>
        </member>
        <member name="M:Miyagi.Common.Resources.Texture.CreateDeepCopy">
            <summary>
            Creates a deep copy of the texture.
            </summary>
            <returns>A deep copy of the texture.</returns>
        </member>
        <member name="M:Miyagi.Common.Resources.Texture.GetFrameFromTime(System.TimeSpan)">
            <summary>
            Gets a frame according to the specified animation time.
            </summary>
            <param name="time">The animation time.</param>
            <returns>The frame that corresponds to the specified animation time.</returns>
        </member>
        <member name="M:Miyagi.Common.Resources.Texture.GetScrollVectorOffset(Miyagi.Common.Data.RectangleF,System.Double)">
            <summary>
            Gets the scroll vector offset.
            </summary>
            <param name="currentUV">The current UV.</param>
            <param name="timeSinceLastUpdateMs">The time since last update in ms.</param>
            <returns>The scroll vector offset.</returns>
        </member>
        <member name="M:Miyagi.Common.Resources.Texture.ToXElement">
            <summary>
            Converts the texture to an XElement.
            </summary>
            <returns>An <see cref="T:System.Xml.Linq.XElement"/> representing the texture.</returns>
        </member>
        <member name="M:Miyagi.Common.Resources.Texture.ToXElement(System.String)">
            <summary>
            Converts the texture to an XElement.
            </summary>
            <param name="elementName">The name of the root element.</param>
            <returns>An <see cref="T:System.Xml.Linq.XElement"/> representing the texture.</returns>
        </member>
        <member name="P:Miyagi.Common.Resources.Texture.FrameAnimationMode">
            <summary>
            Gets or sets the FrameAnimationMode.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Resources.Texture.Frames">
            <summary>
            Gets the frames.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Resources.Texture.GpuPrograms">
            <summary>
            Gets the list of GPU programs.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Resources.Texture.ScrollVector">
            <summary>
            Gets or sets the scroll vector.
            </summary>
        </member>
        <member name="T:Miyagi.Common.Resources.TextureCollection">
            <summary>
            A keyed collection of textures.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Resources.TextureCollection.#ctor">
            <summary>
            Initializes a new instance of the TextureCollection class.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Resources.TextureCollection.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Miyagi.Common.Resources.Texture}})">
            <summary>
            Initializes a new instance of the TextureCollection class.
            </summary>
            <param name="textures">The textures.</param>
        </member>
        <member name="M:Miyagi.Common.Resources.TextureCollection.ContainsKey(System.String)">
            <summary>
            Determinates whether the TextureCollection contains a texture of the specified key.
            </summary>
            <param name="key">The key of the texture.</param>
            <returns><c>true</c> if the TextureCollection contains a texture of the specified key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Miyagi.Common.Resources.TextureCollection.GetEnumerator">
            <summary>
            Returns the enumerator of the collection.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Miyagi.Common.Resources.TextureCollection.RemoveTexture(System.String)">
            <summary>
            Removes the texture.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="E:Miyagi.Common.Resources.TextureCollection.TextureChanged">
            <summary>
            Occurs when a texture has been changed.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Resources.TextureCollection.Item(System.String)">
            <summary>
            Gets or sets a texture by skin name.
            </summary>
            <param name="key">The key of the texture.</param>
        </member>
        <member name="T:Miyagi.Common.Resources.TextureFrame">
            <summary>
            A frame of a texture.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Resources.TextureFrame.#ctor(System.String,Miyagi.Common.Data.RectangleF,System.TimeSpan)">
            <summary>
            Initializes a new instance of the TextureFrame class.
            </summary>
            <param name="fileName">The filename of the source of frame.</param>
            <param name="uvCoordinates">A RectangleF representing the uv coordinates.</param>
            <param name="duration">A TimeSpan representing the duration the frame will be displayed.</param>
        </member>
        <member name="M:Miyagi.Common.Resources.TextureFrame.#ctor(System.String,Miyagi.Common.Data.RectangleF,System.Int32)">
            <summary>
            Initializes a new instance of the TextureFrame class.
            </summary>
            <param name="fileName">The filename of the source of frame.</param>
            <param name="uvCoordinates">A RectangleF representing the uv coordinates.</param>
            <param name="duration">The duration the frame will be displayed in milliseconds.</param>
        </member>
        <member name="M:Miyagi.Common.Resources.TextureFrame.CreateDeepCopy">
            <summary>
            Creates a deep copy of the TextureFrame.
            </summary>
            <returns>A deep copy of the TextureFrame.</returns>
        </member>
        <member name="P:Miyagi.Common.Resources.TextureFrame.Duration">
            <summary>
            Gets the time the frame will be displayed
            </summary>
        </member>
        <member name="P:Miyagi.Common.Resources.TextureFrame.FileName">
            <summary>
            Gets the filename of the source of the frame.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Resources.TextureFrame.UV">
            <summary>
            Gets the uv coordinates of the frame.
            </summary>
        </member>
        <member name="T:Miyagi.Common.Resources.Skin">
            <summary>
            A Skin represents different sub skins and their textures.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Resources.Skin.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Skin class.
            </summary>
            <param name="name">The name of the Skin.</param>
        </member>
        <member name="M:Miyagi.Common.Resources.Skin.CreateFromXml(System.Xml.Linq.XElement,Miyagi.Common.MiyagiSystem)">
            <summary>
            Creates a Skin from XML.
            </summary>
            <param name="xElement">An XElement that contains the XML representation of the Skin.</param>
            <param name="system">The MiyagiSystem.</param>
            <returns>
            The newly created Skin or null if the XML file is invalid.
            </returns>
        </member>
        <member name="M:Miyagi.Common.Resources.Skin.CreateFromXml(System.String,Miyagi.Common.MiyagiSystem)">
            <summary>
            Creates Skins from XML.
            </summary>
            <param name="fileName">The location of the XML file.</param>
            <param name="system">The system.</param>
            <returns>The newly created Skins.</returns>
        </member>
        <member name="M:Miyagi.Common.Resources.Skin.CreateDeepCopy">
            <summary>
            Creates a deep copy of the skin.
            </summary>
            <returns>A deep copy of the skin.</returns>
        </member>
        <member name="M:Miyagi.Common.Resources.Skin.IsSubSkinDefined(System.String)">
            <summary>
            Gets a value indicating whether a skin is defined.
            </summary>
            <param name="subSkin">The name of the skin.</param>
            <returns><c>true</c> if the skin is defined; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Miyagi.Common.Resources.Skin.ToString">
            <summary>
            Returns the name of the skin.
            </summary>
            <returns>The name of the skin.</returns>
        </member>
        <member name="M:Miyagi.Common.Resources.Skin.ToXElement">
            <summary>
            Converts the skin to an XElement.
            </summary>
            <returns>An <see cref="T:System.Xml.Linq.XElement"/> representing the skin.</returns>
        </member>
        <member name="P:Miyagi.Common.Resources.Skin.Name">
            <summary>
            Gets or sets the name of the Skin.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Resources.Skin.SubSkins">
            <summary>
            Gets the collection of textures.
            </summary>
        </member>
        <member name="T:Miyagi.Common.Resources.TrueTypeFont">
            <summary>
            A font based on a ttf file.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Resources.TrueTypeFont.Create(Miyagi.Common.MiyagiSystem,System.String,System.String,System.Int32,System.Int32,System.Drawing.FontStyle)">
            <summary>
            Creates a new TrueTypeFont.
            </summary>
            <param name="system">The MiyagiSystem.</param>
            <param name="name">The name of the TrueTypeFont.</param>
            <param name="fontFileName">The filename of the font.</param>
            <param name="size">The desired size in points.</param>
            <param name="resolution">The resolution in dpi.</param>
            <param name="fontStyle">The style of the font.</param>
            <returns>The created TrueType font.</returns>
        </member>
        <member name="M:Miyagi.Common.Resources.TrueTypeFont.Create(Miyagi.Common.MiyagiSystem,System.String,System.String,System.Int32,System.Int32,System.Drawing.FontStyle,System.Collections.Generic.IList{Miyagi.Common.Data.Range})">
            <summary>
            Creates a new TrueTypeFont.
            </summary>
            <param name="system">The MiyagiSystem.</param>
            <param name="name">The name of the TrueTypeFont.</param>
            <param name="fontFileName">The filename of the font.</param>
            <param name="size">The desired size in points.</param>
            <param name="resolution">The resolution in dpi.</param>
            <param name="fontStyle">The style of the font.</param>
            <param name="codePoints">A list codepoint ranges.</param>
            <returns>The created TrueType font.</returns>
        </member>
        <member name="M:Miyagi.Common.Resources.TrueTypeFont.CreateFromXml(System.String,Miyagi.Common.MiyagiSystem)">
            <summary>
            Creates TrueTypeFonts from XML.
            </summary>
            <param name="fileName">The location of the XML file.</param>
            <param name="system">The system.</param>
            <returns>The newly created TrueTypeFonts.</returns>
        </member>
        <member name="M:Miyagi.Common.Resources.TrueTypeFont.CreateFromXml(System.Xml.Linq.XElement,Miyagi.Common.MiyagiSystem)">
            <summary>
            Creates a TrueTypeFont from XML.
            </summary>
            <param name="xElement">An XElement that contains the XML representation of the TrueTypeFont.</param>
            <param name="system">The MiyagiSystem.</param>
            <returns>
            The newly created TrueTypeFont or null if the XML file is invalid.
            </returns>
        </member>
        <member name="M:Miyagi.Common.Resources.TrueTypeFont.TrueTypeToImageFont(System.String,System.String,System.Drawing.FontStyle,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.IList{Miyagi.Common.Data.Range})">
            <summary>
            Converts a TrueType to an image font.
            </summary>
            <param name="outputPath">The output path.</param>
            <param name="ttfFileName">The name of the TTF file.</param>
            <param name="fontStyle">The font style.</param>
            <param name="fontSize">Size of the font.</param>
            <param name="fontResolution">The font resolution.</param>
            <param name="leading">The leading.</param>
            <param name="tracking">The tracking.</param>
            <param name="spaceWidth">The width of the space character.</param>
            <param name="codePoints">The code points.</param>
            <remarks></remarks>
        </member>
        <member name="M:Miyagi.Common.Resources.TrueTypeFont.ToString">
            <summary>
            Returns a string representing the TrueTypeFont.
            </summary>
            <returns>A string representing the TrueTypeFont.</returns>
        </member>
        <member name="M:Miyagi.Common.Resources.TrueTypeFont.ToXElement">
            <summary>
            Converts the font to an XElement.
            </summary>
            <returns>An <see cref="T:System.Xml.Linq.XElement"/> representing the font.</returns>
        </member>
        <member name="M:Miyagi.Common.Resources.TrueTypeFont.CreateFont(Miyagi.Common.MiyagiSystem)">
            <summary>
            Creates the font.
            </summary>
            <param name="system">The MiyagiSystem.</param>
        </member>
        <member name="M:Miyagi.Common.Resources.TrueTypeFont.CreateFontBitmap(System.Drawing.FontFamily,System.Drawing.FontStyle,System.Int32,System.Int32,System.Int32@,System.Collections.Generic.IEnumerable{Miyagi.Common.Data.Range},System.Collections.Generic.IDictionary{System.Char,Miyagi.Common.Data.RectangleF})">
            <exception cref="T:System.ArgumentException">Invalid font style</exception>
        </member>
        <member name="P:Miyagi.Common.Resources.TrueTypeFont.FontStyle">
            <summary>
            Gets the FontStyle.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Resources.TrueTypeFont.Resolution">
            <summary>
            Gets the resolution of the font in dpi.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Resources.TrueTypeFont.Size">
            <summary>
            Gets the size of the font in points.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Resources.TrueTypeFont.TextureName">
            <summary>
            Gets the name of the texture of the font.
            </summary>
        </member>
        <member name="T:Miyagi.Common.Serialization.SerializableTypeAttribute">
            <summary>
            Indicates a serializable type.
            </summary>
        </member>
        <member name="T:Miyagi.Common.Serialization.SerializationManager">
            <summary>
            A SerializationManager.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Serialization.SerializationManager.#ctor(Miyagi.Common.MiyagiSystem)">
            <summary>
            Initializes a new instance of the SerializationManager class.
            </summary>
            <param name="system">The MiyagiSystem.</param>
        </member>
        <member name="M:Miyagi.Common.Serialization.SerializationManager.Dispose">
            <summary>
            Disposed the SerializionManager.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Serialization.SerializationManager.ExportToFile(System.String)">
            <summary>
            Exports the MiyagiSystem to file.
            </summary>
            <param name="path">The path of the file.</param>
        </member>
        <member name="M:Miyagi.Common.Serialization.SerializationManager.ExportToStream(System.IO.Stream,System.String)">
            <summary>
            Exports the MiyagiSystem to a stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="extension">The extension.</param>
        </member>
        <member name="M:Miyagi.Common.Serialization.SerializationManager.GetSerializer(System.String)">
            <summary>
            Gets a serializer.
            </summary>
            <param name="fileExtension">The file extension the serializer has to support.</param>
            <returns>A Serializer representing the serializer.</returns>
        </member>
        <member name="M:Miyagi.Common.Serialization.SerializationManager.ImportFromFile(System.String)">
            <summary>
            Imports a MiyagiSystem from file.
            </summary>
            <param name="path">The path of the file.</param>
        </member>
        <member name="M:Miyagi.Common.Serialization.SerializationManager.ImportFromStream(System.IO.Stream,System.String)">
            <summary>
            Imports a MiyagiSystem from a stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="extension">The extension.</param>
        </member>
        <member name="M:Miyagi.Common.Serialization.SerializationManager.Initialize">
            <summary>
            Initializes the manager.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Serialization.SerializationManager.RegisterSerializer(Miyagi.Common.Serialization.Serializer)">
            <summary>
            Registers a serializer.
            </summary>
            <param name="serializer">The new serializer.</param>
        </member>
        <member name="M:Miyagi.Common.Serialization.SerializationManager.UnregisterSerializer(Miyagi.Common.Serialization.Serializer)">
            <summary>
            Unregisters a serializer.
            </summary>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:Miyagi.Common.Serialization.SerializationManager.Update">
            <summary>
            Updates the manager.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Serialization.SerializationManager.Dispose(System.Boolean)">
            <summary>
            Disposes the SerializationManager.
            </summary>
            <param name="disposing">Whether Dispose has been called.</param>
        </member>
        <member name="E:Miyagi.Common.Serialization.SerializationManager.Disposing">
            <summary>
            Occurs when the manager is disposing.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Serialization.SerializationManager.Encoding">
            <summary>
            Gets or sets the encoding.
            </summary>
            <value>The encoding.</value>
        </member>
        <member name="P:Miyagi.Common.Serialization.SerializationManager.IsDisposed">
            <summary>
            Gets a value indicating whether the manager has been disposed.
            </summary>
            <value></value>
        </member>
        <member name="P:Miyagi.Common.Serialization.SerializationManager.MiyagiSystem">
            <summary>
            Gets the MiyagiSystem.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Serialization.SerializationManager.Serializers">
            <summary>
            Gets the collection of serializers.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Serialization.SerializationManager.Type">
            <summary>
            Gets the type of the manager.
            </summary>
        </member>
        <member name="T:Miyagi.Common.Serialization.SerializerOptionsAttribute">
            <summary>
            Indicates how a serializer treats a property.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Serialization.SerializerOptionsAttribute.Ignore">
            <summary>
            Gets or sets a value indicating whether the propery should be ignored.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Serialization.SerializerOptionsAttribute.LoadLast">
            <summary>
            Gets or sets a value indicating whether the propery should be loaded last.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Serialization.SerializerOptionsAttribute.Redirect">
            <summary>
            Gets or sets the redirect path.
            </summary>
        </member>
        <member name="T:Miyagi.Common.Serialization.Serializer">
            <summary>
            The base class for serializers.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Serialization.Serializer.#ctor(Miyagi.Common.Serialization.SerializationManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.Common.Serialization.Serializer"/> class.
            </summary>
            <param name="manager">The manager.</param>
        </member>
        <member name="M:Miyagi.Common.Serialization.Serializer.ExportToStream(System.IO.Stream,System.Collections.Generic.IDictionary{Miyagi.Common.IManager,Miyagi.Common.Serialization.SerializationData})">
            <summary>
            Exports to a stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="serializationData">The SerializationData.</param>
        </member>
        <member name="M:Miyagi.Common.Serialization.Serializer.ImportFromStream(System.IO.Stream)">
            <summary>
            Imports from a stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Miyagi.Common.Serialization.Serializer.ConvertFromInvariantString(System.Type,System.String)">
            <summary>
            Convert an invariant string to an object.
            </summary>
            <param name="type">The type.</param>
            <param name="s">The invariant string.</param>
            <returns></returns>
        </member>
        <member name="M:Miyagi.Common.Serialization.Serializer.ConvertToInvariantString(System.Object)">
            <summary>
            Convert an object to an invariant string.
            </summary>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="M:Miyagi.Common.Serialization.Serializer.GetProperties(System.Type)">
            <summary>
            Gets the properties.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="P:Miyagi.Common.Serialization.Serializer.FileExtensions">
            <summary>
            Gets the list of supported file extensions.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Serialization.Serializer.MiyagiSystem">
            <summary>
            Gets the miyagi system.
            </summary>
            <value>The miyagi system.</value>
        </member>
        <member name="P:Miyagi.Common.Serialization.Serializer.SerializationManager">
            <summary>
            Gets the serialization manager.
            </summary>
        </member>
        <member name="T:Miyagi.Common.Serialization.XmlSerializer">
            <summary>
            Serializes and deserializes into and from XML documents.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Serialization.XmlSerializer.#ctor(Miyagi.Common.Serialization.SerializationManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.Common.Serialization.XmlSerializer"/> class.
            </summary>
            <param name="manager">The manager.</param>
        </member>
        <member name="M:Miyagi.Common.Serialization.XmlSerializer.ExportToStream(System.IO.Stream,System.Collections.Generic.IDictionary{Miyagi.Common.IManager,Miyagi.Common.Serialization.SerializationData})">
            <summary>
            Exports to a stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="serializationData">The SerializationData.</param>
        </member>
        <member name="M:Miyagi.Common.Serialization.XmlSerializer.ImportFromStream(System.IO.Stream)">
            <summary>
            Imports from a stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Miyagi.Common.Serialization.XmlSerializer.ImportFromXDocument(System.Xml.Linq.XDocument)">
            <summary>
            Imports from an XDocument.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="P:Miyagi.Common.Serialization.XmlSerializer.FileExtensions">
            <summary>
            Gets the list of supported file extensions.
            </summary>
        </member>
        <member name="T:Miyagi.Common.TextFormatter">
            <summary>
            Converts a string to a quad array.
            </summary>
        </member>
        <member name="M:Miyagi.Common.TextFormatter.#ctor(Miyagi.Common.TextFormatterSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.Common.TextFormatter"/> class.
            </summary>
            <param name="textFormatterSettings">The text formatter settings.</param>
        </member>
        <member name="M:Miyagi.Common.TextFormatter.CreateTextQuads(Miyagi.Common.Data.Rectangle,System.String)">
            <summary>
            Creates the text quads.
            </summary>
            <param name="rect">A <see cref="T:Miyagi.Common.Data.Rectangle"/> representing the bounds of the text.</param>
            <param name="text">The text.</param>
            <returns>The text quads.</returns>
        </member>
        <member name="P:Miyagi.Common.TextFormatter.TextFormatterSettings">
            <summary>
            Gets the text formatter settings.
            </summary>
        </member>
        <member name="T:Miyagi.Common.ILocalizable">
            <summary>
            Interface for localizable objects.
            </summary>
        </member>
        <member name="P:Miyagi.Common.ILocalizable.LocaleResourceKey">
            <summary>
            Gets or sets the locale resource key.
            </summary>
        </member>
        <member name="T:Miyagi.Common.Scripting.BindEventsEventArgs">
            <summary>
            EventArgs for the BindEventsRequested event.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Scripting.BindEventsEventArgs.#ctor(Miyagi.Common.Scripting.ScriptingScheme)">
            <summary>
            Initializes a new instance of the BindEventsEventArgs class.
            </summary>
            <param name="scriptingScheme">The affected ScriptingScheme.</param>
        </member>
        <member name="P:Miyagi.Common.Scripting.BindEventsEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether the event has been handled.
            </summary>
            <value><c>true</c> if the event has been handled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Miyagi.Common.Scripting.BindEventsEventArgs.ScriptingScheme">
            <summary>
            Gets the affected ScriptingScheme.
            </summary>
            <value>The affected ScriptingScheme.</value>
        </member>
        <member name="T:Miyagi.Common.Scripting.ScriptingManager">
            <summary>
            The ScriptingManager.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Scripting.ScriptingManager.#ctor(Miyagi.Common.MiyagiSystem)">
            <summary>
            Initializes a new instance of the ScriptingManager class.
            </summary>
            <param name="miyagiSystem">The MiyagiSystem.</param>
        </member>
        <member name="M:Miyagi.Common.Scripting.ScriptingManager.BindAllUnboundSchemes">
            <summary>
            Binds all events according to the ScriptingSchemes.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Scripting.ScriptingManager.Dispose">
            <summary>
            Disposes the scripting manager.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Scripting.ScriptingManager.Initialize">
            <summary>
            Initializes the manager.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Scripting.ScriptingManager.Update">
            <summary>
            Updates the manager.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Scripting.ScriptingManager.Dispose(System.Boolean)">
            <summary>
            Disposes the ScriptingManager.
            </summary>
            <param name="disposing">Whether Dispose has been called.</param>
        </member>
        <member name="E:Miyagi.Common.Scripting.ScriptingManager.BindEventsRequested">
            <summary>
            Occurs when the binding of events is requested.
            </summary>
        </member>
        <member name="E:Miyagi.Common.Scripting.ScriptingManager.Disposing">
            <summary>
            Occurs when the manager is disposing.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Scripting.ScriptingManager.IsDisposed">
            <summary>
            Gets a value indicating whether the manager has been disposed.
            </summary>
            <value></value>
        </member>
        <member name="P:Miyagi.Common.Scripting.ScriptingManager.ScriptingSchemes">
            <summary>
            Gets the collection of ScriptingScheme.
            </summary>
            <value>The collection of ScriptingScheme.</value>
        </member>
        <member name="P:Miyagi.Common.Scripting.ScriptingManager.Type">
            <summary>
            Gets the type of the manager.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Scripting.ScriptingManager.MiyagiSystem">
            <summary>
            Gets the MiyagiSystem.
            </summary>
        </member>
        <member name="T:Miyagi.Common.Scripting.ScriptingScheme">
            <summary>
            A ScriptingScheme specifies how a scripting plugin binds events.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Scripting.ScriptingScheme.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ScriptingScheme class.
            </summary>
            <param name="name">The name of the ScriptingScheme.</param>
            <param name="language">The used programming language.</param>
        </member>
        <member name="P:Miyagi.Common.Scripting.ScriptingScheme.IsBound">
            <summary>
            Gets a value indicating whether the ScriptingScheme has been bound.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Scripting.ScriptingScheme.Language">
            <summary>
            Gets the name of the scripting language.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Scripting.ScriptingScheme.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Scripting.ScriptingScheme.ReferencedAssemblies">
            <summary>
            Gets a list of the referenced assemblies.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Scripting.ScriptingScheme.ScriptMaps">
            <summary>
            Gets a collection of ScriptMap.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Scripting.ScriptingScheme.Source">
            <summary>
            Gets or sets the source code.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Scripting.ScriptingScheme.ThrowOnCompileError">
            <summary>
            Gets or sets a value indicating whether an exception is thrown when an error occurs during compilation.
            </summary>
        </member>
        <member name="T:Miyagi.Common.Scripting.ScriptMap">
            <summary>
            A ScriptMap defines which methods of a script are bound to a event of the specified control.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Scripting.ScriptMap.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the ScriptMap class.
            </summary>
            <param name="target">The object which events will be defined.</param>
        </member>
        <member name="M:Miyagi.Common.Scripting.ScriptMap.SetEventMethod(System.String,System.String)">
            <summary>
            Sets a event and its method.
            </summary>
            <param name="eventName">The name of the event.</param>
            <param name="methodName">The name of the method.</param>
        </member>
        <member name="P:Miyagi.Common.Scripting.ScriptMap.EventMethods">
            <summary>
            Gets a collection representing the events and methods.
            </summary>
            <value>A collection representing the events and methods.</value>
        </member>
        <member name="P:Miyagi.Common.Scripting.ScriptMap.Target">
            <summary>
            Gets the target object.
            </summary>
        </member>
        <member name="T:Miyagi.Common.Events.ChangedValueEventArgs`1">
            <summary>
            Generics EventArgs for changed values.
            </summary>
            <typeparam name="T">The type of the changed value.</typeparam>
        </member>
        <member name="M:Miyagi.Common.Events.ChangedValueEventArgs`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the ChangedValueEventArgs class.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:Miyagi.Common.Events.ChangedValueEventArgs`1.NewValue">
            <summary>
            Gets the new value.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Events.ChangedValueEventArgs`1.OldValue">
            <summary>
            Gets the old value.
            </summary>
        </member>
        <member name="T:Miyagi.Common.Events.MouseButtonEventArgs">
            <summary>
            EventArgs for mouse button events.
            </summary>
        </member>
        <member name="T:Miyagi.Common.Events.MouseEventArgs">
            <summary>
            EventArgs for mouse events.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Events.MouseEventArgs.#ctor(Miyagi.Common.Data.Point)">
            <summary>
            Initializes a new instance of the MouseEventArgs class.
            </summary>
            <param name="mouseLoc">The mouse coordinates.</param>
        </member>
        <member name="P:Miyagi.Common.Events.MouseEventArgs.MouseLocation">
            <summary>
            Gets the mouse location.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Events.MouseEventArgs.MouseX">
            <summary>
            Gets the x-coordinate of the mouse.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Events.MouseEventArgs.MouseY">
            <summary>
            Gets the y-coordinate of the mouse.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Events.MouseButtonEventArgs.#ctor(Miyagi.Common.MouseButton,Miyagi.Common.Data.Point)">
            <summary>
            Initializes a new instance of the MouseButtonEventArgs class.
            </summary>
            <param name="mb">The mouse button.</param>
            <param name="mouseLoc">The mouse coordinates.</param>
        </member>
        <member name="P:Miyagi.Common.Events.MouseButtonEventArgs.MouseButton">
            <summary>
            Gets the MouseButton.
            </summary>
            <value>The MouseEvent.</value>
        </member>
        <member name="T:Miyagi.Common.Events.TextEventArgs">
            <summary>
            EventArgs for text events.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Events.TextEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TextEventArgs class.
            </summary>
            <param name="fromProperty">Indicated whether the text has been changed from a Text property.</param>
        </member>
        <member name="P:Miyagi.Common.Events.TextEventArgs.FromProperty">
            <summary>
            Gets a value indicating whether the text has been changed from a Text property.
            </summary>
        </member>
        <member name="T:Miyagi.Common.LocaleManager">
            <summary>
            The LocaleManager.
            </summary>
        </member>
        <member name="M:Miyagi.Common.LocaleManager.#ctor(Miyagi.Common.MiyagiSystem)">
            <summary>
            Initializes a new instance of the LocaleManager class.
            </summary>
            <param name="system">The MiyagiSystem.</param>
        </member>
        <member name="M:Miyagi.Common.LocaleManager.AddLocaleFolder(System.Globalization.CultureInfo,System.String)">
            <summary>
            Adds a new locale folder.
            </summary>
            <param name="cultureInfo">The CultureInfo.</param>
            <param name="folder">The folder containg the locale files.</param>
        </member>
        <member name="M:Miyagi.Common.LocaleManager.AddLocaleFolder(System.Globalization.CultureInfo,System.String,System.Boolean)">
            <summary>
            Adds a new locale folder.
            </summary>
            <param name="cultureInfo">The CultureInfo.</param>
            <param name="folder">The folder containg the locale files.</param>
            <param name="isNeutral">Specifies whether the locale is also the neutral one.</param>
        </member>
        <member name="M:Miyagi.Common.LocaleManager.ApplyResourceKey(System.Object,System.String)">
            <summary>
            Gets a string from a resource key.
            </summary>
            <param name="targetObject">The target object.</param>
            <param name="localeResourceKey">The locale resource key.</param>
            <exception cref="T:System.InvalidOperationException">Folder for the neutral culture is not set.</exception>
            <exception cref="T:System.ArgumentNullException">Argument is null.</exception>
            <exception cref="T:System.ArgumentException">Malformed resource key.</exception>
        </member>
        <member name="M:Miyagi.Common.LocaleManager.Dispose">
            <summary>
            Disposes the LocaleManager.
            </summary>
        </member>
        <member name="M:Miyagi.Common.LocaleManager.Initialize">
            <summary>
            Initializes the manager.
            </summary>
        </member>
        <member name="M:Miyagi.Common.LocaleManager.Update">
            <summary>
            Updates the manager.
            </summary>
        </member>
        <member name="M:Miyagi.Common.LocaleManager.Dispose(System.Boolean)">
            <summary>
            Disposes the LocaleManager.
            </summary>
            <param name="disposing">Whether Dispose has been called.</param>
        </member>
        <member name="M:Miyagi.Common.LocaleManager.OnCurrentCultureChanged">
            <summary>
            Raises the CurrentCultureChanged event.
            </summary>
        </member>
        <member name="M:Miyagi.Common.LocaleManager.SetCurrentCultureFolder">
            <summary>
            Sets the current culture folder.
            </summary>
        </member>
        <member name="E:Miyagi.Common.LocaleManager.CurrentCultureChanged">
            <summary>
            Occurs when the CurrentCulture property changes.
            </summary>
        </member>
        <member name="E:Miyagi.Common.LocaleManager.Disposing">
            <summary>
            Occurs when the LocaleManager is disposing.
            </summary>
        </member>
        <member name="P:Miyagi.Common.LocaleManager.CurrentCulture">
            <summary>
            Gets or sets the current culture.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Miyagi.Common.LocaleManager.IsDisposed">
            <summary>
            Gets a value indicating whether the manager has been disposed.
            </summary>
            <value></value>
        </member>
        <member name="P:Miyagi.Common.LocaleManager.Type">
            <summary>
            Gets the type of the manager.
            </summary>
        </member>
        <member name="P:Miyagi.Common.LocaleManager.MiyagiSystem">
            <summary>
            Gets the MiyagiSystem.
            </summary>
        </member>
        <member name="T:Miyagi.Common.Data.Thickness">
            <summary>
            Describes the thickness of a rectangular object.
            </summary>
        </member>
        <member name="F:Miyagi.Common.Data.Thickness.Empty">
            <summary>
            Gets a value that represents a static empty Thickness.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Data.Thickness.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the Thickness struct.
            </summary>
            <param name="all">The thickness of all sides.</param>
        </member>
        <member name="M:Miyagi.Common.Data.Thickness.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Thickness struct.
            </summary>
            <param name="left">The size of the left side.</param>
            <param name="top">The size of the top side.</param>
            <param name="right">The size of the right side.</param>
            <param name="bottom">The size of the bottom side.</param>
        </member>
        <member name="M:Miyagi.Common.Data.Thickness.op_Inequality(Miyagi.Common.Data.Thickness,Miyagi.Common.Data.Thickness)">
            <summary>
            Returns a value indicating whether two Thickness instances are not equal.
            </summary>
            <param name="left">A Thickness instance.</param>
            <param name="right">Another Thickness instance.</param>
            <returns><c>true</c> if both are unequal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Thickness.op_Addition(Miyagi.Common.Data.Thickness,Miyagi.Common.Data.Thickness)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Thickness.op_Subtraction(Miyagi.Common.Data.Thickness,Miyagi.Common.Data.Thickness)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Thickness.op_Equality(Miyagi.Common.Data.Thickness,Miyagi.Common.Data.Thickness)">
            <summary>
            Returns a value indicating whether two Thickness instances are equal.
            </summary>
            <param name="left">A Thickness instance.</param>
            <param name="right">Another Thickness instance.</param>
            <returns><c>true</c> if both are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Thickness.Parse(System.String)">
            <summary>
            Converts a string representation to a Thickness instance.
            </summary>
            <param name="s">A string representation of a Thickness instance.</param>
            <returns>The Thickness instance.</returns>
            <exception cref="T:System.FormatException"><c>FormatException</c>.</exception>
        </member>
        <member name="M:Miyagi.Common.Data.Thickness.Equals(Miyagi.Common.Data.Thickness)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified Thickness.
            </summary>
            <param name="other">The other Thickness.</param>
            <returns><c>true</c> if both are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Thickness.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified Object.
            </summary>
            <param name="obj">The other Object.</param>
            <returns><c>true</c> if both are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Thickness.GetHashCode">
            <summary>
            Returns the HashCode of the current instance.
            </summary>
            <returns>The HashCode of the Thickness.</returns>
        </member>
        <member name="M:Miyagi.Common.Data.Thickness.ToString">
            <summary>
            Converts a Thickness instance to a string representation.
            </summary>
            <returns>A string representation.</returns>
        </member>
        <member name="P:Miyagi.Common.Data.Thickness.Bottom">
            <summary>
            Gets the width of the bottom side.
            </summary>
            <value>The width of the bottom side in pixels.</value>
        </member>
        <member name="P:Miyagi.Common.Data.Thickness.Horizontal">
            <summary>
            Gets the total width of the Thickness.
            </summary>
            <value>The width of the Thickness.</value>
        </member>
        <member name="P:Miyagi.Common.Data.Thickness.Left">
            <summary>
            Gets the width of the Left side.
            </summary>
            <value>The width of the Left side in pixels.</value>
        </member>
        <member name="P:Miyagi.Common.Data.Thickness.Right">
            <summary>
            Gets the width of the right side.
            </summary>
            <value>The width of the right side in pixels.</value>
        </member>
        <member name="P:Miyagi.Common.Data.Thickness.Top">
            <summary>
            Gets the width of the top side.
            </summary>
            <value>The width of the top side in pixels.</value>
        </member>
        <member name="P:Miyagi.Common.Data.Thickness.Vertical">
            <summary>
            Gets the total height of the Thickness.
            </summary>
            <value>The height of the Thickness.</value>
        </member>
        <member name="T:Miyagi.Common.Events.MouseGestureEventArgs">
            <summary>
            EventArgs for mouse gesture events.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Events.MouseGestureEventArgs.#ctor(System.Collections.Generic.IList{Miyagi.Common.MouseGestures},System.Collections.Generic.IList{Miyagi.Common.Data.Point},Miyagi.Common.Data.Point)">
            <summary>
            Initializes a new instance of the MouseGestureEventArgs class.
            </summary>
            <param name="mouseGestures">The list of MouseGestures.</param>
            <param name="mouseGesturesLocations">The list of MouseGesture positions.</param>
            <param name="endLocation">The end position.</param>
        </member>
        <member name="P:Miyagi.Common.Events.MouseGestureEventArgs.EndLocation">
            <summary>
            Gets the end position.
            </summary>
            <value>A Location representing the end position.</value>
        </member>
        <member name="P:Miyagi.Common.Events.MouseGestureEventArgs.Gestures">
            <summary>
            Gets a list of recogized gestures.
            </summary>
            <value>A list of recogized gestures.</value>
        </member>
        <member name="P:Miyagi.Common.Events.MouseGestureEventArgs.Locations">
            <summary>
            Gets a list of start positions for the Gestures list.
            </summary>
            <value>A list of start positions for the Gestures list.</value>
        </member>
        <member name="T:Miyagi.Common.Events.KeyEvent">
            <summary>
            A KeyEvent.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Events.KeyEvent.#ctor(System.ConsoleKey,System.ConsoleModifiers)">
            <summary>
            Initializes a new instance of the KeyEvent class.
            </summary>
            <param name="key">A ConsoleKey representing the key.</param>
            <param name="modifiers">ConsoleModifiers representing the modifiers.</param>
        </member>
        <member name="P:Miyagi.Common.Events.KeyEvent.Key">
            <summary>
            Gets the key.
            </summary>
            <value>A ConsoleKey representing the key.</value>
        </member>
        <member name="P:Miyagi.Common.Events.KeyEvent.Modifiers">
            <summary>
            Gets the modifier.
            </summary>
            <value>ConsoleModifiers representing the modiefers.</value>
        </member>
        <member name="T:Miyagi.Common.Events.ScrollEventArgs">
            <summary>
            Provides data for the Scroll event.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Events.ScrollEventArgs.#ctor(Miyagi.Common.ScrollEventType,System.Single)">
            <summary>
            Initializes a new instance of the ScrollEventArgs class.
            </summary>
            <param name="type">One of the ScrollEventType values.</param>
            <param name="newValue">The new value for the scroll bar.</param>
        </member>
        <member name="M:Miyagi.Common.Events.ScrollEventArgs.#ctor(Miyagi.Common.ScrollEventType,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the ScrollEventArgs class.
            </summary>
            <param name="type">One of the ScrollEventType values.</param>
            <param name="oldValue">The old value for the scroll bar.</param>
            <param name="newValue">The new value for the scroll bar.</param>
        </member>
        <member name="M:Miyagi.Common.Events.ScrollEventArgs.#ctor(Miyagi.Common.ScrollEventType,System.Single,Miyagi.Common.Orientation)">
            <summary>
            Initializes a new instance of the ScrollEventArgs class.
            </summary>
            <param name="type">One of the ScrollEventType values.</param>
            <param name="newValue">The new value for the scroll bar.</param>
            <param name="scroll">One of the ScrollOrientation values.</param>
        </member>
        <member name="M:Miyagi.Common.Events.ScrollEventArgs.#ctor(Miyagi.Common.ScrollEventType,System.Single,System.Single,Miyagi.Common.Orientation)">
            <summary>
            Initializes a new instance of the ScrollEventArgs class.
            </summary>
            <param name="type">One of the ScrollEventType values.</param>
            <param name="oldValue">The old value for the scroll bar.</param>
            <param name="newValue">The new value for the scroll bar.</param>
            <param name="scroll">One of the ScrollOrientation values.</param>
        </member>
        <member name="P:Miyagi.Common.Events.ScrollEventArgs.NewValue">
            <summary>
            Gets or sets the new Value of the scroll bar.
            </summary>
            <value>The new value.</value>
        </member>
        <member name="P:Miyagi.Common.Events.ScrollEventArgs.OldValue">
            <summary>
            Gets the old Value of the scroll bar.
            </summary>
            <value>The old value.</value>
        </member>
        <member name="P:Miyagi.Common.Events.ScrollEventArgs.ScrollOrientation">
            <summary>
            Gets the scroll bar orientation that raised the Scroll event.
            </summary>
            <value>The orientation.</value>
        </member>
        <member name="P:Miyagi.Common.Events.ScrollEventArgs.Type">
            <summary>
            Gets the type of scroll event that occurred.
            </summary>
            <value>The scoll event.</value>
        </member>
        <member name="T:Miyagi.Common.Events.KeyboardEventArgs">
            <summary>
            EventArgs for keyboard events.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Events.KeyboardEventArgs.#ctor(Miyagi.Common.Events.KeyEvent)">
            <summary>
            Initializes a new instance of the KeyboardEventArgs class.
            </summary>
            <param name="e">The KeyEvent.</param>
        </member>
        <member name="P:Miyagi.Common.Events.KeyboardEventArgs.KeyCode">
            <summary>
            Gets the ConsoleKey.
            </summary>
            <value>The ConsoleKey.</value>
        </member>
        <member name="P:Miyagi.Common.Events.KeyboardEventArgs.KeyEvent">
            <summary>
            Gets the KeyEvent.
            </summary>
            <value>The KeyEvent.</value>
        </member>
        <member name="T:Miyagi.Common.Events.ValueEventArgs`1">
            <summary>
            EventArgs for submit events.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Events.ValueEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the ValueEventArgs class.
            </summary>
            <param name="data">Submitted data.</param>
        </member>
        <member name="P:Miyagi.Common.Events.ValueEventArgs`1.Data">
            <summary>
            Gets the submitted data.
            </summary>
            <value>An Object representing the submitted data.</value>
        </member>
        <member name="T:Miyagi.Common.MiyagiSystem">
            <summary>
            The root class of Miyagi.
            </summary>
        </member>
        <member name="M:Miyagi.Common.MiyagiSystem.#ctor">
            <summary>
            Initializes a new instance of the MiyagiSystem class.
            </summary>
        </member>
        <member name="M:Miyagi.Common.MiyagiSystem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.Common.MiyagiSystem"/> class.
            </summary>
            <param name="backendName">Name of the backend.</param>
        </member>
        <member name="M:Miyagi.Common.MiyagiSystem.#ctor(Miyagi.Common.Rendering.Backend)">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.Common.MiyagiSystem"/> class.
            </summary>
            <param name="backend">The backend.</param>
        </member>
        <member name="M:Miyagi.Common.MiyagiSystem.BeginInvoke(System.Delegate,System.Object[])">
            <summary>
            Executes the specified delegate asynchronously.
            </summary>
            <param name="method">The delegate to execute.</param>
            <param name="args">An array of objects to pass as arguments to the given method.</param>
            <returns>An IAsyncResult representing the result of the BeginInvoke operation.</returns>
        </member>
        <member name="M:Miyagi.Common.MiyagiSystem.BeginInvoke(System.Action)">
            <summary>
            Executes the specified action asynchronously.
            </summary>
            <param name="action">The action to execute.</param>
            <returns>An IAsyncResult representing the result of the BeginInvoke operation.</returns>
        </member>
        <member name="M:Miyagi.Common.MiyagiSystem.BeginInvoke(System.Delegate)">
            <summary>
            Executes the specified delegate asynchronously.
            </summary>
            <param name="method">The delegate to execute.</param>
            <returns>An IAsyncResult representing the result of the BeginInvoke operation.</returns>
        </member>
        <member name="M:Miyagi.Common.MiyagiSystem.Dispose">
            <summary>
            Destroys the MiyagiSystem and disposes all components.
            </summary>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:Miyagi.Common.MiyagiSystem.EndInvoke(System.IAsyncResult)">
            <summary>
            Retrieves the return value of the asynchronous operation.
            </summary>
            <param name="result">An IAsyncResult representing the result of a previous BeginInvoke operation.</param>
            <returns>The Object  generated by the asynchronous operation.</returns>
        </member>
        <member name="M:Miyagi.Common.MiyagiSystem.GetManager(System.String)">
            <summary>
            Gets a manager by type.
            </summary>
            <param name="type">The type of the manager.</param>
            <returns>The manager of the specified type if it exists; otherwise, null.</returns>
        </member>
        <member name="M:Miyagi.Common.MiyagiSystem.GetSerializationData">
            <summary>
            Gets the SerializationData.
            </summary>
            <returns>The SerializationData.</returns>
        </member>
        <member name="M:Miyagi.Common.MiyagiSystem.HasManager(System.String)">
            <summary>
            Returns whether a manager of the specified type has been registered.
            </summary>
            <param name="type">The type of the manager.</param>
            <returns><c>true</c> if there is a manager of the specified type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Miyagi.Common.MiyagiSystem.Invoke(System.Delegate,System.Object[])">
            <summary>
            Executes the specified delegate synchronously.
            </summary>
            <param name="method">The delegate to execute.</param>
            <param name="args">An array of objects to pass as arguments to the given method.</param>
            <returns>An object representing the result of the invocation.</returns>
        </member>
        <member name="M:Miyagi.Common.MiyagiSystem.Invoke(System.Action)">
            <summary>
            Executes the specified action synchronously.
            </summary>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:Miyagi.Common.MiyagiSystem.Invoke(System.Delegate)">
            <summary>
            Executes the specified delegate synchronously.
            </summary>
            <param name="method">The delegate to execute.</param>
            <returns>An object representing the result of the invocation.</returns>
        </member>
        <member name="M:Miyagi.Common.MiyagiSystem.RegisterManager(Miyagi.Common.IManager)">
            <summary>
            Registers a manager.
            </summary>
            <param name="manager">The IManager to register.</param>
        </member>
        <member name="M:Miyagi.Common.MiyagiSystem.UnregisterManager(Miyagi.Common.IManager)">
            <summary>
            Unregisters a manager.
            </summary>
            <param name="manager">The IManager to unregister.</param>
        </member>
        <member name="M:Miyagi.Common.MiyagiSystem.Update">
            <summary>
            Updates the MiyagiSystem.
            </summary>
        </member>
        <member name="E:Miyagi.Common.MiyagiSystem.Updated">
            <summary>
            Occurs after the root has been updated.
            </summary>
        </member>
        <member name="E:Miyagi.Common.MiyagiSystem.Updating">
            <summary>
            Occues before the root has been updated.
            </summary>
        </member>
        <member name="P:Miyagi.Common.MiyagiSystem.Backend">
            <summary>
            Gets the rendering back-end.
            </summary>
        </member>
        <member name="P:Miyagi.Common.MiyagiSystem.GUIManager">
            <summary>
            Gets the GUIManager.
            </summary>
        </member>
        <member name="P:Miyagi.Common.MiyagiSystem.InputManager">
            <summary>
            Gets the InputManager.
            </summary>
        </member>
        <member name="P:Miyagi.Common.MiyagiSystem.InvokeRequired">
            <summary>
            Gets a value indicating whether a invoke method must be called.
            </summary>
        </member>
        <member name="P:Miyagi.Common.MiyagiSystem.IsDisposed">
            <summary>
            Gets a value indicating whether the control is disposed.
            </summary>
        </member>
        <member name="P:Miyagi.Common.MiyagiSystem.LocaleManager">
            <summary>
            Gets the LocaleManager.
            </summary>
        </member>
        <member name="P:Miyagi.Common.MiyagiSystem.Managers">
            <summary>
            Gets the collection of managers.
            </summary>
        </member>
        <member name="P:Miyagi.Common.MiyagiSystem.PluginManager">
            <summary>
            Gets the PluginManager.
            </summary>
        </member>
        <member name="P:Miyagi.Common.MiyagiSystem.RenderManager">
            <summary>
            Gets the RenderManager.
            </summary>
        </member>
        <member name="P:Miyagi.Common.MiyagiSystem.ScriptingManager">
            <summary>
            Gets the ScriptingManager.
            </summary>
        </member>
        <member name="P:Miyagi.Common.MiyagiSystem.SerializationManager">
            <summary>
            Gets the SerializationManager.
            </summary>
        </member>
        <member name="P:Miyagi.Common.MiyagiSystem.TwoDManager">
            <summary>
            Gets the TwoDManager.
            </summary>
        </member>
        <member name="T:Miyagi.Common.Plugins.RequiredVersionAttribute">
            <summary>
            Indicates which version a plugin requires.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Plugins.RequiredVersionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the RequiredVersionAttribute class.
            </summary>
            <param name="version">The required version.</param>
        </member>
        <member name="M:Miyagi.Common.Plugins.RequiredVersionAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the RequiredVersionAttribute class.
            </summary>
            <param name="minVersion">The minimal version.</param>
            <param name="maxVersion">The maximal version.</param>
            <exception cref="T:System.ArgumentNullException">Argument is null.</exception>
            <exception cref="T:System.ArgumentException">Minimal version is higher than maximal version.</exception>
        </member>
        <member name="P:Miyagi.Common.Plugins.RequiredVersionAttribute.MaxVersion">
            <summary>
            Gets the maximal version.
            </summary>
            <value>The maximal version.</value>
        </member>
        <member name="P:Miyagi.Common.Plugins.RequiredVersionAttribute.MinVersion">
            <summary>
            Gets the minimal version.
            </summary>
            <value>The minimal version.</value>
        </member>
        <member name="T:Miyagi.Common.Plugins.InputPlugin">
            <summary>
            The base class for input plugins.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Plugins.InputPlugin.#ctor(Miyagi.Common.MiyagiSystem)">
            <summary>
            Initializes a new instance of the InputPlugin class.
            </summary>
            <param name="system">The MiyagiSystem.</param>
        </member>
        <member name="M:Miyagi.Common.Plugins.InputPlugin.NotifyLoaded(System.Object[])">
            <summary>
            Is called when the plugin is loaded.
            </summary>
            <param name="args">Optional array of load arguments.</param>
        </member>
        <member name="M:Miyagi.Common.Plugins.InputPlugin.NotifyUnloaded">
            <summary>
            Is called when the plugin is unloaded.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Plugins.InputPlugin.SetKeyboardCaptureDevice(System.Object)">
            <summary>
            Sets the keyboard capture device.
            </summary>
            <param name="keyboard">The keyboard capture device.</param>
        </member>
        <member name="M:Miyagi.Common.Plugins.InputPlugin.SetMouseCaptureDevice(System.Object)">
            <summary>
            Sets the mouse capture device.
            </summary>
            <param name="mouse">The mouse capture device.</param>
        </member>
        <member name="M:Miyagi.Common.Plugins.InputPlugin.CreateInputManager">
            <summary>
            Creates the input manager.
            </summary>
            <returns>The newly created input manager.</returns>
        </member>
        <member name="M:Miyagi.Common.Plugins.InputPlugin.HandleInputManagerDisposing">
            <summary>
            Handles a disposing InputManager.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Plugins.InputPlugin.UnregisterEvents">
            <summary>
            Unregisters the events.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Plugins.InputPlugin.InputManager">
            <summary>
            Gets the InputManager.
            </summary>
            <value>The InputManager.</value>
        </member>
        <member name="T:Miyagi.Common.Plugins.PluginManager">
            <summary>
            A PluginManager.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Plugins.PluginManager.#ctor(Miyagi.Common.MiyagiSystem)">
            <summary>
            Initializes a new instance of the PluginManager class.
            </summary>
            <param name="system">The MiyagiSystem.</param>
        </member>
        <member name="M:Miyagi.Common.Plugins.PluginManager.Dispose">
            <summary>
            Disposes the PluginManager.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Plugins.PluginManager.GetPlugin(System.String)">
            <summary>
            Gets a plugin by name.
            </summary>
            <param name="name">The name of the plugin.</param>
            <returns>The plugin if it exists, otherwise null.</returns>
        </member>
        <member name="M:Miyagi.Common.Plugins.PluginManager.Initialize">
            <summary>
            Initializes the manager.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Plugins.PluginManager.LoadAllPlugins(System.String,System.Boolean)">
            <summary>
            Loads all plugins in the specified folder.
            </summary>
            <param name="folder">The folder that contains the plugins.</param>
            <param name="includeSubfolders">Indicates whether subfolders should also be searched.</param>
        </member>
        <member name="M:Miyagi.Common.Plugins.PluginManager.LoadPlugin(System.Reflection.AssemblyName,System.Object[])">
            <summary>
            Loads a plugin.
            </summary>
            <param name="assemblyRef">Unique identity of the plugin.</param>
            <param name="args">Specifies parameters which are passed to the plugin's <see cref="M:Miyagi.Common.Plugins.Plugin.NotifyLoaded(System.Object[])"/> method.</param>
            <returns>The loaded plugin.</returns>
        </member>
        <member name="M:Miyagi.Common.Plugins.PluginManager.LoadPlugin(System.String,System.Object[])">
            <summary>
            Loads a plugin.
            </summary>
            <param name="fileName">The filename of the plugin.</param>
            <param name="args">Specifies parameters which are passed to the plugin's <see cref="M:Miyagi.Common.Plugins.Plugin.NotifyLoaded(System.Object[])"/> method.</param>
            <returns>The loaded plugin.</returns>
        </member>
        <member name="M:Miyagi.Common.Plugins.PluginManager.UnloadAllPlugins">
            <summary>
            Unloads all plugins.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Plugins.PluginManager.UnloadPlugin(System.String)">
            <summary>
            Unloads a plugin.
            </summary>
            <param name="name">The name of the plugin.</param>
        </member>
        <member name="M:Miyagi.Common.Plugins.PluginManager.Update">
            <summary>
            Updates the manager.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Plugins.PluginManager.Dispose(System.Boolean)">
            <summary>
            Disposes the PluginManager.
            </summary>
            <param name="disposing">Whether Dispose has been called.</param>
        </member>
        <member name="M:Miyagi.Common.Plugins.PluginManager.LoadPluginCore(System.Reflection.Assembly,System.Object[])">
            <summary>
            Loads a plugin.
            </summary>
            <param name="assembly">The plugin <see cref="T:System.Reflection.Assembly"/> to load.</param>
            <param name="args">Specifies parameters which are passed to the plugin's <see cref="M:Miyagi.Common.Plugins.Plugin.NotifyLoaded(System.Object[])"/> method.</param>
            <returns>The loaded plugin.</returns>
            <exception cref="T:System.IO.FileLoadException">Error while loading plugin.</exception>
        </member>
        <member name="M:Miyagi.Common.Plugins.PluginManager.UnloadPluginCore(Miyagi.Common.Plugins.Plugin)">
            <summary>
            Unloads a plugin.
            </summary>
            <param name="plugin">The plugin.</param>
        </member>
        <member name="E:Miyagi.Common.Plugins.PluginManager.Disposing">
            <summary>
            Occurs when the manager is disposing.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Plugins.PluginManager.IsDisposed">
            <summary>
            Gets a value indicating whether the manager has been disposed.
            </summary>
            <value></value>
        </member>
        <member name="P:Miyagi.Common.Plugins.PluginManager.Plugins">
            <summary>
            Gets the collection of loaded plugins.
            </summary>
            <value>A collection of loaded plugins.</value>
        </member>
        <member name="P:Miyagi.Common.Plugins.PluginManager.Type">
            <summary>
            Gets the type of the manager.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Plugins.PluginManager.MiyagiSystem">
            <summary>
            Gets the MiyagiSystem.
            </summary>
        </member>
        <member name="T:Miyagi.Common.Rendering.Sprite">
            <summary>
            A representation of a Sprite.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Rendering.Sprite.#ctor(Miyagi.Common.Rendering.ISpriteRenderer,Miyagi.Common.Rendering.Primitive[])">
            <summary>
            Initializes a new instance of the Sprite class.
            </summary>
            <param name="spriteRenderer">The owning <see cref="T:Miyagi.Common.Rendering.ISpriteRenderer"/>.</param>
            <param name="primitives">The primitives.</param>
        </member>
        <member name="M:Miyagi.Common.Rendering.Sprite.GetPrimitive(System.Int32)">
            <summary>
            Gets the primitive at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The primitive at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>index</c> is out of range.</exception>
        </member>
        <member name="M:Miyagi.Common.Rendering.Sprite.HitTest(Miyagi.Common.Data.Point)">
            <summary>
            Gets a value indicating whether the provided coordinates are inside the control.
            </summary>
            <param name="p">The coordinate.</param>
            <returns>
            <c>true</c> if the coordinates are inside the control; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Miyagi.Common.Rendering.Sprite.Move(Miyagi.Common.Data.Point)">
            <summary>
            Moves the sprite.
            </summary>
            <param name="offset">A <see cref="T:Miyagi.Common.Data.Point"/> representing the offset.</param>
        </member>
        <member name="M:Miyagi.Common.Rendering.Sprite.RemoveFromRenderer">
            <summary>
            Removes the sprite from its renderer.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Rendering.Sprite.Resize(Miyagi.Common.Data.Point)">
            <summary>
            Resizes the sprite.
            </summary>
            <param name="offset">A <see cref="T:Miyagi.Common.Data.Point"/> representing the offset.</param>
        </member>
        <member name="M:Miyagi.Common.Rendering.Sprite.SetColour(Miyagi.Common.Data.ColourDefinition)">
            <summary>
            Sets the colour.
            </summary>
            <param name="colourDefinition">The colour definition.</param>
        </member>
        <member name="M:Miyagi.Common.Rendering.Sprite.SetTexture(System.String)">
            <summary>
            Sets the texture of the Sprite.
            </summary>
            <param name="texName">The name of the texture.</param>
        </member>
        <member name="M:Miyagi.Common.Rendering.Sprite.SetUV(Miyagi.Common.Data.PointF[])">
            <summary>
            Sets the UV.
            </summary>
            <param name="uvs">The uvs.</param>
        </member>
        <member name="M:Miyagi.Common.Rendering.Sprite.ForEachPrimitive(System.Action{Miyagi.Common.Rendering.Primitive})">
            <summary>
            Executes an action for each Primitive.
            </summary>
            <param name="action">The action to perform.</param>
        </member>
        <member name="M:Miyagi.Common.Rendering.Sprite.HitTest(System.Single,System.Single)">
            <summary>
            Performs a hit test.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <returns><c>true</c> if the primitive is hit; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Miyagi.Common.Rendering.Sprite.GpuPrograms">
            <summary>
            Gets or sets the list of GpuPrograms.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.Sprite.Opacity">
            <summary>
            Gets or sets the opacity of the Sprite.
            </summary>
            <value>A float representing the opacity of the Sprite.</value>
        </member>
        <member name="P:Miyagi.Common.Rendering.Sprite.PrimitiveCount">
            <summary>
            Gets the primitive count.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.Sprite.TexFilter">
            <summary>
            Gets or sets the texture filtering of the Sprite.
            </summary>
            <value>A TextureFiltering enum representing the texture filtering of the Sprite.</value>
        </member>
        <member name="P:Miyagi.Common.Rendering.Sprite.TextureHandle">
            <summary>
            Gets or sets the texture handle of the Sprite.
            </summary>
            <value>An <see cref="T:System.Int64"/> representing the texture handle of the Sprite.</value>
        </member>
        <member name="P:Miyagi.Common.Rendering.Sprite.TriangleCount">
            <summary>
            Gets the triangle count.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.Sprite.VertexCount">
            <summary>
            Gets the vertex count.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.Sprite.Visible">
            <summary>
            Gets or sets a value indicating whether the Sprite is visible.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Miyagi.Common.Rendering.Sprite.ZOrder">
            <summary>
            Gets or sets the ZOrder of the Sprite.
            </summary>
            <value>An <see cref="T:System.Int32"/> representing the ZOrder of the Sprite.</value>
            <remarks>In order for changes to take effect, <see cref="M:Miyagi.Common.Rendering.SpriteRenderer.SortSprites"/> of the responsible <see cref="T:Miyagi.Common.Rendering.SpriteRenderer"/> has to be called.</remarks>
        </member>
        <member name="P:Miyagi.Common.Rendering.Sprite.Backend">
            <summary>
            Gets the backend.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.Sprite.SpriteRenderer">
            <summary>
            Gets the sprite renderer.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.Sprite.ViewportAspectRatio">
            <summary>
            Gets the aspect ratio of the viewport.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.Sprite.ViewportSize">
            <summary>
            Gets the size of the viewport.
            </summary>
        </member>
        <member name="T:Miyagi.Common.Rendering.RenderManager">
            <summary>
            The base class for render manager.
            </summary>
        </member>
        <member name="F:Miyagi.Common.Rendering.RenderManager.OpaqueTexture">
            <summary>
            Gets the name of the opaque texture.
            </summary>
        </member>
        <member name="F:Miyagi.Common.Rendering.RenderManager.TransparentTexture">
            <summary>
            Gets the name of the transparent texture.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Rendering.RenderManager.#ctor(Miyagi.Common.MiyagiSystem)">
            <summary>
            Initializes a new instance of the RenderManager class.
            </summary>
            <param name="miyagiSystem">The MiyagiSystem.</param>
        </member>
        <member name="M:Miyagi.Common.Rendering.RenderManager.Finalize">
            <summary>
            Finalizes an instance of the RenderManager class.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Rendering.RenderManager.Create2DRenderer">
            <summary>
            Creates a renderer.
            </summary>
            <returns>The newly created renderer.</returns>
        </member>
        <member name="M:Miyagi.Common.Rendering.RenderManager.Create3DRenderer">
            <summary>
            Creates a renderer.
            </summary>
            <returns>The newly created renderer.</returns>
        </member>
        <member name="M:Miyagi.Common.Rendering.RenderManager.DestroyRenderer(Miyagi.Common.Rendering.ISpriteRenderer)">
            <summary>
            Removes and disposes the specified renderer.
            </summary>
            <param name="renderer">The renderer to remove.</param>
        </member>
        <member name="M:Miyagi.Common.Rendering.RenderManager.Dispose">
            <summary>
            Disposes the render manager.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Rendering.RenderManager.DoRender">
            <summary>
            Performs a rendering operation.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Rendering.RenderManager.Initialize">
            <summary>
            Initializes the manager.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Rendering.RenderManager.SortRenderers">
            <summary>
            Sorts the renderers.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Rendering.RenderManager.Update">
            <summary>
            Updates the manager.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Rendering.RenderManager.Create2DRendererCore">
            <summary>
            Creates a 2D renderer.
            </summary>
            <returns>The newly created renderer.</returns>
        </member>
        <member name="M:Miyagi.Common.Rendering.RenderManager.Create3DRendererCore">
            <summary>
            Creates a 3D renderer.
            </summary>
            <returns>The newly created renderer.</returns>
        </member>
        <member name="M:Miyagi.Common.Rendering.RenderManager.CreateOpaqueTexture(System.String)">
            <summary>
            Creates the opaque texture.
            </summary>
            <param name="opaqueTextureName">Name of the opaque texture.</param>
            <returns>The handle of the opaque texture.</returns>
        </member>
        <member name="M:Miyagi.Common.Rendering.RenderManager.CreateTransparentTexture(System.String)">
            <summary>
            Creates the transparent texture.
            </summary>
            <param name="transparentTextureName">Name of the transparent texture.</param>
            <returns>The handle of the opaque texture.</returns>
        </member>
        <member name="M:Miyagi.Common.Rendering.RenderManager.Dispose(System.Boolean)">
            <summary>
            Disposes the render manager.
            </summary>
            <param name="disposing">Indicates whether Dispose has been called.</param>
        </member>
        <member name="E:Miyagi.Common.Rendering.RenderManager.Disposing">
            <summary>
            Occurs when the manager is disposing.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.RenderManager.HorizontalTexelOffset">
            <summary>
            Gets or sets the horizontal texel offset.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.RenderManager.OpaqueTextureHandle">
            <summary>
            Gets or sets handle of the solid texture.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.RenderManager.TransparentTextureHandle">
            <summary>
            Gets or sets the handle of the transparent texture.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.RenderManager.VerticalTexelOffset">
            <summary>
            Gets or sets the vertical texel offset.
            </summary>
            <remarks>This should not be changed by user code.</remarks>
        </member>
        <member name="P:Miyagi.Common.Rendering.RenderManager.HardwareBufferCapacity">
            <summary>
            Gets the hardware buffer capacity of all SpriteRenderers.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.RenderManager.IsDisposed">
            <summary>
            Gets a value indicating whether the manager has been disposed.
            </summary>
            <value></value>
        </member>
        <member name="P:Miyagi.Common.Rendering.RenderManager.MainRenderer">
            <summary>
            Gets or sets the main sprite renderer.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.RenderManager.MainViewport">
            <summary>
            Gets or sets the main viewport.
            </summary>
            <remarks>This viewport is used for the cursor, dialogboxes and tooltips, and it is the default for new SpriteRenderers.</remarks>
        </member>
        <member name="P:Miyagi.Common.Rendering.RenderManager.MiyagiSystem">
            <summary>
            Gets the MiyagiSystem.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.RenderManager.Type">
            <summary>
            Gets the type of the manager.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.RenderManager.SpriteRenderers">
            <summary>
            Gets a list of sprite renderers.
            </summary>
        </member>
        <member name="T:Miyagi.Common.Rendering.SpriteRenderer">
            <summary>
            A sprite renderer.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Rendering.SpriteRenderer.#ctor(Miyagi.Common.Rendering.RenderManager)">
            <summary>
            Initializes a new instance of the SpriteRenderer class.
            </summary>
            <param name="owner">The owning RenderManager.</param>
        </member>
        <member name="M:Miyagi.Common.Rendering.SpriteRenderer.Finalize">
            <summary>
            Finalizes an instance of the SpriteRenderer class.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Rendering.SpriteRenderer.AddSprite(Miyagi.Common.Rendering.Sprite)">
            <summary>
            Adds a Sprite to the Renderer.
            </summary>
            <param name="sprite">The sprite to add.</param>
            <returns><c>true</c> if the sprite has been added successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Miyagi.Common.Rendering.SpriteRenderer.Dispose">
            <summary>
            Disposes the sprite renderer.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Rendering.SpriteRenderer.RemoveSprite(Miyagi.Common.Rendering.Sprite)">
            <summary>
            Removes a Sprite from the Renderer.
            </summary>
            <param name="sprite">The sprite to remove.</param>
            <returns><c>true</c> if the sprite has been removed successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Miyagi.Common.Rendering.SpriteRenderer.RenderSprites">
            <summary>
            Renders the sprites.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Rendering.SpriteRenderer.SortSprites">
            <summary>
            Sort the sprites.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Rendering.SpriteRenderer.TransformCoordinate(System.Int32@,System.Int32@)">
            <summary>
            Transforms a screen coordinate to a viewport coordinate.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <returns><c>true</c> if the coordinate is inside the viewport; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Miyagi.Common.Rendering.SpriteRenderer.TransformCoordinate(Miyagi.Common.Data.Point)">
            <summary>
            Transforms a screen coordinate to a viewport coordinate.
            </summary>
            <param name="p">The coordinate.</param>
            <returns>The transformed coordinate.</returns>
        </member>
        <member name="M:Miyagi.Common.Rendering.SpriteRenderer.Dispose(System.Boolean)">
            <summary>
            Disposes the sprite renderer.
            </summary>
            <param name="disposing">Whether Dispose has been called.</param>
        </member>
        <member name="M:Miyagi.Common.Rendering.SpriteRenderer.OnCacheToTextureChanged">
            <summary>
            Called when <see cref="P:Miyagi.Common.Rendering.SpriteRenderer.CacheToTexture"/> changes.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Rendering.SpriteRenderer.OnViewportChanged">
            <summary>
            Called when <see cref="P:Miyagi.Common.Rendering.SpriteRenderer.Viewport"/> changes.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.SpriteRenderer.BufferDirty">
            <summary>
            Gets or sets a value indicating whether the buffer is dirty.
            </summary>
            <value><c>true</c> if the buffer is dirty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Miyagi.Common.Rendering.SpriteRenderer.CacheToTexture">
            <summary>
            Gets or sets a value indicating whether the sprite renderer should cache to texture.
            </summary>
            <value></value>
        </member>
        <member name="P:Miyagi.Common.Rendering.SpriteRenderer.HardwareBufferCapacity">
            <summary>
            Gets the hardware buffer capacity.
            </summary>
            <value>An <see cref="T:System.Int32"/> representing the hardware buffer capacity.</value>
        </member>
        <member name="P:Miyagi.Common.Rendering.SpriteRenderer.RenderManager">
            <summary>
            Gets the owning RenderManager.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.SpriteRenderer.SpriteOrderDirty">
            <summary>
            Gets or sets a value indicating whether the sprite list needs to be sorted.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.SpriteRenderer.Viewport">
            <summary>
            Gets or sets the viewport.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.SpriteRenderer.ZOrder">
            <summary>
            Gets or sets the zorder.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.SpriteRenderer.SpriteList">
            <summary>
            Gets the list of sprites.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.SpriteRenderer.TriangleCount">
            <summary>
            Gets or sets the number of triangles.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Rendering.SpriteRenderer.VertexCount">
            <summary>
            Gets or sets the vertex count.
            </summary>
            <value>The vertex count.</value>
        </member>
        <member name="T:Miyagi.Common.InputManager">
            <summary>
            An InputManager.
            </summary>
        </member>
        <member name="M:Miyagi.Common.InputManager.#ctor(Miyagi.Common.MiyagiSystem)">
            <summary>
            Initializes a new instance of the InputManager class.
            </summary>
            <param name="system">The MiyagiSystem.</param>
        </member>
        <member name="M:Miyagi.Common.InputManager.Dispose">
            <summary>
            Releases the unmanaged resources used by the InputManager.
            </summary>
        </member>
        <member name="M:Miyagi.Common.InputManager.Initialize">
            <summary>
            Initializes the manager.
            </summary>
        </member>
        <member name="M:Miyagi.Common.InputManager.InjectKeyDown(Miyagi.Common.Events.KeyEvent)">
            <summary>
            Injects a pressed key.
            </summary>
            <param name="keyEvent">The KeyEvent.</param>
        </member>
        <member name="M:Miyagi.Common.InputManager.InjectKeyHeld">
            <summary>
            Injects a held key.
            </summary>
        </member>
        <member name="M:Miyagi.Common.InputManager.InjectKeyUp(Miyagi.Common.Events.KeyEvent)">
            <summary>
            Injects a released key.
            </summary>
            <param name="keyEvent">The KeyEvent.</param>
        </member>
        <member name="M:Miyagi.Common.InputManager.InjectMouseDown(Miyagi.Common.MouseButton)">
            <summary>
            Injects a pressed mouse button.
            </summary>
            <param name="mb">The mouse button.</param>
        </member>
        <member name="M:Miyagi.Common.InputManager.InjectMouseHeld">
            <summary>
            Injects a held mouse button.
            </summary>
        </member>
        <member name="M:Miyagi.Common.InputManager.InjectMouseUp(Miyagi.Common.MouseButton)">
            <summary>
            Injects a released mouse button.
            </summary>
            <param name="mb">The mouse button.</param>
        </member>
        <member name="M:Miyagi.Common.InputManager.InjectMouseWheelMoved(System.Int32)">
            <summary>
            Injects mouse wheel movement.
            </summary>
            <param name="delta">The movement of the wheel.</param>
        </member>
        <member name="M:Miyagi.Common.InputManager.IsAnyMouseButtonDown">
            <summary>
            Determines whether any mouse button is down.
            </summary>
            <returns>
            <c>true</c> if any mouse button is down; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Miyagi.Common.InputManager.IsMouseButtonDown(Miyagi.Common.MouseButton)">
            <summary>
            Gets whether the specified MouseButton is down.
            </summary>
            <param name="mb">The MouseButton.</param>
            <returns><c>true</c> if the MouseButton is down; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Miyagi.Common.InputManager.Update">
            <summary>
            Captures the input devices.
            </summary>
        </member>
        <member name="M:Miyagi.Common.InputManager.Capture">
            <summary>
            Captures the input devices.
            </summary>
        </member>
        <member name="M:Miyagi.Common.InputManager.Dispose(System.Boolean)">
            <summary>
            Disposes the InputManager.
            </summary>
            <param name="disposing">Whether Dispose has been called.</param>
        </member>
        <member name="M:Miyagi.Common.InputManager.OnMouseMoved(Miyagi.Common.Data.Point,Miyagi.Common.Data.Point)">
            <summary>
            Handles mouse moves.
            </summary>
            <param name="oldLocation">The old mouse location.</param>
            <param name="newLocation">The new mouse location.</param>
        </member>
        <member name="E:Miyagi.Common.InputManager.CaptureRequested">
            <summary>
            Occurs when the capture of input devices is requested.
            </summary>
        </member>
        <member name="E:Miyagi.Common.InputManager.Disposing">
            <summary>
            Occurs when the InputManager is disposing.
            </summary>
        </member>
        <member name="E:Miyagi.Common.InputManager.KeyDown">
            <summary>
            Occurs when a key is released.
            </summary>
        </member>
        <member name="E:Miyagi.Common.InputManager.KeyHeld">
            <summary>
            Occurs when a key is held.
            </summary>
        </member>
        <member name="E:Miyagi.Common.InputManager.KeyUp">
            <summary>
            Occurs when a key is released.
            </summary>
        </member>
        <member name="E:Miyagi.Common.InputManager.MouseDown">
            <summary>
            Occurs when a mouse button is pressed.
            </summary>
        </member>
        <member name="E:Miyagi.Common.InputManager.MouseGestureRecognized">
            <summary>
            Occurs when a mouse gesture has been recognized.
            </summary>
        </member>
        <member name="E:Miyagi.Common.InputManager.MouseHeld">
            <summary>
            Occurs when a mouse button is held.
            </summary>
        </member>
        <member name="E:Miyagi.Common.InputManager.MouseLocationChanged">
            <summary>
            Occurs when the MouseLocation property changes.
            </summary>
        </member>
        <member name="E:Miyagi.Common.InputManager.MouseUp">
            <summary>
            Occurs when a mouse button is released.
            </summary>
        </member>
        <member name="E:Miyagi.Common.InputManager.MouseWheelMoved">
            <summary>
            Occurs when the mouse wheel is moved.
            </summary>
        </member>
        <member name="P:Miyagi.Common.InputManager.FlowTime">
            <summary>
            Gets or sets the waiting time for automatically repeating held keys or mouse buttons.
            </summary>
        </member>
        <member name="P:Miyagi.Common.InputManager.HeldWaitTime">
            <summary>
            Gets or sets the time to wait until a key or mouse button is considered hold.
            </summary>
        </member>
        <member name="P:Miyagi.Common.InputManager.CaptureOnUpdate">
            <summary>
            Gets or sets a value indicating whether the input devices are captured on update.
            </summary>
            <remarks>Default is true.</remarks>
        </member>
        <member name="P:Miyagi.Common.InputManager.CursorClipArea">
            <summary>
            Gets or sets the area within which the mouse cursor will be confined.
            </summary>
            <remarks>If set to null, the mouse cursor does not get clipped.</remarks>
        </member>
        <member name="P:Miyagi.Common.InputManager.IsDisposed">
            <summary>
            Gets a value indicating whether the manager has been disposed.
            </summary>
            <value></value>
        </member>
        <member name="P:Miyagi.Common.InputManager.MouseDoubleClickSpeed">
            <summary>
            Gets or sets the threshold for recognising mouse double-clicks.
            </summary>
            <remarks>Default is 500 ms.</remarks>
        </member>
        <member name="P:Miyagi.Common.InputManager.MouseGestureMinDistance">
            <summary>
            Gets or sets the minimum distance the mouse position has to change before a mouse gesture is recognized.
            </summary>
        </member>
        <member name="P:Miyagi.Common.InputManager.MouseGesturesButton">
            <summary>
            Gets or sets the default MouseButton that needs to be pressed for mouse gestures.
            </summary>
            <remarks>Default is <see cref="F:Miyagi.Common.MouseButton.Right"/>.</remarks>
        </member>
        <member name="P:Miyagi.Common.InputManager.MouseGestureSegmentsAngle">
            <summary>
            Gets or sets the size of the mouse gesture segments in degrees.
            </summary>
            <remarks>Default is 120.</remarks>
        </member>
        <member name="P:Miyagi.Common.InputManager.MouseLocation">
            <summary>
            Gets or sets the location of the mouse.
            </summary>
        </member>
        <member name="P:Miyagi.Common.InputManager.MouseSelectButton">
            <summary>
            Gets or sets the default MouseButton for selecting a control.
            </summary>
            <remarks>Default is <see cref="F:Miyagi.Common.MouseButton.Left"/>.</remarks>
        </member>
        <member name="P:Miyagi.Common.InputManager.Type">
            <summary>
            Gets the type of the manager.
            </summary>
        </member>
        <member name="P:Miyagi.Common.InputManager.MiyagiSystem">
            <summary>
            Gets the MiyagiSystem.
            </summary>
        </member>
        <member name="T:Miyagi.Common.Animation.PowerFunctionValueController`1">
            <summary>
            A ValueController with changes a value according to  a power function.
            </summary>
            <typeparam name = "T">The type of the value.</typeparam>
        </member>
        <member name="T:Miyagi.Common.Animation.ValueController`1">
            <summary>
            The base ValueController.
            </summary>
            <typeparam name = "T">The type of the value.</typeparam>
        </member>
        <member name="M:Miyagi.Common.Animation.ValueController`1.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the ValueController class.
            </summary>
            <param name="duration">A TimeSpan representing the duration.</param>
        </member>
        <member name="M:Miyagi.Common.Animation.ValueController`1.Start(Miyagi.Common.MiyagiSystem,System.Boolean,Miyagi.Common.Animation.SetterDelegate{`0})">
            <summary>
            Starts the ValueController.
            </summary>
            <param name="system">The MiyagiSystem.</param>
            <param name="autoUpdate">Indicates whether the ValueController should update itself.</param>
            <param name="setter">The setter delegate for the value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="setter"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Miyagi.Common.Animation.ValueController`1.Start(Miyagi.Common.MiyagiSystem,System.Boolean,System.String,System.Object)">
            <summary>
            Starts the ValueController.
            </summary>
            <param name="system">The MiyagiSystem.</param>
            <param name="autoUpdate">Indicates whether the ValueController should update itself.</param>
            <param name="propertyName">The name of the property which value should be changed.</param>
            <param name="obj">The object which property should be changed.</param>
            <exception cref="T:System.ArgumentException">propertyName</exception>
        </member>
        <member name="M:Miyagi.Common.Animation.ValueController`1.Stop">
            <summary>
            Stops the ValueController.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Animation.ValueController`1.Update">
            <summary>
            Updated the ValueController.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Animation.ValueController`1.GetValue">
            <summary>
            Gets the current value.
            </summary>
            <returns>An object representing the current value.</returns>
        </member>
        <member name="M:Miyagi.Common.Animation.ValueController`1.OnFinished(System.EventArgs)">
            <summary>
            Raises the Finished event.
            </summary>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Miyagi.Common.Animation.ValueController`1.OnStart(System.EventArgs)">
            <summary>
            Raises the Started event.
            </summary>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Miyagi.Common.Animation.ValueController`1.OnUpdate(System.EventArgs)">
            <summary>
            Raises the Updated event.
            </summary>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="E:Miyagi.Common.Animation.ValueController`1.Finished">
            <summary>
            Occurs when the ValueController has finished.
            </summary>
        </member>
        <member name="E:Miyagi.Common.Animation.ValueController`1.Started">
            <summary>
            Occurs when the ValueController has started.
            </summary>
        </member>
        <member name="E:Miyagi.Common.Animation.ValueController`1.Updated">
            <summary>
            Occurs when the ValueController has been updated.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Animation.ValueController`1.IsRunning">
            <summary>
            Gets a value indicating whether the ValueController is running.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Animation.ValueController`1.AutoUpdate">
            <summary>
            Gets a value indicating whether the ValueController should update itself.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Animation.ValueController`1.Duration">
            <summary>
            Gets or sets the duration.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Animation.ValueController`1.ElapsedPercentage">
            <summary>
            Gets the ratio of elapsed time and duration.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Animation.ValueController`1.ElapsedTime">
            <summary>
            Gets the elapsed time.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Animation.ValueController`1.MiyagiSystem">
            <summary>
            Gets or sets the MiyagiSystem.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Animation.ValueController`1.StartTime">
            <summary>
            Gets or sets the start time.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Animation.PowerFunctionValueController`1.#ctor(`0,`0,System.Single,System.TimeSpan)">
            <summary>
            Initializes a new instance of the PowerFunctionValueController class.
            </summary>
            <param name="startValue">The start value.</param>
            <param name="endValue">The end value.</param>
            <param name="exponent">The exponent of the power function.</param>
            <param name="duration">A TimeSpan representing the duration.</param>
        </member>
        <member name="M:Miyagi.Common.Animation.PowerFunctionValueController`1.GetValue">
            <summary>
            Gets the value.
            </summary>
            <returns>A object representing the value.</returns>
        </member>
        <member name="P:Miyagi.Common.Animation.PowerFunctionValueController`1.Exponent">
            <summary>
            Gets the exponent of the power function.
            </summary>
        </member>
        <member name="T:Miyagi.Common.Animation.ValueControllerChain`1">
            <summary>
            A chain of ValueControllers.
            </summary>
            <typeparam name = "T">The type of the value.</typeparam>
        </member>
        <member name="M:Miyagi.Common.Animation.ValueControllerChain`1.#ctor">
            <summary>
            Initializes a new instance of the ValueControllerChain class.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Animation.ValueControllerChain`1.#ctor(Miyagi.Common.MiyagiSystem,System.Boolean)">
            <summary>
            Initializes a new instance of the ValueControllerChain class.
            </summary>
            <param name="system">The MiyagiSystem.</param>
            <param name="autoUpdate">Indicates whether the ValueControllerChain should update itself.</param>
        </member>
        <member name="M:Miyagi.Common.Animation.ValueControllerChain`1.#ctor(Miyagi.Common.MiyagiSystem,System.Boolean,Miyagi.Common.Animation.SetterDelegate{`0})">
            <summary>
            Initializes a new instance of the ValueControllerChain class.
            </summary>
            <param name="system">The MiyagiSystem.</param>
            <param name="autoUpdate">Indicates whether the ValueControllerChain should update itself.</param>
            <param name="commonSetterDelegate">The common setter delegate.</param>
        </member>
        <member name="M:Miyagi.Common.Animation.ValueControllerChain`1.AddValueController(System.Int32,Miyagi.Common.Animation.ValueController{`0})">
            <summary>
            Adds a ValueController to the ValueControllerChain.
            </summary>
            <param name="layer">The layer of the ValueController</param>
            <param name="valueController">The ValueController.</param>
            <remarks>ValueController on the same layer are started simultaneously.</remarks>
        </member>
        <member name="M:Miyagi.Common.Animation.ValueControllerChain`1.AddValueController(System.Int32,Miyagi.Common.Animation.ValueController{`0},Miyagi.Common.Animation.SetterDelegate{`0})">
            <summary>
            Adds a ValueController to the ValueControllerChain.
            </summary>
            <param name="layer">The layer of the ValueController</param>
            <param name="valueController">The ValueController.</param>
            <param name="setterDelegate">The setter delegate.</param>
            <remarks>ValueController on the same layer are started simultaneously.</remarks>
            <exception cref="T:System.ArgumentNullException">Argument is null.</exception>
        </member>
        <member name="M:Miyagi.Common.Animation.ValueControllerChain`1.Start">
            <summary>
            Starts the ValueControllerChain.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Animation.ValueControllerChain`1.Stop">
            <summary>
            Stops the ValueControllerChain.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Animation.ValueControllerChain`1.Update">
            <summary>
            Updates the ValueControllerChain.
            </summary>
        </member>
        <member name="E:Miyagi.Common.Animation.ValueControllerChain`1.Finished">
            <summary>
            Occurs when the ValueControllerChain has finished.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Animation.ValueControllerChain`1.IsRunning">
            <summary>
            Gets a value indicating whether the ValueControllerChain is running.
            </summary>
        </member>
        <member name="T:Miyagi.Common.Animation.WaypointController">
            <summary>
            A ValueController for point values describing describing a path along multiple waypoints.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Animation.WaypointController.#ctor(Miyagi.Common.Data.Point)">
            <summary>
            Initializes a new instance of the WaypointController class.
            </summary>
            <param name="startPoint">The starting point.</param>
        </member>
        <member name="M:Miyagi.Common.Animation.WaypointController.AddWaypoint(Miyagi.Common.Data.Point)">
            <summary>
            Adds a waypoint.
            </summary>
            <param name="point">The waypoint position.</param>
        </member>
        <member name="M:Miyagi.Common.Animation.WaypointController.AddWaypoint(Miyagi.Common.Data.Point,System.Nullable{System.TimeSpan})">
            <summary>
            Adds a waypoint.
            </summary>
            <param name="point">The waypoint position.</param>
            <param name="duration">A TimeSpan describing the time it should take to reach the waypoint.</param>
        </member>
        <member name="M:Miyagi.Common.Animation.WaypointController.GetValue">
            <summary>
            Gets the value.
            </summary>
            <returns>A object representing the value.</returns>
        </member>
        <member name="M:Miyagi.Common.Animation.WaypointController.OnFinished(System.EventArgs)">
            <summary>
            Raises the Finished event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Miyagi.Common.Animation.WaypointController.OnStart(System.EventArgs)">
            <summary>
            Is called on startup.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="P:Miyagi.Common.Animation.WaypointController.Progression">
            <summary>
            Gets or sets the progression of the animation speed.
            </summary>
        </member>
        <member name="T:Miyagi.Common.Animation.TriangleWaveValueController`1">
            <summary>
            A ValueController describing a triange wave.
            </summary>
            <typeparam name = "T">The type of the value.</typeparam>
        </member>
        <member name="T:Miyagi.Common.Animation.WaveValueController`1">
            <summary>
            The base class for ValueController which describe wave.
            </summary>
            <typeparam name = "T">The type of the value.</typeparam>
        </member>
        <member name="M:Miyagi.Common.Animation.WaveValueController`1.#ctor(`0,`0,System.Single,System.Single,System.TimeSpan)">
            <summary>
            Initializes a new instance of the WaveValueController class.
            </summary>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="frequency">The frequency of the wave.</param>
            <param name="phase">The phase of the wave.</param>
            <param name="duration">A TimeSpan representing the duration.</param>
        </member>
        <member name="M:Miyagi.Common.Animation.WaveValueController`1.GetValue">
            <summary>
            Gets the value.
            </summary>
            <returns>A object representing the value.</returns>
        </member>
        <member name="M:Miyagi.Common.Animation.WaveValueController`1.GetValueCore">
            <summary>
            Gets the value.
            </summary>
            <returns>A object representing the value.</returns>
        </member>
        <member name="P:Miyagi.Common.Animation.WaveValueController`1.Min">
            <summary>
            Gets or sets the minimum.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Animation.WaveValueController`1.Range">
            <summary>
            Gets or sets the range of the wave.
            </summary>
        </member>
        <member name="P:Miyagi.Common.Animation.WaveValueController`1.Time">
            <summary>
            Gets the time.
            </summary>
        </member>
        <member name="M:Miyagi.Common.Animation.TriangleWaveValueController`1.#ctor(`0,`0,System.Single,System.Single,System.TimeSpan)">
            <summary>
            Initializes a new instance of the TriangleWaveValueController class.
            </summary>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="frequency">The frequency of the wave.</param>
            <param name="phase">The phase of the wave.</param>
            <param name="duration">A TimeSpan representing the duration.</param>
        </member>
        <member name="M:Miyagi.Common.Animation.TriangleWaveValueController`1.#ctor(`0,`0,System.TimeSpan)">
            <summary>
            Initializes a new instance of the TriangleWaveValueController class.
            </summary>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="duration">A TimeSpan representing the duration.</param>
        </member>
        <member name="M:Miyagi.Common.Animation.TriangleWaveValueController`1.GetValueCore">
            <summary>
            Gets the value.
            </summary>
            <returns>A object representing the value.</returns>
        </member>
        <member name="T:Miyagi.Common.Animation.SquareWaveValueController`1">
            <summary>
            A ValueController describing a square wave.
            </summary>
            <typeparam name = "T">The type of the value.</typeparam>
        </member>
        <member name="M:Miyagi.Common.Animation.SquareWaveValueController`1.#ctor(`0,`0,System.Single,System.Single,System.TimeSpan)">
            <summary>
            Initializes a new instance of the SquareWaveValueController class.
            </summary>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="frequency">The frequency of the wave.</param>
            <param name="phase">The phase of the wave.</param>
            <param name="duration">A TimeSpan representing the duration.</param>
        </member>
        <member name="M:Miyagi.Common.Animation.SquareWaveValueController`1.#ctor(`0,`0,System.TimeSpan)">
            <summary>
            Initializes a new instance of the SquareWaveValueController class.
            </summary>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="duration">A TimeSpan representing the duration.</param>
        </member>
        <member name="M:Miyagi.Common.Animation.SquareWaveValueController`1.GetValueCore">
            <summary>
            Gets the value.
            </summary>
            <returns>A object representing the value.</returns>
        </member>
        <member name="T:Miyagi.Common.Animation.SawtoothWaveValueController`1">
            <summary>
            A ValueController describing a sawtooth wave.
            </summary>
            <typeparam name = "T">The type of the value.</typeparam>
        </member>
        <member name="M:Miyagi.Common.Animation.SawtoothWaveValueController`1.#ctor(`0,`0,System.Single,System.Single,System.TimeSpan)">
            <summary>
            Initializes a new instance of the SawtoothWaveValueController class.
            </summary>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="frequency">The frequency of the wave.</param>
            <param name="phase">The phase of the wave.</param>
            <param name="duration">A TimeSpan representing the duration.</param>
        </member>
        <member name="M:Miyagi.Common.Animation.SawtoothWaveValueController`1.#ctor(`0,`0,System.TimeSpan)">
            <summary>
            Initializes a new instance of the SawtoothWaveValueController class.
            </summary>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="duration">A TimeSpan representing the duration.</param>
        </member>
        <member name="M:Miyagi.Common.Animation.SawtoothWaveValueController`1.GetValueCore">
            <summary>
            Gets the value.
            </summary>
            <returns>A object representing the value.</returns>
        </member>
        <member name="T:Miyagi.Common.Animation.LinearFunctionValueController`1">
            <summary>
            A ValueController with linear progression.
            </summary>
            <typeparam name = "T">The type of the value.</typeparam>
        </member>
        <member name="M:Miyagi.Common.Animation.LinearFunctionValueController`1.#ctor(`0,`0,System.TimeSpan)">
            <summary>
            Initializes a new instance of the LinearFunctionValueController class.
            </summary>
            <param name="startValue">The start value.</param>
            <param name="endValue">The end value.</param>
            <param name="duration">A TimeSpan representing the duration.</param>
        </member>
        <member name="T:Miyagi.Common.Animation.SineWaveValueController`1">
            <summary>
            A ValueController describing a sine wave.
            </summary>
            <typeparam name = "T">The type of the value.</typeparam>
        </member>
        <member name="M:Miyagi.Common.Animation.SineWaveValueController`1.#ctor(`0,`0,System.Single,System.Single,System.TimeSpan)">
            <summary>
            Initializes a new instance of the SineWaveValueController class.
            </summary>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="frequency">The frequency of the wave.</param>
            <param name="phase">The phase of the wave.</param>
            <param name="duration">A TimeSpan representing the duration.</param>
        </member>
        <member name="M:Miyagi.Common.Animation.SineWaveValueController`1.#ctor(`0,`0,System.TimeSpan)">
            <summary>
            Initializes a new instance of the SineWaveValueController class.
            </summary>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="duration">A TimeSpan representing the duration.</param>
        </member>
        <member name="M:Miyagi.Common.Animation.SineWaveValueController`1.GetValueCore">
            <summary>
            Gets the value.
            </summary>
            <returns>A object representing the value.</returns>
        </member>
        <member name="T:Miyagi.Common.Animation.SetterDelegate`1">
            <summary>
            The setter delegate for ValueControllers.
            </summary>
            <param name="obj">The new value.</param>
            <typeparam name = "T">The type of the value.</typeparam>
        </member>
        <member name="T:Miyagi.TwoD.Layers.Layer">
            <summary>
            A 2D layer that can display multiple 2D elements.
            </summary>
        </member>
        <member name="M:Miyagi.TwoD.Layers.Layer.#ctor">
            <summary>
            Initializes a new instance of the Layer class.
            </summary>
        </member>
        <member name="M:Miyagi.TwoD.Layers.Layer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Layer class.
            </summary>
            <param name="name">The name of the element.</param>
        </member>
        <member name="M:Miyagi.TwoD.Layers.Layer.Finalize">
            <summary>
            Finalizes an instance of the Layer class.
            </summary>
        </member>
        <member name="M:Miyagi.TwoD.Layers.Layer.DestroyRenderer">
            <summary>
            Destroys the renderer.
            </summary>
        </member>
        <member name="M:Miyagi.TwoD.Layers.Layer.Dispose">
            <summary>
            Disposes the Layer.
            </summary>
        </member>
        <member name="M:Miyagi.TwoD.Layers.Layer.GetElement``1(System.String)">
            <summary>
            Gets an element of the specified type by name.
            </summary>
            <param name="name">The name of the element.</param>
            <returns>The first element of that name and type if it exists, otherwise null.</returns>
            <typeparam name="T">The type of the element.</typeparam>
        </member>
        <member name="M:Miyagi.TwoD.Layers.Layer.GetElement(System.String)">
            <summary>
            Gets a element by name.
            </summary>
            <param name="name">The name of the element.</param>
            <returns>If it exists the first element with that name, otherwise null.</returns>
        </member>
        <member name="M:Miyagi.TwoD.Layers.Layer.Update">
            <summary>
            Updates the Layer.
            </summary>
        </member>
        <member name="M:Miyagi.TwoD.Layers.Layer.Dispose(System.Boolean)">
            <summary>
            Disposes the Layer.
            </summary>
            <param name="disposing">Whether Dispose has been called.</param>
        </member>
        <member name="P:Miyagi.TwoD.Layers.Layer.Elements">
            <summary>
            Gets the list of elements.
            </summary>
        </member>
        <member name="P:Miyagi.TwoD.Layers.Layer.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Miyagi.TwoD.Layers.Layer.SpriteRenderer">
            <summary>
            Gets the SpriteRenderer.
            </summary>
        </member>
        <member name="P:Miyagi.TwoD.Layers.Layer.TwoDManager">
            <summary>
            Gets the TwoDManager.
            </summary>
        </member>
        <member name="T:Miyagi.TwoD.Layers.LayerElement">
            <summary>
            The abstract base class for layer elements.
            </summary>
        </member>
        <member name="M:Miyagi.TwoD.Layers.LayerElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Element class.
            </summary>
            <param name="name">The name of the element.</param>
        </member>
        <member name="M:Miyagi.TwoD.Layers.LayerElement.Dispose">
            <summary>
            Disposes the Element.
            </summary>
        </member>
        <member name="M:Miyagi.TwoD.Layers.LayerElement.Update">
            <summary>
            Updates the Element.
            </summary>
        </member>
        <member name="M:Miyagi.TwoD.Layers.LayerElement.DestroyElement">
            <summary>
            Destroys the Element.
            </summary>
        </member>
        <member name="M:Miyagi.TwoD.Layers.LayerElement.Dispose(System.Boolean)">
            <summary>
            Disposes the Element.
            </summary>
            <param name="disposing">Whether Dispose has been called.</param>
        </member>
        <member name="P:Miyagi.TwoD.Layers.LayerElement.Layer">
            <summary>
            Gets the Layer.
            </summary>
        </member>
        <member name="P:Miyagi.TwoD.Layers.LayerElement.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Miyagi.TwoD.Layers.LayerElement.ViewportSize">
            <summary>
            Gets the size of the viewport.
            </summary>
        </member>
        <member name="T:Miyagi.TwoD.Layers.Overlay">
            <summary>
            The abstract base class for 2D overlays.
            </summary>
        </member>
        <member name="M:Miyagi.TwoD.Layers.Overlay.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Overlay class.
            </summary>
            <param name="name">The name of the element.</param>
        </member>
        <member name="M:Miyagi.TwoD.Layers.Overlay.Update">
            <summary>
            Updates the Overlay.
            </summary>
        </member>
        <member name="M:Miyagi.TwoD.Layers.Overlay.DestroyElement">
            <summary>
            Destroys the Overlay.
            </summary>
        </member>
        <member name="M:Miyagi.TwoD.Layers.Overlay.OnBoundsChanged">
            <summary>
            Handles bounds changes.
            </summary>
        </member>
        <member name="M:Miyagi.TwoD.Layers.Overlay.OnOpacityChanged">
            <summary>
            Handles opacity changes.
            </summary>
        </member>
        <member name="M:Miyagi.TwoD.Layers.Overlay.OnVisibleChanged">
            <summary>
            Handles visibility changes.
            </summary>
        </member>
        <member name="P:Miyagi.TwoD.Layers.Overlay.Location">
            <summary>
            Gets or sets the location.
            </summary>
        </member>
        <member name="P:Miyagi.TwoD.Layers.Overlay.Opacity">
            <summary>
            Gets or sets the opacity.
            </summary>
        </member>
        <member name="P:Miyagi.TwoD.Layers.Overlay.Rotation">
            <summary>
            Gets or sets the rotation in degrees.
            </summary>
        </member>
        <member name="P:Miyagi.TwoD.Layers.Overlay.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
        </member>
        <member name="P:Miyagi.TwoD.Layers.Overlay.ScaleX">
            <summary>
            Gets or sets the horizontal scale.
            </summary>
        </member>
        <member name="P:Miyagi.TwoD.Layers.Overlay.ScaleY">
            <summary>
            Gets or sets the vertical scale.
            </summary>
        </member>
        <member name="P:Miyagi.TwoD.Layers.Overlay.Skew">
            <summary>
            Gets or sets the skew.
            </summary>
        </member>
        <member name="P:Miyagi.TwoD.Layers.Overlay.SkewX">
            <summary>
            Gets or sets the horizontal skew.
            </summary>
        </member>
        <member name="P:Miyagi.TwoD.Layers.Overlay.SkewY">
            <summary>
            Gets or sets the vertical skew.
            </summary>
        </member>
        <member name="P:Miyagi.TwoD.Layers.Overlay.Translation">
            <summary>
            Gets or sets the translation.
            </summary>
        </member>
        <member name="P:Miyagi.TwoD.Layers.Overlay.TranslationX">
            <summary>
            Gets or sets the horizontal translation.
            </summary>
        </member>
        <member name="P:Miyagi.TwoD.Layers.Overlay.TranslationY">
            <summary>
            Gets or sets the vertical translation.
            </summary>
        </member>
        <member name="P:Miyagi.TwoD.Layers.Overlay.Visible">
            <summary>
            Gets or sets a value indicating whether the Overlay is visible.
            </summary>
        </member>
        <member name="P:Miyagi.TwoD.Layers.Overlay.ZOrder">
            <summary>
            Gets or sets the Z-order.
            </summary>
        </member>
        <member name="P:Miyagi.TwoD.Layers.Overlay.Pivot">
            <summary>
            Gets the pivot point.
            </summary>
        </member>
        <member name="P:Miyagi.TwoD.Layers.Overlay.Sprite">
            <summary>
            Gets or sets the sprite.
            </summary>
        </member>
        <member name="T:Miyagi.TwoD.Layers.TextOverlay">
            <summary>
            A simple 2D overlay for displaying text.
            </summary>
        </member>
        <member name="M:Miyagi.TwoD.Layers.TextOverlay.#ctor">
            <summary>
            Initializes a new instance of the TextOverlay class.
            </summary>
        </member>
        <member name="M:Miyagi.TwoD.Layers.TextOverlay.#ctor(System.String)">
            <summary>
            Initializes a new instance of the TextOverlay class.
            </summary>
            <param name="name">The name of the TextOverlay.</param>
        </member>
        <member name="M:Miyagi.TwoD.Layers.TextOverlay.Update">
            <summary>
            Updates the TextOverlay.
            </summary>
        </member>
        <member name="M:Miyagi.TwoD.Layers.TextOverlay.Dispose(System.Boolean)">
            <summary>
            Disposes the TextOverlay.
            </summary>
            <param name="disposing">Whether Dispose has been called.</param>
        </member>
        <member name="P:Miyagi.TwoD.Layers.TextOverlay.Bounds">
            <summary>
            Gets or sets the size.
            </summary>
        </member>
        <member name="P:Miyagi.TwoD.Layers.TextOverlay.ColourDefinition">
            <summary>
            Gets or sets the text colour.
            </summary>
        </member>
        <member name="P:Miyagi.TwoD.Layers.TextOverlay.Font">
            <summary>
            Gets or sets the font.
            </summary>
        </member>
        <member name="P:Miyagi.TwoD.Layers.TextOverlay.Text">
            <summary>
            Gets or sets the displayed text.
            </summary>
        </member>
        <member name="P:Miyagi.TwoD.Layers.TextOverlay.Pivot">
            <summary>
            Gets the pivot point.
            </summary>
        </member>
        <member name="T:Miyagi.TwoD.Layers.TextureOverlay">
            <summary>
            A simple 2D overlay for displaying a Texture.
            </summary>
        </member>
        <member name="M:Miyagi.TwoD.Layers.TextureOverlay.#ctor">
            <summary>
            Initializes a new instance of the TextureOverlay class.
            </summary>
        </member>
        <member name="M:Miyagi.TwoD.Layers.TextureOverlay.#ctor(System.String)">
            <summary>
            Initializes a new instance of the TextureOverlay class.
            </summary>
            <param name="name">The name of the TextureOverlay.</param>
        </member>
        <member name="M:Miyagi.TwoD.Layers.TextureOverlay.Update">
            <summary>
            Updates the TextureOverlay.
            </summary>
        </member>
        <member name="M:Miyagi.TwoD.Layers.TextureOverlay.OnBoundsChanged">
            <summary>
            Handles bounds changes.
            </summary>
        </member>
        <member name="P:Miyagi.TwoD.Layers.TextureOverlay.Size">
            <summary>
            Gets or sets the size.
            </summary>
        </member>
        <member name="P:Miyagi.TwoD.Layers.TextureOverlay.Texture">
            <summary>
            Gets or sets the Texture.
            </summary>
        </member>
        <member name="P:Miyagi.TwoD.Layers.TextureOverlay.CurrentFrame">
            <summary>
            Gets the current frame.
            </summary>
        </member>
        <member name="P:Miyagi.TwoD.Layers.TextureOverlay.CurrentUV">
            <summary>
            Gets the current uv-coordinates.
            </summary>
        </member>
        <member name="P:Miyagi.TwoD.Layers.TextureOverlay.Pivot">
            <summary>
            Gets the pivot point.
            </summary>
        </member>
        <member name="P:Miyagi.TwoD.Layers.TextureOverlay.Rectangle">
            <summary>
            Gets a Rectangle representing the bounds of the TextureOverlay.
            </summary>
        </member>
        <member name="T:Miyagi.TwoD.Layers.TileMap">
            <summary>
            A 2d overlay composed of tiles.
            </summary>
        </member>
        <member name="M:Miyagi.TwoD.Layers.TileMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.TwoD.Layers.TileMap"/> class.
            </summary>
        </member>
        <member name="M:Miyagi.TwoD.Layers.TileMap.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.TwoD.Layers.TileMap"/> class.
            </summary>
            <param name="name">The name of the element.</param>
        </member>
        <member name="M:Miyagi.TwoD.Layers.TileMap.Update">
            <summary>
            Updates the Element.
            </summary>
        </member>
        <member name="M:Miyagi.TwoD.Layers.TileMap.DestroyElement">
            <summary>
            Destroys the Element.
            </summary>
        </member>
        <member name="M:Miyagi.TwoD.Layers.TileMap.Dispose(System.Boolean)">
            <summary>
            Disposes the Element.
            </summary>
            <param name="disposing">Whether Dispose has been called.</param>
        </member>
        <member name="P:Miyagi.TwoD.Layers.TileMap.Location">
            <summary>
            Gets or sets the location.
            </summary>
        </member>
        <member name="P:Miyagi.TwoD.Layers.TileMap.Map">
            <summary>
            Gets or sets the map.
            </summary>
            <value>The map.</value>
        </member>
        <member name="P:Miyagi.TwoD.Layers.TileMap.Textures">
            <summary>
            Gets or sets the textures.
            </summary>
            <value>The textures.</value>
        </member>
        <member name="P:Miyagi.TwoD.Layers.TileMap.TileSize">
            <summary>
            Gets or sets the size of a tile.
            </summary>
        </member>
        <member name="T:Miyagi.TwoD.Painting.GradientBrush">
            <summary>
            A brush representing a gradient.
            </summary>
        </member>
        <member name="T:Miyagi.TwoD.Painting.IBrush">
            <summary>
            Defines methods for brushes.
            </summary>
        </member>
        <member name="M:Miyagi.TwoD.Painting.IBrush.Apply(Miyagi.TwoD.TwoDSprite)">
            <summary>
            Applies the brush to the specified sprite.
            </summary>
            <param name="sprite">The sprite.</param>
        </member>
        <member name="M:Miyagi.TwoD.Painting.GradientBrush.#ctor(Miyagi.Common.Data.Colour[])">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.TwoD.Painting.GradientBrush"/> class.
            </summary>
            <param name="colours">The colours.</param>
        </member>
        <member name="M:Miyagi.TwoD.Painting.GradientBrush.#ctor(Miyagi.Common.Data.ColourDefinition)">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.TwoD.Painting.GradientBrush"/> class.
            </summary>
            <param name="colour">The colour.</param>
        </member>
        <member name="M:Miyagi.TwoD.Painting.GradientBrush.Apply(Miyagi.TwoD.TwoDSprite)">
            <summary>
            Applies the brush to the specified sprite.
            </summary>
            <param name="sprite">The sprite.</param>
        </member>
        <member name="T:Miyagi.TwoD.Painting.Painter">
            <summary>
            Provides basic methods for drawing abstract objects.
            </summary>
        </member>
        <member name="M:Miyagi.TwoD.Painting.Painter.Clear">
            <summary>
            Removes all objects.
            </summary>
        </member>
        <member name="M:Miyagi.TwoD.Painting.Painter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Miyagi.TwoD.Painting.Painter.DrawFilledRectangle(Miyagi.TwoD.Painting.Pen,Miyagi.Common.Data.Rectangle)">
            <summary>
            Draws a filled rectangle.
            </summary>
            <param name="pen">The pen.</param>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="M:Miyagi.TwoD.Painting.Painter.DrawFilledTriangle(Miyagi.TwoD.Painting.Pen,Miyagi.Common.Data.Point,Miyagi.Common.Data.Point,Miyagi.Common.Data.Point)">
            <summary>
            Draws a filled triangle.
            </summary>
            <param name="pen">The pen.</param>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <param name="c">The third point.</param>
        </member>
        <member name="M:Miyagi.TwoD.Painting.Painter.DrawLine(Miyagi.TwoD.Painting.Pen,Miyagi.Common.Data.Point,Miyagi.Common.Data.Point)">
            <summary>
            Draws a line.
            </summary>
            <param name="pen">The pen.</param>
            <param name="p1">The first point.</param>
            <param name="p2">The second point.</param>
        </member>
        <member name="M:Miyagi.TwoD.Painting.Painter.DrawPoint(Miyagi.TwoD.Painting.Pen,Miyagi.Common.Data.Point)">
            <summary>
            Draws a point.
            </summary>
            <param name="pen">The pen.</param>
            <param name="point">The point.</param>
        </member>
        <member name="M:Miyagi.TwoD.Painting.Painter.DrawPoints(Miyagi.TwoD.Painting.Pen,Miyagi.Common.Data.Point[])">
            <summary>
            Draws points.
            </summary>
            <param name="pen">The pen.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Miyagi.TwoD.Painting.Painter.DrawRectangle(Miyagi.TwoD.Painting.Pen,Miyagi.Common.Data.Rectangle)">
            <summary>
            Draws a rectangle.
            </summary>
            <param name="pen">The pen.</param>
            <param name="rectangle">The rectangle.</param>
        </member>
        <member name="P:Miyagi.TwoD.Painting.Painter.SpriteRenderer">
            <summary>
            Gets the SpriteRenderer.
            </summary>
        </member>
        <member name="T:Miyagi.TwoD.Painting.Pen">
            <summary>
            Used to draw objects.
            </summary>
        </member>
        <member name="M:Miyagi.TwoD.Painting.Pen.#ctor(Miyagi.TwoD.Painting.IBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.TwoD.Painting.Pen"/> class.
            </summary>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Miyagi.TwoD.Painting.Pen.Apply(Miyagi.TwoD.TwoDSprite)">
            <summary>
            Applies the specified sprite.
            </summary>
            <param name="sprite">The sprite.</param>
        </member>
        <member name="P:Miyagi.TwoD.Painting.Pen.Brush">
            <summary>
            Gets the brush.
            </summary>
        </member>
        <member name="P:Miyagi.TwoD.Painting.Pen.Opacity">
            <summary>
            Gets or sets the opacity.
            </summary>
        </member>
        <member name="P:Miyagi.TwoD.Painting.Pen.Width">
            <summary>
            Gets or sets the width.
            </summary>
        </member>
        <member name="T:Miyagi.TwoD.Painting.SolidBrush">
            <summary>
            A brush representing a solid colour.
            </summary>
        </member>
        <member name="M:Miyagi.TwoD.Painting.SolidBrush.#ctor(Miyagi.Common.Data.Colour)">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.TwoD.Painting.SolidBrush"/> class.
            </summary>
            <param name="colour">The colour.</param>
        </member>
        <member name="M:Miyagi.TwoD.Painting.SolidBrush.Apply(Miyagi.TwoD.TwoDSprite)">
            <summary>
            Applies the brush to the specified sprite.
            </summary>
            <param name="sprite">The sprite.</param>
        </member>
        <member name="T:Miyagi.TwoD.Painting.TexturedBrush">
            <summary>
            A brush representing a texture.
            </summary>
        </member>
        <member name="M:Miyagi.TwoD.Painting.TexturedBrush.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.TwoD.Painting.TexturedBrush"/> class.
            </summary>
            <param name="texture">The texture.</param>
        </member>
        <member name="M:Miyagi.TwoD.Painting.TexturedBrush.Apply(Miyagi.TwoD.TwoDSprite)">
            <summary>
            Applies the brush to the specified sprite.
            </summary>
            <param name="sprite">The sprite.</param>
        </member>
        <member name="T:Miyagi.TwoD.TwoDManager">
            <summary>
            The TwoDManager.
            </summary>
        </member>
        <member name="M:Miyagi.TwoD.TwoDManager.#ctor(Miyagi.Common.MiyagiSystem)">
            <summary>
            Initializes a new instance of the TwoDManager class.
            </summary>
            <param name="system">The MiyagiSystem.</param>
        </member>
        <member name="M:Miyagi.TwoD.TwoDManager.Dispose">
            <summary>
            Disposes the TwoDManager.
            </summary>
        </member>
        <member name="M:Miyagi.TwoD.TwoDManager.GetElement``1(System.String)">
            <summary>
            Gets an element of the specified type by name.
            </summary>
            <param name="name">The name of the element.</param>
            <returns>The first element of that name and type if it exists; otherwise, null.</returns>
            <typeparam name="T">The type of the element.</typeparam>
        </member>
        <member name="M:Miyagi.TwoD.TwoDManager.GetElement(System.String)">
            <summary>
            Gets an element by name.
            </summary>
            <param name="name">The name of the element.</param>
            <returns>The first element of that name if it exists; otherwise, null.</returns>
        </member>
        <member name="M:Miyagi.TwoD.TwoDManager.Initialize">
            <summary>
            Initializes the manager.
            </summary>
        </member>
        <member name="M:Miyagi.TwoD.TwoDManager.Update">
            <summary>
            Updates the TwoDManager.
            </summary>
        </member>
        <member name="M:Miyagi.TwoD.TwoDManager.Dispose(System.Boolean)">
            <summary>
            Disposes the TwoDManager.
            </summary>
            <param name="disposing">Whether Dispose has been called.</param>
        </member>
        <member name="E:Miyagi.TwoD.TwoDManager.Disposing">
            <summary>
            Occurs when the manager is disposing.
            </summary>
        </member>
        <member name="P:Miyagi.TwoD.TwoDManager.IsDisposed">
            <summary>
            Gets a value indicating whether the manager has been disposed.
            </summary>
            <value></value>
        </member>
        <member name="P:Miyagi.TwoD.TwoDManager.Layers">
            <summary>
            Gets the list of layers.
            </summary>
        </member>
        <member name="P:Miyagi.TwoD.TwoDManager.MiyagiSystem">
            <summary>
            Gets the MiyagiSystem.
            </summary>
        </member>
        <member name="P:Miyagi.TwoD.TwoDManager.Painter">
            <summary>
            Gets the painter.
            </summary>
            <value>The painter.</value>
        </member>
        <member name="P:Miyagi.TwoD.TwoDManager.Type">
            <summary>
            Gets the type of the manager.
            </summary>
        </member>
        <member name="T:Miyagi.TwoD.TwoDSprite">
            <summary>
            A representation of a Sprite for 2D elements.
            </summary>
        </member>
        <member name="M:Miyagi.TwoD.TwoDSprite.#ctor(Miyagi.Common.Rendering.ISpriteRenderer,Miyagi.Common.Rendering.Primitive[])">
            <summary>
            Initializes a new instance of the TwoDSprite class.
            </summary>
            <param name="spriteRenderer">The owning <see cref="T:Miyagi.Common.Rendering.ISpriteRenderer"/>.</param>
            <param name="primitives">The primitives.</param>
        </member>
        <member name="M:Miyagi.TwoD.TwoDSprite.ApplyTransformation">
            <summary>
            Applies the transformation.
            </summary>
        </member>
        <member name="M:Miyagi.TwoD.TwoDSprite.Rotate(System.Single,Miyagi.Common.Data.Point,System.Boolean)">
            <summary>
            Rotates the sprite.
            </summary>
            <param name="angle">The rotation angle in degrees.</param>
            <param name="rotationPivot">The pivot point.</param>
            <param name="doTransform">Indicates whether the rotation should be applied directly.</param>
        </member>
        <member name="M:Miyagi.TwoD.TwoDSprite.Scale(Miyagi.Common.Data.PointF,Miyagi.Common.Data.Point,System.Boolean)">
            <summary>
            Scales the sprite.
            </summary>
            <param name="scaleFactor">The scale factor..</param>
            <param name="scalePivot">The pivot point.</param>
            <param name="doTransform">Indicates whether the scaling should be applied directly.</param>
        </member>
        <member name="M:Miyagi.TwoD.TwoDSprite.Skew(Miyagi.Common.Data.PointF,System.Boolean)">
            <summary>
            Skews the sprite.
            </summary>
            <param name="skewFactor">The skew factor.</param>
            <param name="doTransform">Indicates whether the skewing should be applied directly.</param>
        </member>
        <member name="M:Miyagi.TwoD.TwoDSprite.Translate(Miyagi.Common.Data.Point,System.Boolean)">
            <summary>
            Translates the sprite.
            </summary>
            <param name="offset">The offset.</param>
            <param name="doTransform">Indicates whether the translation should be applied directly.</param>
        </member>
        <member name="T:Miyagi.UI.Clipboard">
            <summary>
            Provides methods to place data on and retrieve data from the clipboard.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Clipboard.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Clipboard.UseSystemClipboard">
            <summary>
            Gets or sets a value indicating whether the system clipboard should be used.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.BitmapControl">
            <summary>
            A base class for Bitmap controls.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.Control">
            <summary>
            Represents the base class for controls.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.Elements.IElementOwner">
            <summary>
            Base Interface for element owners.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.IElementOwner.GetLocationInViewport">
            <summary>
            Gets the location of the control relative to its viewport origin.
            </summary>
            <returns>A <see cref="T:Miyagi.Common.Data.Point"/> representing the location of the control relative to its viewport origin.</returns>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.IElementOwner.DisplayRectangle">
            <summary>
            Gets the display rectangle.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.IElementOwner.MiyagiSystem">
            <summary>
            Gets the MiyagiSystem.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.IElementOwner.Opacity">
            <summary>
            Gets the opacity.
            </summary>
            <value>The opacity, ranging between 0 and 1.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.IElementOwner.Size">
            <summary>
            Gets the width and height of the parent.
            </summary>
            <value>A Size representing the height and width of the parent in pixels.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.IElementOwner.SpriteRenderer">
            <summary>
            Gets the SpriteRenderer of the parent.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.IElementOwner.TextureFiltering">
            <summary>
            Gets the texture filtering.
            </summary>
            <value>A TextureFiltering enum representing the texture filtering.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.IElementOwner.Visible">
            <summary>
            Gets a value indicating whether the owner is visible.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.IControlCollectionOwner">
            <summary>
            Enables a type to be the owner of a ControlCollection.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.IControlCollectionOwner.EnsureZOrder">
            <summary>
            Ensures the Z-order of all controls.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.IControlCollectionOwner.NotifyControlAdded(Miyagi.UI.Controls.Control)">
            <summary>
            Handles addition of controls.
            </summary>
            <param name="control">The added control.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.IControlCollectionOwner.NotifyControlRemoved(Miyagi.UI.Controls.Control)">
            <summary>
            Handles removal of controls.
            </summary>
            <param name="control">The removed control.</param>
        </member>
        <member name="P:Miyagi.UI.Controls.IControlCollectionOwner.Controls">
            <summary>
            Gets the collection of child controls.
            </summary>
            <value>The collection of child controls.</value>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Control class.
            </summary>
            <param name="name">The name of the control.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.Finalize">
            <summary>
            Finalizes an instance of the Control class.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.Miyagi#UI#Controls#IControlCollectionOwner#EnsureZOrder">
            <summary>
            Ensures the Z-order of all controls.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.Miyagi#UI#Controls#IControlCollectionOwner#NotifyControlAdded(Miyagi.UI.Controls.Control)">
            <summary>
            Notifies the control that a new child control has been added.
            </summary>
            <param name="control">The new control.</param>
            <remarks>This method supports the internal infrastructure and should not be called by user code.</remarks>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.Miyagi#UI#Controls#IControlCollectionOwner#NotifyControlRemoved(Miyagi.UI.Controls.Control)">
            <summary>
            Notifies the control that a child control has been removed.
            </summary>
            <param name="control">The removed control.</param>
            <remarks>This method supports the internal infrastructure and should not be called by user code.</remarks>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.BringToFront">
            <summary>
            Moves the control to the front.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.Dispose">
            <summary>
            Disposes the control.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.DoDragDrop(System.Object,Miyagi.UI.DragDropEffect)">
            <summary>
            Initializes a drag-and-drop operation.
            </summary>
            <param name="data">The data.</param>
            <param name="effects">The effects.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.Fade(System.Single,System.Single,System.TimeSpan)">
            <summary>
            Fades the control.
            </summary>
            <param name="startOpacity">The start opacity.</param>
            <param name="endOpacity">The end opacity.</param>
            <param name="fadeDuration">The duration of the fade operation.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.Fade(System.Single,System.Single,System.Int32)">
            <summary>
            Fades the control.
            </summary>
            <param name="startOpacity">The start opacity.</param>
            <param name="endOpacity">The end opacity.</param>
            <param name="fadeDuration">The duration of the fade operation in milliseconds.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.ForceRedraw(System.Boolean,System.Boolean)">
            <summary>
            Forces a redraw of the control and its children with the next update.
            </summary>
            <param name="updateChildren">Indicated whether the children should be redrawn, too.</param>
            <param name="updateViewportBounds">Indicated whether the viewport bounds should be updated.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.GetAbsoluteLocation">
            <summary>
            Gets the absolute location of the control.
            </summary>
            <returns>A <see cref="T:Miyagi.Common.Data.Point"/> representing the absolute location.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.GetLocationInViewport">
            <summary>
            Gets the location of the control relative to its viewport origin.
            </summary>
            <returns>A <see cref="T:Miyagi.Common.Data.Point"/> representing the location of the control relative to its viewport origin.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.GetPreferredSize(Miyagi.Common.Data.Size)">
            <summary>
            Retrieves the size of a rectangular area into which a control can be fitted.
            </summary>
            <param name="proposedSize">The custom-sized area for a control.</param>
            <returns>A <see cref="P:Miyagi.UI.Controls.Control.Size"/> representing the width and height of a rectangle.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.HitTest(Miyagi.Common.Data.Point)">
            <summary>
            Gets a value indicating whether the provided coordinates are inside the control.
            </summary>
            <param name="p">The coordinate.</param>
            <returns><c>true</c> if the coordinates are inside the control; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.IsAncestor(Miyagi.UI.Controls.Control)">
            <summary>
            Gets a value indicating whether the specified control is a child of this control or its children.
            </summary>
            <param name="childControl">The control to find.</param>
            <returns><c>true</c> if the control is a child; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.PerformLayout">
            <summary>
            Recomputes the layout of the control.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.RestartTextureAnimation">
            <summary>
            Restarts the texture animation.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.ResumeLayout">
            <summary>
            Resumes usual layout logic.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.ResumeLayout(System.Boolean)">
            <summary>
            Resumes usual layout logic, optionally forcing an immediate layout of pending layout requests.
            </summary>
            <param name="performLayout"><c>true</c> to execute pending layout requests; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.SendToBack">
            <summary>
            Moves the control to the back.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the bounds of the control to the specified location and size.
            </summary>
            <param name="x">The new <see cref="P:Miyagi.UI.Controls.Control.Left"/> property value of the control.</param>
            <param name="y">The new <see cref="P:Miyagi.UI.Controls.Control.Top"/> property value of the control.</param>
            <param name="newWidth">The new <see cref="P:Miyagi.UI.Controls.Control.Width"/> property value of the control.</param>
            <param name="newHeight">The new <see cref="P:Miyagi.UI.Controls.Control.Height"/> property value of the control.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32,Miyagi.UI.BoundsSpecified)">
            <summary>
            Sets the bounds of the control to the specified location and size.
            </summary>
            <param name="x">The new <see cref="P:Miyagi.UI.Controls.Control.Left"/> property value of the control.</param>
            <param name="y">The new <see cref="P:Miyagi.UI.Controls.Control.Top"/> property value of the control.</param>
            <param name="newWidth">The new <see cref="P:Miyagi.UI.Controls.Control.Width"/> property value of the control.</param>
            <param name="newHeight">The new <see cref="P:Miyagi.UI.Controls.Control.Height"/> property value of the control.</param>
            <param name="specified">A bitwise combination of <see cref="T:Miyagi.UI.BoundsSpecified"/> values.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.StopTextureAnimation">
            <summary>
            Stops the texture animation.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.SuspendLayout">
            <summary>
            Temporarily suspends the layout logic for the control.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.ToString">
            <summary>
            Returns the name of the control.
            </summary>
            <returns>The name of the control.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.Update">
            <summary>
            Updates the control.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.GetParentCollection">
            <summary>
            Gets the collection which contains the control.
            </summary>
            <returns>A ControlCollection which contains the control.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.PerformLayout(Miyagi.UI.Controls.Control,System.String)">
            <summary>
            Recomputes the layout of the control.
            </summary>
            <param name="affectedControl">The affected control.</param>
            <param name="affectedProperty">The affected property.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.AddUpdateType(Miyagi.UI.UpdateTypes)">
            <summary>
            Adds an UpdateType to the UpdateType property of all elements.
            </summary>
            <param name="updType">The UpdateType to add.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.ApplySizeConstraints(Miyagi.Common.Data.Size)">
            <summary>
            Takes a proposed Size and returns a new one that satisfies all the constraints of the controller.
            </summary>
            <param name="proposedSize">The size proposed.</param>
            <returns>A size that is valid for the controller.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.CalculateDeltaLocation(Miyagi.Common.Data.Point,Miyagi.Common.Data.Point)">
            <summary>
            Calculates and sets the delta location.
            </summary>
            <param name="oldLocation">The old position.</param>
            <param name="newLocation">The new position.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.CalculateDeltaSize(Miyagi.Common.Data.Size,Miyagi.Common.Data.Size)">
            <summary>
            Calculates and sets the delta size.
            </summary>
            <param name="oldSize">The old size.</param>
            <param name="newSize">The new size.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.ClientSizeFromSize(Miyagi.Common.Data.Size)">
            <summary>
            Calculates a client area based on the size of a control.
            </summary>
            <param name="size">The size of the control.</param>
            <returns>A size representing said client area.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.Dispose(System.Boolean)">
            <summary>
            Disposes the control.
            </summary>
            <param name="disposing">Whether Dispose has been called.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.DoResize(System.Double,System.Double)">
            <summary>
            Resizes the control.
            </summary>
            <param name="widthFactor">The relative growth of the width.</param>
            <param name="heightFactor">The relative growth of the height.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.GetAbsoluteLocation(System.Boolean)">
            <summary>
            Gets the absolute location.
            </summary>
            <param name="viewportOffset">Indicates whether the location should be offset be the viewport offset.</param>
            <returns>A <see cref="T:Miyagi.Common.Data.Point"/> representing the absolute location.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.GetPreferredSizeCore(Miyagi.Common.Data.Size)">
            <summary>
            Actual implementation of the method that retrieves the size of a rectangular area into which a control can be fitted.
            </summary>
            <param name="proposedSize">The custom-sized area for a control.</param>
            <returns>A Size representing the width and height of a rectangle.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.HitTestCore(Miyagi.Common.Data.Point)">
            <summary>
            Gets a value indicating whether the provided coordinates are inside the control.
            </summary>
            <param name="p">The coordinate.</param>
            <returns><c>true</c> if the coordinates are inside the control; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.OffsetChildren(Miyagi.Common.Data.Point)">
            <summary>
            Offsets the child controls.
            </summary>
            <param name="p">A <see cref="T:Miyagi.Common.Data.Point"/> representing the offset.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.OnAnchorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.AnchorChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.OnAutoSizeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.AutoSizeChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.OnChildLocationChanged(Miyagi.UI.Controls.Control)">
            <summary>
            Handles child location changes.
            </summary>
            <param name="child">The child control which location has been changed.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.OnChildSizeChanged(Miyagi.UI.Controls.Control)">
            <summary>
            Handles child size changes.
            </summary>
            <param name="child">The child control which size has been changed.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.OnChildVisibleChanged(Miyagi.UI.Controls.Control)">
            <summary>
            Handles child visibility changes.
            </summary>
            <param name="child">The child control which visibility has been changed.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.OnClick(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.Click"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.OnClientSizeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.ClientSizeChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.OnControlAdded(Miyagi.Common.Events.ValueEventArgs{Miyagi.UI.Controls.Control})">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.ControlAdded"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.ValueEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.OnControlRemoved(Miyagi.Common.Events.ValueEventArgs{Miyagi.UI.Controls.Control})">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.ControlRemoved"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.ValueEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.OnDockChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.DockChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.OnDragDrop(Miyagi.UI.DragEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.DragDrop"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.UI.DragEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.OnDragEnter(Miyagi.UI.DragEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.DragEnter"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.UI.DragEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.OnDragLeave(Miyagi.UI.DragEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.DragLeave"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.UI.DragEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.OnDragOver(Miyagi.UI.DragEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.DragOver"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.UI.DragEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.OnEnabledChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.EnabledChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.OnGotFocus(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.GotFocus"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.OnKeyDown(Miyagi.Common.Events.KeyboardEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.KeyDown"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.KeyboardEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.OnKeyHeld(Miyagi.Common.Events.KeyboardEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.KeyHeld"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.KeyboardEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.OnKeyUp(Miyagi.Common.Events.KeyboardEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.KeyUp"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.KeyboardEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.OnLayout(Miyagi.UI.Controls.Layout.LayoutEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.Layout"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.UI.Controls.Layout.LayoutEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.OnLocationChanged(Miyagi.Common.Events.ChangedValueEventArgs{Miyagi.Common.Data.Point})">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.LocationChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.ChangedValueEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.OnLostFocus(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.LostFocus"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.OnMarginChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MarginChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.OnMaxSizeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MaxSizeChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.OnMinSizeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MinSizeChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.OnMouseClick(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseClick"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.OnMouseDoubleClick(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseDoubleClick"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.OnMouseDown(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseDown"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.OnMouseDrag(Miyagi.Common.Events.ChangedValueEventArgs{Miyagi.Common.Data.Point})">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseDrag"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.ChangedValueEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.OnMouseEnter(Miyagi.Common.Events.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseEnter"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.OnMouseGesture(Miyagi.Common.Events.MouseGestureEventArgs)">
            <summary>
            Handles mouse gestures.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.OnMouseHeld(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseHeld"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.OnMouseHover(Miyagi.Common.Events.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseHover"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.OnMouseLeave(Miyagi.Common.Events.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseLeave"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.OnMouseUp(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseUp"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.OnMouseWheelMoved(Miyagi.Common.Events.ValueEventArgs{System.Int32})">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseWheelMoved"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.ValueEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.OnOpacityChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.OpacityChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.OnPaddingChanged(Miyagi.Common.Events.ChangedValueEventArgs{Miyagi.Common.Data.Thickness})">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.PaddingChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.ChangedValueEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.OnParentChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.ParentChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.OnParentLocationChanged(Miyagi.Common.Events.ChangedValueEventArgs{Miyagi.Common.Data.Point})">
            <summary>
            Handles parent location changes.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.OnParentSizeChanged(Miyagi.Common.Events.ChangedValueEventArgs{Miyagi.Common.Data.Size})">
            <summary>
            Handles parent size changes.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">The name of the changed property.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.OnSizeChanged(Miyagi.Common.Events.ChangedValueEventArgs{Miyagi.Common.Data.Size})">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.SizeChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.ChangedValueEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.OnTabIndexChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.TabIndexChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.OnTabStopChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.TabStopChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.OnVisibleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.VisibleChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.OnZOrderChanged">
            <summary>
            Handles z-order changes.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,Miyagi.UI.BoundsSpecified)">
            <summary>
            Performs the work of setting the specified bounds of this control.
            </summary>
            <param name="x">The new <see cref="P:Miyagi.UI.Controls.Control.Left"/> property value of the control.</param>
            <param name="y">The new <see cref="P:Miyagi.UI.Controls.Control.Top"/> property value of the control.</param>
            <param name="newWidth">The new <see cref="P:Miyagi.UI.Controls.Control.Width"/> property value of the control.</param>
            <param name="newHeight">The new <see cref="P:Miyagi.UI.Controls.Control.Height"/> property value of the control.</param>
            <param name="specified">A bitwise combination of <see cref="T:Miyagi.UI.BoundsSpecified"/> values.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.SizeFromClientSize(Miyagi.Common.Data.Size)">
            <summary>
            Calculates the size of the control based on the size of the client area.
            </summary>
            <param name="size">The size of the client area.</param>
            <returns>A size for the whole control.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.ThrowIfDisposed">
            <summary>
            Throws an ObjectDisposedException if the control is disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException"><c>ObjectDisposedException</c>.</exception>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.UpdateClientSize">
            <summary>
            Updates the ClientSize.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.UpdateCore">
            <summary>
            Updates the control.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.ApplyBoundsConstraints(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Takes a rectangle with the suggested position and size for the control, and returns a new one that takes into consideration all the applicable constraints for the control.
            </summary>
            <param name="suggestedX">The X value of the upper Left corner relative to the container control.</param>
            <param name="suggestedY">The Y value of the upper Left corner relative to the container control.</param>
            <param name="proposedWidth">The width in pixels.</param>
            <param name="proposedHeight">The height in pixels.</param>
            <returns>The new rectangle.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.UpdateBounds(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Updates the position and size for the control.
            </summary>
            <param name="x">The X value of the upper Left corner relative to the container control.</param>
            <param name="y">The Y value of the upper Left corner relative to the container control.</param>
            <param name="newWidth">The width in pixels.</param>
            <param name="newHeight">The height in pixels.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Control.UpdateDistances">
            <summary>
            Update the distance to the right and bottom of the client area of the parent container.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Control.AnchorChanged">
            <summary>
            Occurs when the <see cref="P:Miyagi.UI.Controls.Control.Anchor"/> property changes.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Control.AutoSizeChanged">
            <summary>
            Occurs when the <see cref="P:Miyagi.UI.Controls.Control.AutoSize"/> property changes.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Control.Click">
            <summary>
            Occurs when a mouse button is clicked over the control or the Enter key is pressed.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Control.ClientSizeChanged">
            <summary>
            Occurs when the <see cref="P:Miyagi.UI.Controls.Control.ClientSize"/> property changes.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Control.ControlAdded">
            <summary>
            Occurs when a control has been added to the <see cref="P:Miyagi.UI.Controls.Control.Controls"/> property.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Control.ControlRemoved">
            <summary>
            Occurs when a control has been removed from the <see cref="P:Miyagi.UI.Controls.Control.Controls"/> property.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Control.DockChanged">
            <summary>
            Occurs when the <see cref="P:Miyagi.UI.Controls.Control.Dock"/> property changes.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Control.DragDrop">
            <summary>
            Occurs when [drag drop].
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Control.DragEnter">
            <summary>
            Occurs when [drag enter].
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Control.DragLeave">
            <summary>
            Occurs when [drag leave].
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Control.DragOver">
            <summary>
            Occurs when [drag over].
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Control.EnabledChanged">
            <summary>
            Occurs when the <see cref="P:Miyagi.UI.Controls.Control.Enabled"/> property changes.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Control.GotFocus">
            <summary>
            Occurs when this control gets the focus.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Control.KeyDown">
            <summary>
            Occurs when a key is pressed and the control has the focus.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Control.KeyHeld">
            <summary>
            Occurs when a key held is held and the control has the focus.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Control.KeyUp">
            <summary>
            Occurs when a key is released and the control has the focus.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Control.Layout">
            <summary>
            Occurs when a control should reposition its child controls.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Control.LocationChanged">
            <summary>
            Occurs when the <see cref="P:Miyagi.UI.Controls.Control.Location"/> property changes.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Control.LostFocus">
            <summary>
            Occurs when this control loses the focus.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Control.MarginChanged">
            <summary>
            Occurs when the <see cref="P:Miyagi.UI.Controls.Control.Margin"/> property changes.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Control.MaxSizeChanged">
            <summary>
            Occurs when the <see cref="P:Miyagi.UI.Controls.Control.MaxSize"/> property changes.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Control.MinSizeChanged">
            <summary>
            Occurs when the <see cref="P:Miyagi.UI.Controls.Control.MinSize"/> property changes.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Control.MouseClick">
            <summary>
            Occurs when a mouse button is clicked over the control.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Control.MouseDoubleClick">
            <summary>
            Occurs when a mouse button is clicked twice over the control.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Control.MouseDown">
            <summary>
            Occurs when a mouse button is pressed over the control.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Control.MouseDrag">
            <summary>
            Occurs when the mouse has been dragged over the control.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Control.MouseEnter">
            <summary>
            Occurs when the mouse cursor enters the control.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Control.MouseHeld">
            <summary>
            Occurs when a mouse button is held and the control has the focus.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Control.MouseHover">
            <summary>
            Occurs when the mouse cursor is moved over the control.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Control.MouseLeave">
            <summary>
            Occurs when the mouse cursor leaves the control.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Control.MouseUp">
            <summary>
            Occurs when a mouse button is released over the control.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Control.MouseWheelMoved">
            <summary>
            Occurs when the mouse wheel is moved and the control has the focus.
            </summary>
            <remarks>Submits the relative wheel movement.</remarks>
        </member>
        <member name="E:Miyagi.UI.Controls.Control.OpacityChanged">
            <summary>
            Occurs when the <see cref="P:Miyagi.UI.Controls.Control.Opacity"/> property changes.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Control.PaddingChanged">
            <summary>
            Occurs when the <see cref="P:Miyagi.UI.Controls.Control.Padding"/> property changes.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Control.ParentChanged">
            <summary>
            Occurs when the <see cref="P:Miyagi.UI.Controls.Control.Parent"/> property changes.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Control.PropertyChanged">
            <summary>
            Occurs when a property changes.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Control.SizeChanged">
            <summary>
            Occurs when the <see cref="P:Miyagi.UI.Controls.Control.Size"/> property changes.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Control.SuccessfulHitTest">
            <summary>
            Occurs when a hit test has been performed successfully.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Control.TabIndexChanged">
            <summary>
            Occurs when the <see cref="P:Miyagi.UI.Controls.Control.TabIndex"/> property changes.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Control.TabStopChanged">
            <summary>
            Occurs when the <see cref="P:Miyagi.UI.Controls.Control.TabStop"/> property changes.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Control.VisibleChanged">
            <summary>
            Occurs when the <see cref="P:Miyagi.UI.Controls.Control.Visible"/> property changes.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.AllControls">
            <summary>
            Gets an enumerator for a simple iteration over all descendent controls.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.AllControlsReverse">
            <summary>
            Gets an enumerator for a simple iteration over all descendent controls in reverse direction.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.AllowDrop">
            <summary>
            Gets or sets a value indicating whether the control accepts data that has been dragged onto it.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.AlwaysOnBottom">
            <summary>
            Gets or sets a value indicating whether the control should be displayed as the bottommost control.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.AlwaysOnTop">
            <summary>
            Gets or sets a value indicating whether the control should be displayed as the topmost control.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.Anchor">
            <summary>
            Gets or sets the edges of the parent to which the control is bound.
            </summary>
            <value>A bitwise combination of <see cref="T:Miyagi.UI.AnchorStyles"/>. The default is <b>Top</b> and <b>Left</b>.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.AutoSize">
            <summary>
            Gets or sets a value indicating whether the control will resize according to the setting of <see cref="P:Miyagi.UI.Controls.Control.AutoSizeMode"/>.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.AutoSizeMode">
            <summary>
            Gets or sets the automatic sizing behavior of the control.
            </summary>
            <value>One of the <see cref="P:Miyagi.UI.Controls.Control.AutoSizeMode"/> values. The default value is <b>GrowOnly</b>.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.Bottom">
            <summary>
            Gets or sets the y-coordinate of the bottom edge in pixels.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.CenterOnGrab">
            <summary>
            Gets or sets a value indicating whether the control is centered on the cursor when grabbed.
            </summary>
            <value>Default is <c>false</c>.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.Controls">
            <summary>
            Gets the collection of child controls.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.Cursor">
            <summary>
            Gets or sets the cursor mode that will be displayed if the cursor is over the control.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.DefaultKeysEnabled">
            <summary>
            Gets or sets a value indicating whether the default key commands are enabled.
            </summary>
            <value><c>true</c> if default key commands are enabled, otherwise <c>false</c>. Default is <c>true</c>.</value>
            <remarks>This can be used to prevent Slider and ListBox from reacting to their default keys.</remarks>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.DisplayRectangle">
            <summary>
            Gets the rectangle that represents the display area of the control.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.Disposing">
            <summary>
            Gets a value indicating whether the control is disposing.
            </summary>
            <value><c>true</c> if the control is disposing; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.Dock">
            <summary>
            Gets or sets which control borders are docked to its parent control and determines how a control is resized with its parent.
            </summary>
            <value>One of the <see cref="T:Miyagi.UI.DockStyle"/> values. The default is <b>None</b>.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.Enabled">
            <summary>
            Gets or sets a value indicating whether the control and its children should respond to events.
            </summary>
            <value>If set to <c>false</c>, the control and its children ignore all events.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.Focused">
            <summary>
            Gets or sets a value indicating whether the control has the focus.
            </summary>
            <value>If <c>true</c>, the control has the focus.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.GUI">
            <summary>
            Gets the <see cref="P:Miyagi.UI.Controls.Control.GUI"/> of the control.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.Height">
            <summary>
            Gets or sets the height of the control in pixels.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.HitTestVisible">
            <summary>
            Gets or sets a value indicating whether the control is visible to a hit test.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.IsDisposed">
            <summary>
            Gets a value indicating whether the control is disposed.
            </summary>
            <value><c>true</c> if the control is disposed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.IsMouseOver">
            <summary>
            Gets a value indicating whether the mouse is over the control.
            </summary>
            <value><c>true</c> if the mouse is over the control; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.IsTopLevelControl">
            <summary>
            Gets a value indicating whether this control is a top level control.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.LayoutEngine">
            <summary>
            Gets or sets the engine that is responsible for the layout of the control.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.Left">
            <summary>
            Gets or sets the x-coordinate of the left edge in pixels.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.Location">
            <summary>
            Gets or sets the location of the control.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.Margin">
            <summary>
            Gets or sets the space between controls.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.MaxSize">
            <summary>
            Gets or sets the maximal size of the control.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.MinSize">
            <summary>
            Gets or sets the minial size of the control.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.MiyagiSystem">
            <summary>
            Gets the <see cref="P:Miyagi.UI.Controls.Control.MiyagiSystem"/>.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.Movable">
            <summary>
            Gets or sets a value indicating whether the control is movable.
            </summary>
            <value>If set to <c>true</c>, the control can be grabbed and moved by the cursor. Default is <c>false</c>.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.Name">
            <summary>
            Gets or sets the name of the control.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.Opacity">
            <summary>
            Gets or sets the opacity of the control and its children.
            </summary>
            <value>The opacity of the control. Ranging between 0 and 1.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.Padding">
            <summary>
            Gets or sets padding within the control.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.Parent">
            <summary>
            Gets or sets the parent of the control.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.PreferredSize">
            <summary>
            Gets the size of a rectangular area into which the control can fit.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.Rectangle">
            <summary>
            Gets or sets a Rectangle representing the bounds of the control.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.Right">
            <summary>
            Gets or sets the x-coordinate of the right edge in pixels.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.Size">
            <summary>
            Gets or sets the width and height of the control.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.SpriteRenderer">
            <summary>
            Gets the <see cref="T:Miyagi.Common.Rendering.ISpriteRenderer"/> of the control.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.TabIndex">
            <summary>
            Gets or sets the tab order of the control.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.TabStop">
            <summary>
            Gets or sets a value indicating whether the user can give the focus to this control using the TAB key.
            </summary>
            <value><c>true</c> if the user can give the focus to the control using the TAB key; otherwise, <c>false</c>. The default is <c>true</c>.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.TextureFiltering">
            <summary>
            Gets or sets the texture filtering of the sprite of the control.
            </summary>
            <value>A <see cref="P:Miyagi.UI.Controls.Control.TextureFiltering"/> representing the texture filtering.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.Top">
            <summary>
            Gets or sets the y-coordinate of the top edge in pixels.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.TopLevelControl">
            <summary>
            Gets the control that is an ancestor of this control and has no parent, or the control itself if it has got no parent.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.UserData">
            <summary>
            Gets or sets an object which contains data about the control.
            </summary>
            <remarks>This is ignored by the serializer.</remarks>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.Visible">
            <summary>
            Gets or sets a value indicating whether the control and its children are visible.
            </summary>
            <value>If the control is visible <c>true</c>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.Width">
            <summary>
            Gets or sets the width of the control.
            </summary>
            <value>The width of the control in pixels.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.AbsoluteRectangle">
            <summary>
            Gets the derived rectangle.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.ClientSize">
            <summary>
            Gets or sets the height and width of the client area of the control.
            </summary>
            <value>A Size representing the size of the client area.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.IsArrowKeyMovementBlocked">
            <summary>
            Gets a value indicating whether arrow key movement is blocked.
            </summary>
            <value>
            <c>true</c> if arrow key movement is blocked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.IsExceedingParent">
            <summary>
            Gets a value indicating whether the control exceeds its parent.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.IsMagneticallyDockingEnabled">
            <summary>
            Gets a value indicating whether magnetically docking is enabled.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.LayoutType">
            <summary>
            Gets the type of layout used for this class.
            </summary>
            <value>A LayoutType representing the type of layout.</value>
            <remarks>Don't set this property directly. Do it through the Anchor and Dock properties.</remarks>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.ZOrder">
            <summary>
            Gets the z-order.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.ChildOffset">
            <summary>
            Gets a <see cref="T:Miyagi.Common.Data.Point"/> representing the offset that is applied to added controls.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.ClientLocation">
            <summary>
            Gets the client location.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.DefaultMargin">
            <summary>
            Gets the space, in pixels, that is specified by default between controls.
            </summary>
            <value>A Padding representing the space, in pixels, that is specified by default between controls.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.DefaultMaxSize">
            <summary>
            Gets the default maximum size of a control.
            </summary>
            <value>The default maximum size of a control.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.DefaultMinSize">
            <summary>
            Gets the default spacing of the contents of a control.
            </summary>
            <value>The default spacing of the contents of a control.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.DefaultPadding">
            <summary>
            Gets the default spacing of the contents of a control.
            </summary>
            <value>The default spacing of the contents of a control.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.DeltaLocation">
            <summary>
            Gets the difference between the old and new position.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.DeltaSize">
            <summary>
            Gets the difference between the old and new size.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Control.Elements">
            <summary>
            Gets a list of elements.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.BitmapControl.#ctor(System.String)">
            <summary>
            Initializes a new instance of the BitmapControl class.
            </summary>
            <param name="name">The name of the BitmapControl.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.BitmapControl.Save(System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Saves the Bitmap to the specified file.
            </summary>
            <param name="fileName">A string representing the name of the file.</param>
            <param name="format">An BitmapFormat representing the format.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.BitmapControl.Dispose(System.Boolean)">
            <summary>
            Disposes the control.
            </summary>
            <param name="disposing">Whether Dispose has been called.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.BitmapControl.DoResize(System.Double,System.Double)">
            <summary>
            Resizes the control.
            </summary>
            <param name="widthFactor">The relative growth of the width.</param>
            <param name="heightFactor">The relative growth of the height.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.BitmapControl.OnBitmapChanged">
            <summary>
            Called when the <see cref="P:Miyagi.UI.Controls.BitmapControl.Bitmap"/> changes.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.BitmapControl.OnSizeChanged(Miyagi.Common.Events.ChangedValueEventArgs{Miyagi.Common.Data.Size})">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.SizeChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.ChangedValueEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.BitmapControl.RemoveTexture">
            <summary>
            Removes the texture.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.BitmapControl.SetBitmap(System.Drawing.Bitmap)">
            <summary>
            Sets the bitmap.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.BitmapControl.UpdateBitmap">
            <summary>
            Updates the <see cref="P:Miyagi.UI.Controls.BitmapControl.Bitmap"/>.
            </summary>
            <remarks>This is called <see cref="P:Miyagi.UI.Controls.BitmapControl.NeedsUpdate"/> is true.</remarks>
        </member>
        <member name="M:Miyagi.UI.Controls.BitmapControl.UpdateCore">
            <summary>
            Updates the control.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.BitmapControl.Bitmap">
            <summary>
            Gets or sets the used Bitmap.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.BitmapControl.Elements">
            <summary>
            Gets a list of elements.
            </summary>
            <value>A list of elements.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.BitmapControl.NeedsUpdate">
            <summary>
            Gets or sets a value indicating whether the Bitmap needs to be written to the texture.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.BitmapControl.TextureElement">
            <summary>
            Gets the TextureElement.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.BitmapControl.TextureName">
            <summary>
            Gets the name of the texture.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.Button">
            <summary>
            A Button control.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.SkinnedControl">
            <summary>
            The abstract base class for textured controls.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.Label">
            <summary>
            A Label control.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.Elements.ITextElementOwner">
            <summary>
            Enables a class the be the parent of a TextElement.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ITextElementOwner.DisplayedText">
            <summary>
            Gets the displayed text.
            </summary>
            <value>The displayed text.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ITextElementOwner.Text">
            <summary>
            Gets the text.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ITextElementOwner.TextBounds">
            <summary>
            Gets a Rectangle representing the text area.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Label.#ctor">
            <summary>
            Initializes a new instance of the Label class.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Label.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Label class.
            </summary>
            <param name="name">The name of the Label.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Label.Dispose(System.Boolean)">
            <summary>
            Disposes the control.
            </summary>
            <param name="disposing">Whether Dispose has been called.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Label.DoResize(System.Double,System.Double)">
            <summary>
            Resizes the control.
            </summary>
            <param name="widthFactor">The relative growth of the width.</param>
            <param name="heightFactor">The relative growth of the height.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Label.GetPreferredSizeCore(Miyagi.Common.Data.Size)">
            <summary>
            Method that calculates the required area for the control, so that the text in it fits appropiately.
            </summary>
            <param name="proposedSize">The custom-sized area for a control.</param>
            <returns>A Size representing the width and height of a rectangle.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Label.OnClientSizeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.ClientSizeChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Label.OnFontChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Label.FontChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Label.OnMaxSizeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MaxSizeChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Label.OnTextChanged(Miyagi.Common.Events.TextEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Label.TextChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.TextEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Label.SetText(System.String,System.Boolean)">
            <summary>
            Sets the text.
            </summary>
            <param name="newText">A string representing the new text.</param>
            <param name="fromProperty">Indicates whether this method is called by the <see cref="P:Miyagi.UI.Controls.Label.Text"/> Property.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Label.UpdateCore">
            <summary>
            Updates the control.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Label.FontChanged">
            <summary>
            Occurs when the <see cref="P:Miyagi.UI.Controls.Styles.TextStyle.Font"/> property of the TextStyle of this control changes.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Label.TextChanged">
            <summary>
            Occurs when the <see cref="P:Miyagi.UI.Controls.Label.Text"/> property of the TextStyle of this control changes.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Label.DisplayedText">
            <summary>
            Gets the displayed text.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Label.LocaleResourceKey">
            <summary>
            Gets or sets the locale resource key.
            </summary>
            <value>A string representing the locale resource key.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Label.Text">
            <summary>
            Gets or sets the displayed text.
            </summary>
            <value>A string representing the displayed text.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Label.TextBounds">
            <summary>
            Gets a Rectangle representing the text area.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Label.TextStyle">
            <summary>
            Gets or sets the style of the text.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Label.Elements">
            <summary>
            Gets a list of elements.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Label.TextElement">
            <summary>
            Gets the TextElement.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.Elements.IBorderElementOwner">
            <summary>
            Enables a class the be the parent of a BorderElement.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.Elements.IInteractiveElementOwner">
            <summary>
            Enables a class the be the parent of a <see cref="T:Miyagi.UI.Controls.Elements.InteractiveElement`2"/>.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.IInteractiveElementOwner.CombinedSkinName">
            <summary>
            Gets the combined name of the skin.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.IInteractiveElementOwner.Skin">
            <summary>
            Gets the skin.
            </summary>
            <value>The skin.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.IBorderElementOwner.HasBorder">
            <summary>
            Gets a value indicating whether the owner has a border.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.IBorderElementOwner.Location">
            <summary>
            Gets the position of the parent.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.IBorderElementOwner.Sprite">
            <summary>
            Gets the Quad of the parent.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.Elements.ISkinElementOwner">
            <summary>
            Enables a class the be the parent of a TextureElement.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ISkinElementOwner.BorderElement">
            <summary>
            Gets the border.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.Elements.IToolTipElementOwner">
            <summary>
            Enables a class the be the parent of a ToolTipElement.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.IToolTipElementOwner.ToolTipText">
            <summary>
            Gets or sets the text of the tooltip.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.SkinnedControl.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SkinnedControl class.
            </summary>
            <param name="name">The name of the SkinnedControl.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.SkinnedControl.SetBackgroundTexture(Miyagi.Common.Resources.Texture)">
            <summary>
            Sets the background texture.
            </summary>
            <param name="texture">The texture.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.SkinnedControl.ChangeTexture(System.String,System.String)">
            <summary>
            Changes the current texture.
            </summary>
            <param name="subSkin">The name of the subskin.</param>
            <param name="reason">The reason for the change.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.SkinnedControl.ClientSizeFromSize(Miyagi.Common.Data.Size)">
            <summary>
            Calculates a client area based on the size of a control.
            </summary>
            <param name="size">The size of the control.</param>
            <returns>A size representing said client area.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.SkinnedControl.Dispose(System.Boolean)">
            <summary>
            Disposes the control.
            </summary>
            <param name="disposing">Whether Dispose has been called.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.SkinnedControl.DoResize(System.Double,System.Double)">
            <summary>
            Resizes the control.
            </summary>
            <param name="widthFactor">The relative growth of the width.</param>
            <param name="heightFactor">The relative growth of the height.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.SkinnedControl.HitTestCore(Miyagi.Common.Data.Point)">
            <summary>
            Gets a value indicating whether the provided coordinates are inside the control.
            </summary>
            <param name="p">The coordinate.</param>
            <returns><c>true</c> if the coordinates are inside the control; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.SkinnedControl.OnBorderThicknessChanged(Miyagi.Common.Events.ChangedValueEventArgs{Miyagi.Common.Data.Thickness})">
            <summary>
            Handles border thickness changes.
            </summary>
            <param name="e">A ChangedValueEventArgs that contains the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.SkinnedControl.OnEnabledChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.EnabledChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.SkinnedControl.OnGotFocus(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.GotFocus"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.SkinnedControl.OnLostFocus(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.LostFocus"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.SkinnedControl.OnMouseEnter(Miyagi.Common.Events.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseEnter"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.SkinnedControl.OnMouseLeave(Miyagi.Common.Events.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseLeave"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.SkinnedControl.OnSizeChanged(Miyagi.Common.Events.ChangedValueEventArgs{Miyagi.Common.Data.Size})">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.SizeChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.ChangedValueEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.SkinnedControl.OnSkinChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.SkinnedControl.SkinChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.SkinnedControl.SizeFromClientSize(Miyagi.Common.Data.Size)">
            <summary>
            Calculates the size of the control based on the size of the client area.
            </summary>
            <param name="size">The size of the client area.</param>
            <returns>A size for the whole control.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.SkinnedControl.UpdateCore">
            <summary>
            Updates the control.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.SkinnedControl.SkinChanged">
            <summary>
            Occurs when the skin of this control changes.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.SkinnedControl.BorderStyle">
            <summary>
            Gets or sets the border.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.SkinnedControl.CombinedSkinName">
            <summary>
            Gets the combined name of the skin.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.SkinnedControl.HasBorder">
            <summary>
            Gets a value indicating whether this control has a border.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.SkinnedControl.Skin">
            <summary>
            Gets or sets the skin.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.SkinnedControl.ToolTipStyle">
            <summary>
            Gets or sets the style of the tooltip.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.SkinnedControl.ToolTipText">
            <summary>
            Gets or sets the text of the tooltip.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.SkinnedControl.BorderElement">
            <summary>
            Gets the border.
            </summary>
            <value>A BorderElement representing the border.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.SkinnedControl.ClientLocation">
            <summary>
            Gets the client location.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.SkinnedControl.Elements">
            <summary>
            Gets a list of elements.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.SkinnedControl.SkinElement">
            <summary>
            Gets the texture.
            </summary>
            <value>A SkinElement representing the texture.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.SkinnedControl.ToolTipElement">
            <summary>
            Gets the tooltip.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Button.#ctor">
            <summary>
            Initializes a new instance of the Button class.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Button.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Button class.
            </summary>
            <param name="name">The name of the Button.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Button.ChangeTexture(Miyagi.Common.SkinChangingEvent)">
            <summary>
            Handles skin events.
            </summary>
            <param name="action">The event.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Button.OnMouseDown(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseDown"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Button.OnMouseEnter(Miyagi.Common.Events.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseEnter"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Button.OnMouseLeave(Miyagi.Common.Events.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseLeave"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Button.OnMouseUp(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseUp"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Miyagi.UI.Controls.CheckBox">
            <summary>
            A CheckBox control.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.StateButton">
            <summary>
            The abstract base class for state changing buttons.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.StateButton.#ctor">
            <summary>
            Initializes a new instance of the StateButton class.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.StateButton.#ctor(System.String)">
            <summary>
            Initializes a new instance of the StateButton class.
            </summary>
            <param name="name">The name of the StateButton.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.StateButton.OnActiveStateChanged(System.EventArgs)">
            <summary>
            Handles active state changes.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="P:Miyagi.UI.Controls.StateButton.CombinedSkinName">
            <summary>
            Gets the combined name of the skin.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.StateButton.ActiveState">
            <summary>
            Gets or sets the active state.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.CheckBox.#ctor">
            <summary>
            Initializes a new instance of the CheckBox class.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.CheckBox.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CheckBox class.
            </summary>
            <param name="name">The name of the CheckBox.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.CheckBox.OnCheckedChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.CheckBox.CheckedChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.CheckBox.OnCheckStateChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.CheckBox.CheckStateChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.CheckBox.OnMouseClick(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Raises the MouseClick event.
            </summary>
            <param name="e">The MouseButtonEventArgs.</param>
        </member>
        <member name="E:Miyagi.UI.Controls.CheckBox.CheckedChanged">
            <summary>
            Occurs when the <see cref="P:Miyagi.UI.Controls.CheckBox.Checked"/> property is changed.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.CheckBox.CheckStateChanged">
            <summary>
            Occurs when the <see cref="P:Miyagi.UI.Controls.CheckBox.CheckState"/> property is changed.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.CheckBox.Checked">
            <summary>
            Gets or sets a value indicating whether the control is checked.
            </summary>
            <value>The check state of the control.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.CheckBox.CheckState">
            <summary>
            Gets or sets a CheckState enum representing the current state of the CheckBox.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.CheckBox.ThreeState">
            <summary>
            Gets or sets a value indicating whether the CheckBox can be set to the Indeterminate state.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.Elements.ITextBoxElementOwner">
            <summary>
            Enables a class the be the parent of a TextBoxElement.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.Elements.IEditBoxElementOwner">
            <summary>
            Enables a class the be the parent of a EditBoxElement.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.IEditBoxElementOwner.SetText(System.String)">
            <summary>
            Sets the text.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.IEditBoxElementOwner.Focused">
            <summary>
            Gets a value indicating whether the owner has the focus.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.IEditBoxElementOwner.IsKeyDown">
            <summary>
            Gets a value indicating whether a key is currently down.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.IEditBoxElementOwner.IsMouseOver">
            <summary>
            Gets a value indicating whether the mouse is over the control.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.IEditBoxElementOwner.TextElement">
            <summary>
            Gets the TextElement.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ITextBoxElementOwner.AutoCompleteSource">
            <summary>
            Gets the auto completion source.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.ComboBox">
            <summary>
            A ComboBox control.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.DropDownList">
            <summary>
            A DropDownList control.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.ListControl">
            <summary>
            The abstract base class of controls which display a list.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.Elements.IListElementOwner">
            <summary>
            Enables a class the be the parent of a ListBoxElement.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.IListElementOwner.DeselectItems(Miyagi.UI.Controls.ListItem[])">
            <summary>
            Deselects all specified items.
            </summary>
            <param name="items">The items to deselect.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.IListElementOwner.SelectItems(Miyagi.UI.Controls.ListItem[])">
            <summary>
            Selects all specified items.
            </summary>
            <param name="items">The items to select.</param>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.IListElementOwner.DefaultKeysEnabled">
            <summary>
            Gets a value indicating whether the default key commands are enabled.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.IListElementOwner.Items">
            <summary>
            Gets the collection of items.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.IListElementOwner.ListBoxCroppingDisabled">
            <summary>
            Gets a value indicating whether the items should be cropped.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.IListElementOwner.ListBoxHeight">
            <summary>
            Gets the total height available for items.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.IListElementOwner.ListBoxVerticalOffset">
            <summary>
            Gets the fixed vertical offset.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.IListElementOwner.ShouldShowScrollBar">
            <summary>
            Gets a value indicating whether the scrollbar should be displayed.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.ListControl.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ListControl class.
            </summary>
            <param name="name">The name of the ListControl.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ListControl.ClearSelected">
            <summary>
            Deselects all selected items.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.ListControl.DeselectItems(Miyagi.UI.Controls.ListItem[])">
            <summary>
            Deselects all specified items.
            </summary>
            <param name="items">The items to deselect.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ListControl.SelectItems(Miyagi.UI.Controls.ListItem[])">
            <summary>
            Selects all specified items.
            </summary>
            <param name="items">The items to select.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ListControl.SelectItems(System.String[])">
            <summary>
            Selects all specified items.
            </summary>
            <param name="selectedItems">The items to select.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ListControl.Dispose(System.Boolean)">
            <summary>
            Disposes the control.
            </summary>
            <param name="disposing">Whether Dispose has been called.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ListControl.DoResize(System.Double,System.Double)">
            <summary>
            Resizes the control.
            </summary>
            <param name="widthFactor">The relative growth of the width.</param>
            <param name="heightFactor">The relative growth of the height.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ListControl.OnHoveredIndexChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.ListControl.HoveredIndexChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ListControl.OnKeyDown(Miyagi.Common.Events.KeyboardEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.KeyDown"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.KeyboardEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ListControl.OnKeyUp(Miyagi.Common.Events.KeyboardEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.KeyUp"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.KeyboardEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ListControl.OnMouseClick(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseClick"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ListControl.OnMouseDoubleClick(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseDoubleClick"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ListControl.OnMouseDown(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseDown"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ListControl.OnMouseDrag(Miyagi.Common.Events.ChangedValueEventArgs{Miyagi.Common.Data.Point})">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseDrag"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.ChangedValueEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ListControl.OnMouseHeld(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseHeld"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ListControl.OnMouseHover(Miyagi.Common.Events.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseHover"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ListControl.OnMouseLeave(Miyagi.Common.Events.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseLeave"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ListControl.OnMouseUp(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseUp"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ListControl.OnMouseWheelMoved(Miyagi.Common.Events.ValueEventArgs{System.Int32})">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseWheelMoved"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.ValueEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ListControl.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.ListControl.SelectedIndexChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ListControl.OnSelectedIndiciesChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.ListControl.SelectedIndiciesChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ListControl.OnSizeChanged(Miyagi.Common.Events.ChangedValueEventArgs{Miyagi.Common.Data.Size})">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.SizeChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.ChangedValueEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ListControl.UpdateCore">
            <summary>
            Updates the control.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.ListControl.HoveredIndexChanged">
            <summary>
            Occurs when the <see cref="P:Miyagi.UI.Controls.ListControl.HoveredIndex"/> property is changed.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.ListControl.ItemAdded">
            <summary>
            Occurs when an item is added to the collection.
            </summary>
            <remarks>Submits the added item.</remarks>
        </member>
        <member name="E:Miyagi.UI.Controls.ListControl.ItemRemoved">
            <summary>
            Occurs when an item is removed from the collection.
            </summary>
            <remarks>Submits the removed item.</remarks>
        </member>
        <member name="E:Miyagi.UI.Controls.ListControl.SelectedIndexChanged">
            <summary>
            Occurs when the <see cref="P:Miyagi.UI.Controls.ListControl.SelectedIndex"/> property is changed.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.ListControl.SelectedIndiciesChanged">
            <summary>
            Occurs when the <see cref="P:Miyagi.UI.Controls.ListControl.SelectedIndicies"/> property is changed.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.ListControl.HoveredIndex">
            <summary>
            Gets or sets the index over which the mouse cursor currently hovers.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.ListControl.Items">
            <summary>
            Gets or sets the collection of items.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.ListControl.ListBoxCroppingDisabled">
            <summary>
            Gets a value indicating whether the items should be cropped.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.ListControl.ListBoxHeight">
            <summary>
            Gets the total height available for items.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.ListControl.ListBoxVerticalOffset">
            <summary>
            Gets the fixed vertical offset.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.ListControl.ListStyle">
            <summary>
            Gets or sets the style of the ListBoxElement.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.ListControl.SelectedIndex">
            <summary>
            Gets or sets the index of the selected item.
            </summary>
            <value>The index of the selected item. Returns -1 if no item is selected.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.ListControl.SelectedIndicies">
            <summary>
            Gets the selected indicies.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.ListControl.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.ListControl.SelectedItems">
            <summary>
            Gets the selected items.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.ListControl.ShouldShowScrollBar">
            <summary>
            Gets a value indicating whether the scrollbar should be displayed.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.ListControl.TopItemIndex">
            <summary>
            Gets or sets the index of the first item in the list.
            </summary>
            <value>The index of the first item.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.ListControl.VisibleItemCount">
            <summary>
            Gets the number of visible items.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.ListControl.IsArrowKeyMovementBlocked">
            <summary>
            Gets a value indicating whether arrow key movement is blocked.
            </summary>
            <value>
            <c>true</c> if arrow key movement is blocked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Miyagi.UI.Controls.ListControl.Elements">
            <summary>
            Gets a list of elements.
            </summary>
            <value>A list of elements.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.ListControl.ListElement">
            <summary>
            Gets the ListBoxElement.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.DropDownList.#ctor">
            <summary>
            Initializes a new instance of the DropDownList class.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.DropDownList.#ctor(System.String)">
            <summary>
            Initializes a new instance of the DropDownList class.
            </summary>
            <param name="name">The name of the DropDownList.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.DropDownList.Dispose(System.Boolean)">
            <summary>
            Disposes the control.
            </summary>
            <param name="disposing">Whether Dispose has been called.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.DropDownList.DoResize(System.Double,System.Double)">
            <summary>
            Resizes the control.
            </summary>
            <param name="widthFactor">The relative growth of the width.</param>
            <param name="heightFactor">The relative growth of the height.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.DropDownList.HideDropDownList">
            <summary>
            Hides the drop down list.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.DropDownList.OnLostFocus(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.LostFocus"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.DropDownList.OnMouseDown(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseDown"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.DropDownList.OnMouseHover(Miyagi.Common.Events.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseHover"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.DropDownList.OnMouseLeave(Miyagi.Common.Events.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseLeave"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.DropDownList.OnMouseUp(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseUp"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.DropDownList.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.ListControl.SelectedIndexChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.DropDownList.OnSizeChanged(Miyagi.Common.Events.ChangedValueEventArgs{Miyagi.Common.Data.Size})">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.SizeChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.ChangedValueEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.DropDownList.OnSkinChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.SkinnedControl.SkinChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.DropDownList.ShowDropDownList">
            <summary>
            Shows the drop down list.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.DropDownList.SwitchDropDownListVisibility">
            <summary>
            Switches the drop down list visibility.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.DropDownList.UpdateCore">
            <summary>
            Updates the control.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.DropDownList.DropDownSize">
            <summary>
            Gets or sets the size of the drop-down list.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.DropDownList.ListBoxCroppingDisabled">
            <summary>
            Gets a value indicating whether the items should be cropped.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.DropDownList.ListBoxHeight">
            <summary>
            Gets the total height available for items.
            </summary>
            <value>An <see cref="T:System.Int32"/> representing the total height available for items.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.DropDownList.ListBoxVerticalOffset">
            <summary>
            Gets the fixed vertical item offset.
            </summary>
            <value>An <see cref="T:System.Int32"/> representing the fixed vertical item offset.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.DropDownList.ShouldShowScrollBar">
            <summary>
            Gets a value indicating whether the scrollbar should be displayed.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.DropDownList.IsExceedingParent">
            <summary>
            Gets a value indicating whether the control exceeds its parent.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.DropDownList.ButtonElement">
            <summary>
            Gets the button element.
            </summary>
            <value>The button element.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.DropDownList.DropDownVisible">
            <summary>
            Gets a value indicating whether the drop down list is visible.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.DropDownList.Elements">
            <summary>
            Gets a list of elements.
            </summary>
            <value>A list of elements.</value>
        </member>
        <member name="M:Miyagi.UI.Controls.ComboBox.#ctor">
            <summary>
            Initializes a new instance of the ComboBox class.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.ComboBox.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ComboBox class.
            </summary>
            <param name="name">The name of the ComboBox.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ComboBox.DeselectText">
            <summary>
            Deselects the text.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.ComboBox.Dispose(System.Boolean)">
            <summary>
            Disposes the control.
            </summary>
            <param name="disposing">Whether Dispose has been called.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ComboBox.DoResize(System.Double,System.Double)">
            <summary>
            Resizes the control.
            </summary>
            <param name="widthFactor">The relative growth of the width.</param>
            <param name="heightFactor">The relative growth of the height.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ComboBox.OnKeyDown(Miyagi.Common.Events.KeyboardEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.KeyDown"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.KeyboardEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ComboBox.OnKeyUp(Miyagi.Common.Events.KeyboardEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.KeyUp"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.KeyboardEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ComboBox.OnMouseDown(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Handles mouse press events.
            </summary>
            <param name="e">A MouseButtonEventArgs that contains the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ComboBox.OnMouseDrag(Miyagi.Common.Events.ChangedValueEventArgs{Miyagi.Common.Data.Point})">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseDrag"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.ChangedValueEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ComboBox.OnMouseHover(Miyagi.Common.Events.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseHover"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ComboBox.OnTextChanged(Miyagi.Common.Events.TextEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Label.TextChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.TextEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ComboBox.UpdateCore">
            <summary>
            Updates the control.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.ComboBox.AutoCompleteEnabled">
            <summary>
            Gets or sets a value indicating whether auto completion is enabled.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.ComboBox.AutoCompleteSource">
            <summary>
            Gets the auto completion source.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.ComboBox.CaretLocation">
            <summary>
            Gets or sets the location of the caret.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.ComboBox.DisplayedText">
            <summary>
            Gets the displayed text.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.ComboBox.IsKeyDown">
            <summary>
            Gets a value indicating whether a key is currently pressed.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.ComboBox.TextBoxStyle">
            <summary>
            Gets or sets the style of the TextBox.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.ComboBox.IsArrowKeyMovementBlocked">
            <summary>
            Gets a value indicating whether arrow key movement is blocked.
            </summary>
            <value>
            <c>true</c> if arrow key movement is blocked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Miyagi.UI.Controls.ComboBox.Elements">
            <summary>
            Gets a list of elements.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.ComboBox.TextBoxElement">
            <summary>
            Gets the TextBoxElement.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.ControlCollection">
            <summary>
            A custom collection of controls.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.ControlCollection.#ctor(Miyagi.UI.Controls.IControlCollectionOwner)">
            <summary>
            Initializes a new instance of the ControlCollection class.
            </summary>
            <param name="owner">The parent of the collection.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ControlCollection.Add(Miyagi.UI.Controls.Control)">
            <summary>
            Adds a control to the collection.
            </summary>
            <param name="item">The new control.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ControlCollection.BringToFront(Miyagi.UI.Controls.Control)">
            <summary>
            Brings the specified control to the front.
            </summary>
            <param name="control">The control that should be brought to the front.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ControlCollection.Insert(System.Int32,Miyagi.UI.Controls.Control)">
            <summary>
            Inserts a control into the list at the specified index.
            </summary>
            <param name="index">The zero-based index at which control should be inserted.</param>
            <param name="item">The control to insert.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ControlCollection.Remove(Miyagi.UI.Controls.Control)">
            <summary>
            Removes a control from the collection.
            </summary>
            <param name="item">The control to remove.</param>
            <returns><c>true</c> if the control has been removed sucessfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.ControlCollection.SendToBack(Miyagi.UI.Controls.Control)">
            <summary>
            Sends the specified control to the back.
            </summary>
            <param name="control">The control that should be send to the back.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ControlCollection.SetupChild(Miyagi.UI.Controls.Control)">
            <summary>
            Sets up the newly added child.
            </summary>
            <param name="item">The control added to the collection.</param>
        </member>
        <member name="P:Miyagi.UI.Controls.ControlCollection.Owner">
            <summary>
            Gets the owner of the ControlCollection.
            </summary>
            <value>An object representing the owner.</value>
        </member>
        <member name="T:Miyagi.UI.Controls.DialogBox">
            <summary>
            A DialogBox.
            </summary>
        </member>
        <member name="T:Miyagi.UI.ModalGUI">
            <summary>
            A GUI that block all other GUIs when it's shown.
            </summary>
        </member>
        <member name="T:Miyagi.UI.GUI">
            <summary>
            A GUI represents a composite group of controls.
            </summary>
        </member>
        <member name="M:Miyagi.UI.GUI.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.UI.GUI"/> class.
            </summary>
        </member>
        <member name="M:Miyagi.UI.GUI.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.UI.GUI"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Miyagi.UI.GUI.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Miyagi.UI.GUI"/> class.
            </summary>
        </member>
        <member name="M:Miyagi.UI.GUI.Miyagi#UI#Controls#IControlCollectionOwner#NotifyControlAdded(Miyagi.UI.Controls.Control)">
            <summary>
            Notifies the GUI that a new control has been added.
            </summary>
            <param name="control">The new control.</param>
            <remarks>This method supports the internal infrastructure and should not be called by user code.</remarks>
        </member>
        <member name="M:Miyagi.UI.GUI.Miyagi#UI#Controls#IControlCollectionOwner#NotifyControlRemoved(Miyagi.UI.Controls.Control)">
            <summary>
            Notifies the GUI that a control has been removed.
            </summary>
            <param name="control">The removed control.</param>
            <remarks>This method supports the internal infrastructure and should not be called by user code.</remarks>
        </member>
        <member name="M:Miyagi.UI.GUI.Dispose">
            <summary>
            Releases the unmanaged resources used by the GUI and disposes all of its controls.
            </summary>
        </member>
        <member name="M:Miyagi.UI.GUI.DisposeAllControls">
            <summary>
            Disposes all Controls.
            </summary>
        </member>
        <member name="M:Miyagi.UI.GUI.EnsureZOrder">
            <summary>
            Ensures the Z-order of all controls.
            </summary>
        </member>
        <member name="M:Miyagi.UI.GUI.Fade(System.Single,System.Single,System.TimeSpan)">
            <summary>
            Fades the GUI.
            </summary>
            <param name="startOpacity">The start opacity.</param>
            <param name="endOpacity">The end opacity.</param>
            <param name="fadeDuration">The duration of the fade operation.</param>
        </member>
        <member name="M:Miyagi.UI.GUI.Fade(System.Single,System.Single,System.Int32)">
            <summary>
            Fades the GUI.
            </summary>
            <param name="startOpacity">The start opacity.</param>
            <param name="endOpacity">The end opacity.</param>
            <param name="fadeDuration">The duration of the fade operation in milliseconds.</param>
        </member>
        <member name="M:Miyagi.UI.GUI.ForceRedraw">
            <summary>
            Forces a redraw of all controls with the next update.
            </summary>
        </member>
        <member name="M:Miyagi.UI.GUI.GetControl``1(System.String)">
            <summary>
            Gets a control of the specified type by name.
            </summary>
            <param name="name">The name of the control.</param>
            <returns>The first control of that name if it exists, otherwise null.</returns>
            <typeparam name="T">The type of the control.</typeparam>
        </member>
        <member name="M:Miyagi.UI.GUI.GetControl(System.String)">
            <summary>
            Gets a control by name.
            </summary>
            <param name="name">The name of the control.</param>
            <returns>If it exists the first control with that name, otherwise null.</returns>
        </member>
        <member name="M:Miyagi.UI.GUI.GetTopControl">
            <summary>
            Returns the topmost control of the GUI under the mouse cursor.
            </summary>
            <returns>If there is a control under the cursor the topmost, otherwise null.</returns>
        </member>
        <member name="M:Miyagi.UI.GUI.GetTopControlAt(Miyagi.Common.Data.Point)">
            <summary>
            Returns the topmost control at the specified coordinate.
            </summary>
            <param name="p">The coordinate.</param>
            <returns>If there is a control at the position the topmost, otherwise null.</returns>
        </member>
        <member name="M:Miyagi.UI.GUI.GetTopControlAt(System.Int32,System.Int32)">
            <summary>
            Returns the topmost control at the specified coordinate.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <returns>If there is a control at the position the topmost, otherwise null.</returns>
        </member>
        <member name="M:Miyagi.UI.GUI.InjectMouseLeave">
            <summary>
            Triggers mouse leave events.
            </summary>
        </member>
        <member name="M:Miyagi.UI.GUI.InjectMouseMoved">
            <summary>
            Triggers mouse move events.
            </summary>
        </member>
        <member name="M:Miyagi.UI.GUI.Resize(System.Double,System.Double)">
            <summary>
            Resizes the GUI.
            </summary>
            <param name="widthFactor">The relative growth of the width.</param>
            <param name="heightFactor">The relative growth of the height.</param>
        </member>
        <member name="M:Miyagi.UI.GUI.ToString">
            <summary>
            Returns the name of the GUI.
            </summary>
            <returns>The name of the GUI.</returns>
        </member>
        <member name="M:Miyagi.UI.GUI.Update">
            <summary>
            Updates the GUI.
            </summary>
        </member>
        <member name="M:Miyagi.UI.GUI.CreateSpriteRenderer(Miyagi.Common.MiyagiSystem)">
            <summary>
            Creates the sprite renderer.
            </summary>
            <param name="system">The system.</param>
        </member>
        <member name="M:Miyagi.UI.GUI.DestroySpriteRenderer">
            <summary>
            Destroys the sprite renderer.
            </summary>
        </member>
        <member name="M:Miyagi.UI.GUI.InjectMouseLeave(Miyagi.UI.Controls.Control)">
            <summary>
            Triggers mouse leave events.
            </summary>
            <param name="topControl">The top control.</param>
        </member>
        <member name="M:Miyagi.UI.GUI.InjectMouseMoved(Miyagi.UI.Controls.Control)">
            <summary>
            Triggers mouse move events.
            </summary>
            <param name="topControl">The top control.</param>
        </member>
        <member name="M:Miyagi.UI.GUI.GetTopControlAt(Miyagi.UI.Controls.ControlCollection,Miyagi.Common.Data.Point)">
            <summary>
            Returns the topmost control at the specified coordinate.
            </summary>
            <param name="cc">The control collection.</param>
            <param name="p">The coordinate.</param>
            <returns>
            If there is a control at the position the topmost, otherwise null.
            </returns>
        </member>
        <member name="M:Miyagi.UI.GUI.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the GUI and disposed all its controls.
            </summary>
            <param name="disposing">Whether Dispose has been called.</param>
        </member>
        <member name="M:Miyagi.UI.GUI.DoResize(System.Double,System.Double)">
            <summary>
            Resizes the GUI.
            </summary>
            <param name="widthFactor">The relative growth of the width.</param>
            <param name="heightFactor">The relative growth of the height.</param>
        </member>
        <member name="M:Miyagi.UI.GUI.OnControlRemoved(Miyagi.Common.Events.ValueEventArgs{Miyagi.UI.Controls.Control})">
            <summary>
            Handles removal of controls.
            </summary>
            <param name="e">The ValueEventArgs.</param>
        </member>
        <member name="M:Miyagi.UI.GUI.OnTopControlAdded(Miyagi.Common.Events.ValueEventArgs{Miyagi.UI.Controls.Control})">
            <summary>
            Handles addition of controls.
            </summary>
            <param name="e">The ValueEventArgs.</param>
        </member>
        <member name="M:Miyagi.UI.GUI.OnVisibleChanged(System.EventArgs)">
            <summary>
            Raises the VisibleChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Miyagi.UI.GUI.UpdateCore">
            <summary>
            Updates the GUI
            </summary>
        </member>
        <member name="E:Miyagi.UI.GUI.Updated">
            <summary>
            Occurs after the GUI has been updated.
            </summary>
        </member>
        <member name="E:Miyagi.UI.GUI.Updating">
            <summary>
            Occurs before the GUI has been updated.
            </summary>
        </member>
        <member name="E:Miyagi.UI.GUI.VisibleChanged">
            <summary>
            Occurs when the <see cref="P:Miyagi.UI.GUI.Visible"/> property changes.
            </summary>
        </member>
        <member name="P:Miyagi.UI.GUI.AllControls">
            <summary>
            Gets an enumerator for a simple iteration over all controls of the GUI.
            </summary>
        </member>
        <member name="P:Miyagi.UI.GUI.AllControlsReverse">
            <summary>
            Gets an enumerator for a simple iteration over all controls of the GUI in reverse direction.
            </summary>
        </member>
        <member name="P:Miyagi.UI.GUI.Controls">
            <summary>
            Gets the collection of controls.
            </summary>
        </member>
        <member name="P:Miyagi.UI.GUI.GUIManager">
            <summary>
            Gets the <see cref="P:Miyagi.UI.GUI.GUIManager"/>.
            </summary>
        </member>
        <member name="P:Miyagi.UI.GUI.MiyagiSystem">
            <summary>
            Gets the <see cref="P:Miyagi.UI.GUI.MiyagiSystem"/>.
            </summary>
        </member>
        <member name="P:Miyagi.UI.GUI.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Miyagi.UI.GUI.SpriteRenderer">
            <summary>
            Gets or sets the <see cref="T:Miyagi.Common.Rendering.ISpriteRenderer"/>.
            </summary>
            <remarks>The sprite renderer is created after the GUI has been added to the <see cref="P:Miyagi.UI.GUI.GUIManager"/>.</remarks>
        </member>
        <member name="P:Miyagi.UI.GUI.Visible">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Miyagi.UI.GUI"/> is visible.
            </summary>
            <value><c>true</c> if the <see cref="T:Miyagi.UI.GUI"/> is visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Miyagi.UI.GUI.ZOrder">
            <summary>
            Gets or sets the z-order.
            </summary>
        </member>
        <member name="T:Miyagi.UI.IModalDialog">
            <summary>
            Enables a class to be a modal dialog.
            </summary>
        </member>
        <member name="M:Miyagi.UI.IModalDialog.GetTopControlAt(System.Int32,System.Int32)">
            <summary>
            Returns the topmost control at the specified position.
            </summary>
            <param name="x">The x-coordinate of the position where you want to look for a control.</param>
            <param name="y">The y-coordinate of the position where you want to look for a control.</param>
            <returns>If there is a control at the position the topmost; otherwise, null.</returns>
        </member>
        <member name="M:Miyagi.UI.IModalDialog.InjectMouseLeave">
            <summary>
            Signals that the mouse has left.
            </summary>
        </member>
        <member name="M:Miyagi.UI.IModalDialog.InjectMouseMoved">
            <summary>
            Signals that the mouse has been moved.
            </summary>
        </member>
        <member name="M:Miyagi.UI.IModalDialog.Update">
            <summary>
            Updated the modal dialog.
            </summary>
        </member>
        <member name="P:Miyagi.UI.IModalDialog.SpriteRenderer">
            <summary>
            Gets the SpriteRenderer.
            </summary>
        </member>
        <member name="M:Miyagi.UI.ModalGUI.#ctor">
            <summary>
            Initializes a new instance of the ModalGUI class.
            </summary>
        </member>
        <member name="M:Miyagi.UI.ModalGUI.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ModalGUI class.
            </summary>
            <param name="name">The name of the ModalGUI.</param>
        </member>
        <member name="M:Miyagi.UI.ModalGUI.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the GUI and disposed all its controls.
            </summary>
            <param name="disposing">Whether Dispose has been called.</param>
        </member>
        <member name="M:Miyagi.UI.ModalGUI.OnVisibleChanged(System.EventArgs)">
            <summary>
            Raises the VisibleChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Miyagi.UI.ModalGUI.Pop">
            <summary>
            Pops this instance.
            </summary>
        </member>
        <member name="M:Miyagi.UI.ModalGUI.Push">
            <summary>
            Pushes this instance.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.DialogBox.Show(System.String,System.String)">
            <summary>
            Shows the DialogBox.
            </summary>
            <param name="text">The text of the DialogBox.</param>
            <param name="title">The title of the DialogBox.</param>
            <returns>A DialogResult enum representing the pressed button.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.DialogBox.Show(System.String,System.String,Miyagi.UI.DialogBoxButtons)">
            <summary>
            Shows the DialogBox.
            </summary>
            <param name="text">The text of the DialogBox.</param>
            <param name="title">The title of the DialogBox.</param>
            <param name="buttons">The buttons of the DialogBox.</param>
            <returns>A DialogResult enum representing the pressed button.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.DialogBox.Show(System.String,System.String,Miyagi.UI.DialogBoxButtons,Miyagi.UI.Controls.DialogBoxSettings)">
            <summary>
            Shows the DialogBox.
            </summary>
            <param name="text">The text of the DialogBox.</param>
            <param name="title">The title of the DialogBox.</param>
            <param name="buttons">The buttons of the DialogBox.</param>
            <param name="settings">The settings.</param>
            <returns>
            A DialogResult enum representing the pressed button.
            </returns>
        </member>
        <member name="P:Miyagi.UI.Controls.DialogBox.ButtonSkin">
            <summary>
            Gets or sets the button skin.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.DialogBox.Skin">
            <summary>
            Gets or sets the skin.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.DialogBoxSettings">
            <summary>
            Represents settings for the <see cref="T:Miyagi.UI.Controls.DialogBox"/>.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.DialogBoxSettings.#ctor(Miyagi.Common.Data.Size,Miyagi.Common.Data.Point,Miyagi.Common.Data.Point,Miyagi.Common.Data.Point,Miyagi.Common.Data.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.UI.Controls.DialogBoxSettings"/> class.
            </summary>
            <param name="buttonSize">Size of the button.</param>
            <param name="buttonTextOffset">The button text offset.</param>
            <param name="labelTextOffset">The label text offset.</param>
            <param name="location">The location.</param>
            <param name="size">The size.</param>
        </member>
        <member name="P:Miyagi.UI.Controls.DialogBoxSettings.ButtonSize">
            <summary>
            Gets the size of the button.
            </summary>
            <value>The size of the button.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.DialogBoxSettings.ButtonTextOffset">
            <summary>
            Gets the button text offset.
            </summary>
            <value>The button text offset.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.DialogBoxSettings.LabelTextOffset">
            <summary>
            Gets the label text offset.
            </summary>
            <value>The label text offset.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.DialogBoxSettings.Location">
            <summary>
            Gets the location.
            </summary>
            <value>The location.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.DialogBoxSettings.Size">
            <summary>
            Gets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="T:Miyagi.UI.Controls.Elements.BorderElement">
            <summary>
            An element for displaying a border.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.Elements.Element`2">
            <summary>
            The base class for elements.
            </summary>
            <typeparam name = "TOwner">The type of the owner.</typeparam>
            <typeparam name = "TStyle">The type of the style.</typeparam>
        </member>
        <member name="T:Miyagi.UI.Controls.Elements.IElement">
            <summary>
            Interface for Elements.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.IElement.ApplyOpacity">
            <summary>
            Applies the opacity.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.IElement.ApplyTextureFiltering">
            <summary>
            Applies the TextureFiltering.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.IElement.ApplyVisibility">
            <summary>
            Applies the visibility.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.IElement.ApplyZOrder">
            <summary>
            Applies the ZOrder.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.IElement.AreAllSpritesNull">
            <summary>
            Returns whether the Sprites property is null.
            </summary>
            <returns><c>true</c> if the Sprites property is null; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.IElement.GetZOrder">
            <summary>
            Gets the ZOrder.
            </summary>
            <returns>An <see cref="T:System.Int32"/> representing the zorder.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.IElement.HitTest(Miyagi.Common.Data.Point)">
            <summary>
            Performs a hit test.
            </summary>
            <param name="p">The coordinate.</param>
            <returns><c>true</c> if the Sprite is hit; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.IElement.InjectKeyDown(Miyagi.Common.Events.KeyboardEventArgs)">
            <summary>
            Injects a pressed key.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.KeyboardEventArgs"/> to inject.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.IElement.InjectKeyUp(Miyagi.Common.Events.KeyboardEventArgs)">
            <summary>
            Inject a released key.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.KeyboardEventArgs"/> to inject.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.IElement.InjectMouseDown(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Inject a pressed mouse button.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseButtonEventArgs"/> to inject.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.IElement.InjectMouseDrag(Miyagi.Common.Events.ChangedValueEventArgs{Miyagi.Common.Data.Point})">
            <summary>
            Inject a dragged mouse.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.ChangedValueEventArgs`1"/> to inject.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.IElement.InjectMouseEnter(Miyagi.Common.Events.MouseEventArgs)">
            <summary>
            Inject an entering mouse.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseEventArgs"/> to inject.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.IElement.InjectMouseHover(Miyagi.Common.Events.MouseEventArgs)">
            <summary>
            Inject a hovering mouse.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseEventArgs"/> to inject.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.IElement.InjectMouseLeave(Miyagi.Common.Events.MouseEventArgs)">
            <summary>
            Inject a leaving mouse.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseEventArgs"/> to inject.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.IElement.InjectMouseUp(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Inject a released mouse button.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseButtonEventArgs"/> to inject.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.IElement.InjectMouseWheelMoved(Miyagi.Common.Events.ValueEventArgs{System.Int32})">
            <summary>
            Inject a moved mouse wheel.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.ValueEventArgs`1"/> to inject.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.IElement.Move(Miyagi.Common.Data.Point)">
            <summary>
            Moves the sprites of the element.
            </summary>
            <param name="offset">The distance to move.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.IElement.RemoveSprite">
            <summary>
            Removes the sprites.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.IElement.Resize(Miyagi.Common.Data.Point)">
            <summary>
            Resizes the sprites of the element.
            </summary>
            <param name="diff">The distance to resize.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.IElement.RestartTextureAnimation">
            <summary>
            Restarts the texture animation.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.IElement.StopTextureAnimation">
            <summary>
            Stops the texture animation.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.IElement.Update">
            <summary>
            Updates the element.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.IElement.UpdateSpriteCrop">
            <summary>
            Updates the crop of the sprites.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.IElement.CroppingDisabled">
            <summary>
            Gets or sets a value indicating whether sprites of the Element should not be cropped.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.IElement.Owner">
            <summary>
            Gets the owner of the element.
            </summary>
            <value>A IElementOwner representing the owner.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.IElement.OwningControl">
            <summary>
            Gets the owning control.
            </summary>
            <value>A Control representing the owner of the element.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.IElement.Sprite">
            <summary>
            Gets the sprite of the element.
            </summary>
            <value>The Sprite of the element.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.IElement.SpriteRenderer">
            <summary>
            Gets the sprite renderer.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.IElement.SubElements">
            <summary>
            Gets a collection of subelement.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.IElement.Texture">
            <summary>
            Gets or sets the texture.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.IElement.UpdateType">
            <summary>
            Gets or sets the UpdateType.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.#ctor(`0,System.Func{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.UI.Controls.Elements.Element`2"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="zorderGetter">The zorder getter.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.Finalize">
            <summary>
            Finalizes an instance of the Element class.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.ApplyOpacity">
            <summary>
            Applies the opacity.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.ApplyTextureFiltering">
            <summary>
            Applies the TextureFiltering.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.ApplyVisibility">
            <summary>
            Applies the visibility.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.ApplyZOrder">
            <summary>
            Applies the ZOrder.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.AreAllSpritesNull">
            <summary>
            Returns whether the Sprites property is null.
            </summary>
            <returns><c>true</c> if the Sprites property is null; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.Dispose">
            <summary>
            Releases the unmanaged resources used by the element.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.GetZOrder">
            <summary>
            Gets the Z-order.
            </summary>
            <returns>An <see cref="T:System.Int32"/> representing the Z-order.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.HitTest(Miyagi.Common.Data.Point)">
            <summary>
            Performs a hit test.
            </summary>
            <param name="p">The coordinate.</param>
            <returns>
            <c>true</c> if the coordinates hit the element; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.InjectKeyDown(Miyagi.Common.Events.KeyboardEventArgs)">
            <summary>
            Injects a pressed key.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.KeyboardEventArgs"/> to inject.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.InjectKeyHeld(Miyagi.Common.Events.KeyboardEventArgs)">
            <summary>
            Injects a held key.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.KeyboardEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.InjectKeyUp(Miyagi.Common.Events.KeyboardEventArgs)">
            <summary>
            Inject a released key.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.KeyboardEventArgs"/> to inject.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.InjectMouseDown(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Inject a pressed mouse button.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseButtonEventArgs"/> to inject.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.InjectMouseDrag(Miyagi.Common.Events.ChangedValueEventArgs{Miyagi.Common.Data.Point})">
            <summary>
            Inject a dragged mouse.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.ChangedValueEventArgs`1"/> to inject.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.InjectMouseEnter(Miyagi.Common.Events.MouseEventArgs)">
            <summary>
            Inject an entering mouse.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseEventArgs"/> to inject.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.InjectMouseHeld(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Injects a held mouse button.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.InjectMouseHover(Miyagi.Common.Events.MouseEventArgs)">
            <summary>
            Inject a hovering mouse.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseEventArgs"/> to inject.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.InjectMouseLeave(Miyagi.Common.Events.MouseEventArgs)">
            <summary>
            Inject a leaving mouse.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseEventArgs"/> to inject.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.InjectMouseUp(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Inject a released mouse button.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseButtonEventArgs"/> to inject.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.InjectMouseWheelMoved(Miyagi.Common.Events.ValueEventArgs{System.Int32})">
            <summary>
            Inject a moved mouse wheel.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.ValueEventArgs`1"/> to inject.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.Move(Miyagi.Common.Data.Point)">
            <summary>
            Moves the sprites of the element.
            </summary>
            <param name="offset">The distance to move.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.RemoveSprite">
            <summary>
            Removes the sprite.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.Resize(Miyagi.Common.Data.Point)">
            <summary>
            Resizes the sprites of the element.
            </summary>
            <param name="diff">The distance to resize.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.RestartTextureAnimation">
            <summary>
            Restarts the texture animation.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.StopTextureAnimation">
            <summary>
            Stops the texture animation.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.Update">
            <summary>
            Updates the element.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.Update(Miyagi.Common.Data.Point,Miyagi.Common.Data.Point)">
            <summary>
            Updates the element.
            </summary>
            <param name="deltaLocation">The location delta.</param>
            <param name="deltaSize">The size delta.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.UpdateSpriteCrop">
            <summary>
            Crops the sprites.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the element.
            </summary>
            <param name="disposing">Whether Dispose has been called.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.ForEachSubElement(System.Action{Miyagi.UI.Controls.Elements.IElement})">
            <summary>
            Executes an action for each sub element.
            </summary>
            <param name="action">The Action.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.GetBounds">
            <summary>
            Gets the bounds.
            </summary>
            <returns>A Rectangle describing the bounds of the element.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.GetDefaultTexture">
            <summary>
            Gets the default texture.
            </summary>
            <returns>The default texture.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.OnKeyDown(Miyagi.Common.Events.KeyboardEventArgs)">
            <summary>
            Handles KeyDown injections.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.KeyboardEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.OnKeyHeld(Miyagi.Common.Events.KeyboardEventArgs)">
            <summary>
            Handles KeyHeld injections.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.KeyboardEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.OnKeyUp(Miyagi.Common.Events.KeyboardEventArgs)">
            <summary>
            Handles KeyUp injections.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.KeyboardEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.OnMouseDown(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Handles MouseDown injections.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.OnMouseDrag(Miyagi.Common.Events.ChangedValueEventArgs{Miyagi.Common.Data.Point})">
            <summary>
            Handles MouseDrag injections.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.ChangedValueEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.OnMouseEnter(Miyagi.Common.Events.MouseEventArgs)">
            <summary>
            Handles MouseEnter injections.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.OnMouseHeld(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Handles MouseHeld injections.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.OnMouseHover(Miyagi.Common.Events.MouseEventArgs)">
            <summary>
            Handles MouseHover injections.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.OnMouseLeave(Miyagi.Common.Events.MouseEventArgs)">
            <summary>
            Handles MouseLeave injections.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.OnMouseUp(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Handles MouseUp injections.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.OnMouseWheelMoved(Miyagi.Common.Events.ValueEventArgs{System.Int32})">
            <summary>
            Handles MouseWheel injections.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.ValueEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.OnStylePropertyChanged(System.String)">
            <summary>
            Handles changed style properties.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.OnStylePropertyChanging(System.String)">
            <summary>
            Handles changing style properties.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.PrepareSprite(Miyagi.Common.Rendering.Quad[])">
            <summary>
            Prepares the sprite of the element.
            </summary>
            <param name="quads">The quads.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.SetSpriteTexture">
            <summary>
            Sets the texture of the sprite to the current frame of the element.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.SetSubElementStyles">
            <summary>
            Sets the style of the sub elements.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.Element`2.UpdateCore">
            <summary>
            Updates the element.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.Element`2.CroppingDisabled">
            <summary>
            Gets or sets a value indicating whether sprites of the element can be cropped.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.Element`2.DisplayRectangle">
            <summary>
            Gets the display rectangle.
            </summary>
            <value>The display rectangle.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.Element`2.MiyagiSystem">
            <summary>
            Gets the MiyagiSystem.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.Element`2.Opacity">
            <summary>
            Gets the opacity.
            </summary>
            <value>The opacity.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.Element`2.Owner">
            <summary>
            Gets or sets the owner of the element.
            </summary>
            <value>A IElementOwner representing the owner.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.Element`2.OwningControl">
            <summary>
            Gets the owning control.
            </summary>
            <value>A Control representing the owner of the element.</value>
            <exception cref="T:System.InvalidOperationException"><c>InvalidOperationException</c>.</exception>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.Element`2.ResizeDisabled">
            <summary>
            Gets or sets a value indicating whether the element can be resized.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.Element`2.Size">
            <summary>
            Gets or sets the size.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.Element`2.Sprite">
            <summary>
            Gets or sets the sprite of the element.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.Element`2.SpriteRenderer">
            <summary>
            Gets the SpriteRenderer.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.Element`2.Style">
            <summary>
            Gets or sets the style of the element.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.Element`2.SubElements">
            <summary>
            Gets a collection of subelement.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.Element`2.Texture">
            <summary>
            Gets or sets the texture.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.Element`2.TextureFiltering">
            <summary>
            Gets the texture filtering.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.Element`2.UpdateType">
            <summary>
            Gets or sets the UpdateType.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.Element`2.ViewportSize">
            <summary>
            Gets the screen resolution.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.Element`2.Visible">
            <summary>
            Gets a value indicating whether this <see cref="T:Miyagi.UI.Controls.Elements.Element`2"/> is visible.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.Element`2.CurrentFrame">
            <summary>
            Gets the current frame.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.Element`2.CurrentUV">
            <summary>
            Gets the current uv-coordinates.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.BorderElement.#ctor(Miyagi.UI.Controls.Elements.IBorderElementOwner,System.Func{System.Int32})">
            <summary>
            Initializes a new instance of the BorderElement class.
            </summary>
            <param name="owner">The owner of the element.</param>
            <param name="zorderGetter">The zorder getter.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.BorderElement.CreateBorderQuads(Miyagi.Common.Data.Rectangle,Miyagi.Common.Data.Thickness)">
            <summary>
            Creates the Quads for a BorderElement.
            </summary>
            <param name="rect">A Rect representing the position.</param>
            <param name="thickness">The size of the border.</param>
            <returns>The newly created Quads.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.BorderElement.Resize(Miyagi.Common.Data.Point)">
            <summary>
            Resizes the sprites of the element.
            </summary>
            <param name="diff">The distance to resize.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.BorderElement.SetSize(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the size of the border.
            </summary>
            <param name="left">The size of the Left border.</param>
            <param name="top">The size of the top border.</param>
            <param name="right">The size of the right border.</param>
            <param name="bottom">The size of the bottom border.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.BorderElement.GetBounds">
            <summary>
            Gets the bounds.
            </summary>
            <returns>A Rectangle describing the bounds of the element.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.BorderElement.GetDefaultTexture">
            <summary>
            Gets the default texture.
            </summary>
            <returns>The default texture.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.BorderElement.OnStylePropertyChanged(System.String)">
            <summary>
            Handles changed style properties.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.BorderElement.OnStylePropertyChanging(System.String)">
            <summary>
            Handles changing style properties.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.BorderElement.UpdateCore">
            <summary>
            Updates the element.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.BorderElement.CreateSprite">
            <summary>
            Creates the sprite of the element.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.BorderElement.Size">
            <summary>
            Gets the size of the BorderElement.
            </summary>
            <remarks>Always returns Size.Empty.</remarks>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.BorderElement.ThicknessChangedCallback">
            <summary>
            Gets or sets a Action which is called when Style.Thickness property changes.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.BorderElement.UpdateType">
            <summary>
            Gets or sets the UpdateType.
            </summary>
            <value>An UpdateType representing what should be changed when the element is updated.</value>
        </member>
        <member name="T:Miyagi.UI.Controls.Elements.ButtonElement">
            <summary>
            An element for displaying a button.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.Elements.InteractiveElement`2">
            <summary>
            An element that changes its texture on mouse events.
            </summary>
            <typeparam name="TOwner">The type of the owner.</typeparam>
            <typeparam name="TStyle">The type of the style.</typeparam>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.InteractiveElement`2.#ctor(`0,System.Func{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.UI.Controls.Elements.InteractiveElement`2"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="zorderGetter">The zorder getter.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.InteractiveElement`2.ChangeTexture(Miyagi.Common.SkinChangingEvent)">
            <summary>
            Changes the texture.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.InteractiveElement`2.GetDefaultTexture">
            <summary>
            Gets the default texture.
            </summary>
            <returns>The default texture.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.InteractiveElement`2.OnMouseDown(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Handles MouseDown injections.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.InteractiveElement`2.OnMouseHover(Miyagi.Common.Events.MouseEventArgs)">
            <summary>
            Handles MouseHover injections.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.InteractiveElement`2.OnMouseLeave(Miyagi.Common.Events.MouseEventArgs)">
            <summary>
            Handles MouseLeave injections.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.InteractiveElement`2.OnMouseUp(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Handles MouseUp injections.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.InteractiveElement`2.CombinedSkinName">
            <summary>
            Gets the combined name of the skin.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.InteractiveElement`2.IsMouseOver">
            <summary>
            Gets a value indicating whether this instance is mouse over.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ButtonElement.#ctor(Miyagi.UI.Controls.Elements.IInteractiveElementOwner,System.Func{System.Int32},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.UI.Controls.Elements.ButtonElement"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="zorderGetter">The zorder getter.</param>
            <param name="skinName">Name of the skin.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ButtonElement.GetBounds">
            <summary>
            Gets the bounds.
            </summary>
            <returns>A Rectangle describing the bounds of the element.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ButtonElement.OnMouseDown(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Elements.ButtonElement.MouseDown"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ButtonElement.UpdateCore">
            <summary>
            Updates the element.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ButtonElement.CreateSprite">
            <summary>
            Creates the sprite of the element.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Elements.ButtonElement.MouseDown">
            <summary>
            Occurs when a mouse button is pressed.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ButtonElement.CombinedSkinName">
            <summary>
            Gets the combined name of the skin.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ButtonElement.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>The location.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ButtonElement.SkinName">
            <summary>
            Gets or sets the name of the skin.
            </summary>
            <value>The name of the skin.</value>
        </member>
        <member name="T:Miyagi.UI.Controls.Elements.CaretElement">
            <summary>
            An element for displaying a caret.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.CaretElement.#ctor(Miyagi.UI.Controls.Elements.ICaretElementOwner,System.Func{System.Int32})">
            <summary>
            Initializes a new instance of the CaretElement class.
            </summary>
            <param name="owner">The owner of the element.</param>
            <param name="zorderGetter">The zorder getter.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.CaretElement.ApplyOpacity">
            <summary>
            Applies the opacity.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.CaretElement.ApplyTextureFiltering">
            <summary>
            Applies the TextureFiltering.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.CaretElement.OnStylePropertyChanged(System.String)">
            <summary>
            Handles changed style properties.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.CaretElement.OnStylePropertyChanging(System.String)">
            <summary>
            Handles changing style properties.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.CaretElement.UpdateCore">
            <summary>
            Updates the element.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.CaretElement.CreateSprite">
            <summary>
            Creates the sprite of the element.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.CaretElement.Size">
            <summary>
            Gets the size of the CaretElement.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.Elements.EditBoxElement`2">
            <summary>
            An element for displaying a textbox.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.Elements.ICaretElementOwner">
            <summary>
            Enables a class the be the parent of a CaretElement.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ICaretElementOwner.GetNumberOfNewLinesBefore(System.Int32)">
            <summary>
            Gets the number of new lines before the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The number of new lines before the specified index.</returns>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ICaretElementOwner.CaretLocation">
            <summary>
            Gets the position of the caret.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ICaretElementOwner.IsCaretOnNewLine">
            <summary>
            Gets a value indicating whether the caret is on the beginning of a new line.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ICaretElementOwner.IsKeyDown">
            <summary>
            Gets a value indicating whether a key is currently down.
            </summary>
            <value><c>true</c> if a key is currently down; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ICaretElementOwner.TextElement">
            <summary>
            Gets the TextElement of the ICaretElementOwner.
            </summary>
            <value>A TextElement representing the text of the ICaretElementOwner.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ICaretElementOwner.TextScrollOffset">
            <summary>
            Gets the scroll offset.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.EditBoxElement`2.#ctor(`0,System.Func{System.Int32})">
            <summary>
            Initializes a new instance of the TextBoxElement class.
            </summary>
            <param name="owner">The owner of the element.</param>
            <param name="zorderGetter">The zorder getter.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.EditBoxElement`2.DeselectText">
            <summary>
            Deselects the text.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.EditBoxElement`2.GetLocationInViewport">
            <summary>
            Gets the derived location.
            </summary>
            <returns>A <see cref="T:Miyagi.Common.Data.Point"/> representing the location of the control relative to its viewport origin.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.EditBoxElement`2.GetNumberOfNewLinesBefore(System.Int32)">
            <summary>
            Gets the number of new lines before the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The number of new lines before the specified index.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.EditBoxElement`2.HandleKeyEvent(Miyagi.Common.Events.KeyEvent)">
            <summary>
            Handles a KeyEvent.
            </summary>
            <param name="arg">The KeyEvent to handle.</param>
            <returns><c>true</c> if the KeyEvent could be handled; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.EditBoxElement`2.InjectTextChanged(Miyagi.Common.Events.TextEventArgs)">
            <summary>
            Injects changed text.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.TextEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.EditBoxElement`2.InsertText(System.String)">
            <summary>
            Tries to insert a string into the TextBox.
            </summary>
            <param name="newText">String to insert.</param>
            <returns><c>true</c> if success; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.EditBoxElement`2.CheckRestrictions(System.String)">
            <summary>
            Checks the text restrictions.
            </summary>
            <param name="text">The text.</param>
            <returns><c>true</c> if the text does not violates the restrictions; otherwise <c>false</c></returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.EditBoxElement`2.GetTextLength(System.String)">
            <summary>
            Gets the length of the text.
            </summary>
            <param name="text">The text.</param>
            <returns>The length of the text.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.EditBoxElement`2.HandleKeyEventCore(Miyagi.Common.Events.KeyEvent,System.Boolean@,System.Boolean@)">
            <summary>
            Handles a KeyEvent.
            </summary>
            <param name="arg">The KeyEvent to handle.</param>
            <param name="deselectText">if set to <c>true</c> the text should be deselected.</param>
            <param name="handled">if set to <c>true</c> the keyevent has been handled.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.EditBoxElement`2.OnMouseDown(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Inject a pressed mouse button.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseButtonEventArgs"/> to inject.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.EditBoxElement`2.OnMouseDrag(Miyagi.Common.Events.ChangedValueEventArgs{Miyagi.Common.Data.Point})">
            <summary>
            Inject a dragged mouse.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.ChangedValueEventArgs`1"/> to inject.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.EditBoxElement`2.OnStylePropertyChanged(System.String)">
            <summary>
            Handles changed style properties.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.EditBoxElement`2.OnTextInserted(System.Boolean@)">
            <summary>
            Called when text is inserted.
            </summary>
            <param name="deselectText">if set to <c>true</c> the text should be deselected.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.EditBoxElement`2.RemoveSelectedText">
            <summary>
            Removes the selected text.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.EditBoxElement`2.SetSubElementStyles">
            <summary>
            Sets the style of the sub elements.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.EditBoxElement`2.UpdateCore">
            <summary>
            Updates the element.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.EditBoxElement`2.CaretElement">
            <summary>
            Gets the caret of the TextBox.
            </summary>
            <value>A CaretElement representing the caret of the TextBox.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.EditBoxElement`2.CaretLocation">
            <summary>
            Gets or sets the position of the caret.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.EditBoxElement`2.IsCaretOnNewLine">
            <summary>
            Gets a value indicating whether the caret is on the beginning of a new line.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.EditBoxElement`2.IsKeyDown">
            <summary>
            Gets a value indicating whether a key is currently down.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.EditBoxElement`2.SelectedText">
            <summary>
            Gets the selected text.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.EditBoxElement`2.SelectedTextRange">
            <summary>
            Gets or sets the first and last index of the selected text.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.EditBoxElement`2.Size">
            <summary>
            Gets the size.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.EditBoxElement`2.SubElements">
            <summary>
            Gets a collection of subelement.
            </summary>
            <value>A collection of IElements representing the subelements.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.EditBoxElement`2.TextElement">
            <summary>
            Gets the owner's TextElement.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.EditBoxElement`2.TextScrollOffset">
            <summary>
            Gets or sets the scroll offset.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.Elements.IProgressBarElementOwner">
            <summary>
            Enables a class the be the parent of a ValueElement.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.IProgressBarElementOwner.Max">
            <summary>
            Gets the maximum value.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.IProgressBarElementOwner.Min">
            <summary>
            Gets the minimum value.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.IProgressBarElementOwner.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.Elements.IScrollBarElementController">
            <summary>
            Controls the values of a ScrollBarElement.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.IScrollBarElementController.GetAutoExtent">
            <summary>
            Gets the fixed extent.
            </summary>
            <returns>An <see cref="T:System.Int32"/> representing the fixed extent in pixel.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.IScrollBarElementController.GetLocation">
            <summary>
            Gets the location.
            </summary>
            <returns>A <see cref="T:Miyagi.Common.Data.Point"/> representing the location.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.IScrollBarElementController.GetShouldShow">
            <summary>
            Gets a value indicating whether the scrollbar should be shown.
            </summary>
            <returns>A value indicating whether the scrollbar should be shown.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.IScrollBarElementController.GetTotalUnitsCount">
            <summary>
            Gets the total number of units.
            </summary>
            <returns>An <see cref="T:System.Int32"/> representing the total number of units.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.IScrollBarElementController.GetVisibleUnitsCount">
            <summary>
            Gets the number of visible units.
            </summary>
            <returns>An <see cref="T:System.Int32"/> representing the number of visible units.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.IScrollBarElementController.GetVisibleUnitsMax">
            <summary>
            Gets the maximum number of visible units.
            </summary>
            <returns>An <see cref="T:System.Int32"/> representing the maximum number of visible units.</returns>
        </member>
        <member name="T:Miyagi.UI.Controls.Elements.ITabBarElementOwner">
            <summary>
            Enables a class the be the parent of a TabBarElement.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ITabBarElementOwner.SelectedTab">
            <summary>
            Gets or sets the selected tab.
            </summary>
            <value>The selected tab.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ITabBarElementOwner.TabPages">
            <summary>
            Gets the tab pages.
            </summary>
            <value>The tab pages.</value>
        </member>
        <member name="T:Miyagi.UI.Controls.Elements.ITabElementOwner">
            <summary>
            Enables a class the be the parent of a TabElement.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ITabElementOwner.Parent">
            <summary>
            Gets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ITabElementOwner.Selected">
            <summary>
            Gets a value indicating whether this <see cref="T:Miyagi.UI.Controls.Elements.ITabElementOwner"/> is selected.
            </summary>
            <value><c>true</c> if selected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ITabElementOwner.Title">
            <summary>
            Gets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="T:Miyagi.UI.Controls.Elements.IThumbElementOwner`1">
            <summary>
            Enables a class the be the parent of a ThumbElement.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.IThumbElementOwner`1.Inverted">
            <summary>
            Gets a value indicating whether the IThumbElementOwner is inverted.
            </summary>
            <value>If true Min is the upmost / rightmost point and Max is the downmost / Leftmost point of the IThumbElementOwner.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.IThumbElementOwner`1.LargeChange">
            <summary>
            Gets the value which it added or subtracted if PageUp or PageDown is pressed.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.IThumbElementOwner`1.Max">
            <summary>
            Gets the maximum value.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.IThumbElementOwner`1.Min">
            <summary>
            Gets the minimum value.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.IThumbElementOwner`1.ThumbBounds">
            <summary>
            Gets the thumb bounds.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.IThumbElementOwner`1.Value">
            <summary>
            Gets or sets the value of the IValueElementOwner.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.Elements.ListElement">
            <summary>
            An element for displaying a ListBox.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ListElement.#ctor(Miyagi.UI.Controls.Elements.IListElementOwner,System.Func{System.Int32})">
            <summary>
            Initializes a new instance of the ListBoxElement class.
            </summary>
            <param name="owner">The owner of the element.</param>
            <param name="zorderGetter">The zorder getter.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ListElement.AreAllSpritesNull">
            <summary>
            Returns whether the Sprites property is null.
            </summary>
            <returns><c>true</c> if the Sprites property is null; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ListElement.ClearSelected(System.Boolean)">
            <summary>
            Deselects all selected items.
            </summary>
            <param name="raise">Indicates whether events should be raised.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ListElement.DeselectItems(Miyagi.UI.Controls.ListItem[])">
            <summary>
            Deselects all specified items.
            </summary>
            <param name="items">The items to deselect.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ListElement.GetLocationInViewport">
            <summary>
            Gets the location relative to its viewport origin.
            </summary>
            <returns>A <see cref="T:Miyagi.Common.Data.Point"/> representing the location of the control relative to its viewport origin.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ListElement.Hide">
            <summary>
            Hides the ListBoxElement.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ListElement.SelectItems(Miyagi.UI.Controls.ListItem[])">
            <summary>
            Selects all specified items.
            </summary>
            <param name="items">The items to select.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ListElement.Show">
            <summary>
            Shows the ListBoxElement.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ListElement.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the element.
            </summary>
            <param name="disposing">Whether Dispose has been called.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ListElement.OnKeyDown(Miyagi.Common.Events.KeyboardEventArgs)">
            <summary>
            Handles KeyDown injections.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.KeyboardEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ListElement.OnKeyUp(Miyagi.Common.Events.KeyboardEventArgs)">
            <summary>
            Handles KeyUp injections.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.KeyboardEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ListElement.OnMouseDown(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Handles MouseDown injections.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ListElement.OnMouseDrag(Miyagi.Common.Events.ChangedValueEventArgs{Miyagi.Common.Data.Point})">
            <summary>
            Handles MouseDrag injections.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.ChangedValueEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ListElement.OnMouseHeld(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Handles MouseHeld injections.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ListElement.OnMouseHover(Miyagi.Common.Events.MouseEventArgs)">
            <summary>
            Handles MouseHover injections.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ListElement.OnMouseLeave(Miyagi.Common.Events.MouseEventArgs)">
            <summary>
            Handles MouseLeave injections.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ListElement.OnMouseUp(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Handles MouseUp injections.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ListElement.OnMouseWheelMoved(Miyagi.Common.Events.ValueEventArgs{System.Int32})">
            <summary>
            Inject a moved mouse wheel.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.ValueEventArgs`1"/> to inject.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ListElement.OnStylePropertyChanged(System.String)">
            <summary>
            Handles changed style properties.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ListElement.SetSubElementStyles">
            <summary>
            Sets the style of subelements.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ListElement.UpdateCore">
            <summary>
            Updates the control.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ListElement.GetItemLocation(System.Int32)">
            <summary>
            Gets the position of an item by index.
            </summary>
            <param name="index">The index of the item.</param>
            <returns>The position of the item.</returns>
        </member>
        <member name="E:Miyagi.UI.Controls.Elements.ListElement.HoveredIndexChanged">
            <summary>
            Occurs when the <see cref="P:Miyagi.UI.Controls.Elements.ListElement.HoveredIndex"/> property is changed.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Elements.ListElement.SelectedIndexChanged">
            <summary>
            Occurs when the <see cref="P:Miyagi.UI.Controls.Elements.ListElement.SelectedIndex"/> property is changed.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Elements.ListElement.SelectedIndiciesChanged">
            <summary>
            Occurs when the <see cref="P:Miyagi.UI.Controls.Elements.ListElement.SelectedIndicies"/> property is changed.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ListElement.ColoursDirty">
            <summary>
            Gets or sets a value indicating whether the colours of the items need to be updated.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ListElement.CombinedSkinName">
            <summary>
            Gets the combined skin name.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ListElement.HoveredIndex">
            <summary>
            Gets or sets the index over which the mouse cursor currently hovers.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ListElement.ItemsDirty">
            <summary>
            Gets or sets a value indicating whether the items need to be updated.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ListElement.ScrollBarElement">
            <summary>
            Gets the scrollbar.
            </summary>
            <value>A ScrollBarElement representing the scrollbar.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ListElement.SelectedIndex">
            <summary>
            Gets or sets the index of the selected item.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ListElement.SelectedIndicies">
            <summary>
            Gets the selected indicies.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ListElement.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ListElement.SelectedItems">
            <summary>
            Gets the selected item.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ListElement.Skin">
            <summary>
            Gets the skin.
            </summary>
            <value>The skin.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ListElement.SubElements">
            <summary>
            Gets a collection of subelement.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ListElement.TopItemIndex">
            <summary>
            Gets or sets the index of the first item in the list.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ListElement.VisibleItemCount">
            <summary>
            Gets the number of visible items.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.Elements.ListItemElement">
            <summary>
            An element for displaying a ListBox item.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ListItemElement.#ctor(Miyagi.UI.Controls.Elements.ITextElementOwner,System.Func{System.Int32})">
            <summary>
            Initializes a new instance of the ListBoxItemElement class.
            </summary>
            <param name="owner">The owner of the ListBoxItemElement.</param>
            <param name="zorderGetter">The zorder getter.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ListItemElement.AreAllSpritesNull">
            <summary>
            Returns whether the Sprites property is null.
            </summary>
            <returns><c>true</c> if the Sprites property is null; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ListItemElement.GetLocationInViewport">
            <summary>
            Gets the location relative to its viewport origin.
            </summary>
            <returns>A <see cref="T:Miyagi.Common.Data.Point"/> representing the location of the control relative to its viewport origin.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ListItemElement.GetDefaultTexture">
            <summary>
            Gets the default texture.
            </summary>
            <returns>The default texture.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ListItemElement.OnStylePropertyChanged(System.String)">
            <summary>
            Handles changed style properties.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ListItemElement.SetSubElementStyles">
            <summary>
            Sets the style of subelements.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ListItemElement.UpdateCore">
            <summary>
            Updates the ListBoxItemElement.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ListItemElement.DisplayedText">
            <summary>
            Gets the displayed text.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ListItemElement.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ListItemElement.SubElements">
            <summary>
            Gets a collection of subelement.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ListItemElement.Text">
            <summary>
            Gets the text.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ListItemElement.TextBounds">
            <summary>
            Gets the text rectangle.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ListItemElement.TextElement">
            <summary>
            Gets the TextElement.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ListItemElement.TextureElement">
            <summary>
            Gets the texture.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.Elements.ProgressBarElement">
            <summary>
            An element for displaying a progressbar.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ProgressBarElement.#ctor(Miyagi.UI.Controls.Elements.IProgressBarElementOwner,System.Func{System.Int32})">
            <summary>
            Initializes a new instance of the BarElement class.
            </summary>
            <param name="owner">The owner of the element.</param>
            <param name="zorderGetter">The zorder getter.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ProgressBarElement.GetBounds">
            <summary>
            Gets the bounds.
            </summary>
            <returns>A Rectangle describing the bounds of the element.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ProgressBarElement.GetDefaultTexture">
            <summary>
            Gets the default texture.
            </summary>
            <returns>The default texture.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ProgressBarElement.OnStylePropertyChanged(System.String)">
            <summary>
            Handles changed style properties.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ProgressBarElement.UpdateCore">
            <summary>
            Updates the element.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ProgressBarElement.CreateSprite">
            <summary>
            Creates the sprite of the element.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.Elements.ScrollBarElement">
            <summary>
            An element for displaying a scrollbar.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ScrollBarElement.#ctor(Miyagi.UI.Controls.Elements.IInteractiveElementOwner,System.Func{System.Int32},Miyagi.UI.Controls.Elements.IScrollBarElementController)">
            <summary>
            Initializes a new instance of the ScrollBarElement class.
            </summary>
            <param name="owner">The owner of the element.</param>
            <param name="zorderGetter">The zorder getter.</param>
            <param name="controller">The controller of the element.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ScrollBarElement.AreAllSpritesNull">
            <summary>
            Returns whether the Sprites property is null.
            </summary>
            <returns><c>true</c> if the Sprites property is null; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ScrollBarElement.GetLocationInViewport">
            <summary>
            Gets the location relative to its viewport origin.
            </summary>
            <returns>A <see cref="T:Miyagi.Common.Data.Point"/> representing the location of the control relative to its viewport origin.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ScrollBarElement.Hide">
            <summary>
            Hides the ScrollBarElement.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ScrollBarElement.Show">
            <summary>
            Shows the ScollBarElement.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ScrollBarElement.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the element.
            </summary>
            <param name="disposing">Whether Dispose has been called.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ScrollBarElement.GetBounds">
            <summary>
            Gets the bounds.
            </summary>
            <returns>A Rectangle describing the bounds of the element.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ScrollBarElement.OnMouseDown(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Handles MouseDown injections.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ScrollBarElement.OnMouseDrag(Miyagi.Common.Events.ChangedValueEventArgs{Miyagi.Common.Data.Point})">
            <summary>
            Handles MouseDrag injections.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.ChangedValueEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ScrollBarElement.OnMouseEnter(Miyagi.Common.Events.MouseEventArgs)">
            <summary>
            Handles MouseEnter injections.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ScrollBarElement.OnMouseHeld(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Handles MouseHeld injections.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ScrollBarElement.OnMouseHover(Miyagi.Common.Events.MouseEventArgs)">
            <summary>
            Handles MouseHover injections.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ScrollBarElement.OnMouseLeave(Miyagi.Common.Events.MouseEventArgs)">
            <summary>
            Handles MouseLeave injections.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ScrollBarElement.OnMouseUp(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Handles MouseUp injections.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ScrollBarElement.OnStylePropertyChanged(System.String)">
            <summary>
            Handles changed style properties.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ScrollBarElement.SetSubElementStyles">
            <summary>
            Sets the style of subelements.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ScrollBarElement.UpdateCore">
            <summary>
            Updates the element.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ScrollBarElement.CreateSprite">
            <summary>
            Creates the sprite of the element.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Elements.ScrollBarElement.ValueChanged">
            <summary>
            Occurs when the Value property is changed.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Elements.ScrollBarElement.VisibleChanged">
            <summary>
            Occurs when the Visible property is changed.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ScrollBarElement.BorderElement">
            <summary>
            Gets the border.
            </summary>
            <value>A BorderElement representing the border.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ScrollBarElement.CombinedSkinName">
            <summary>
            Gets the combined name of the skin.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ScrollBarElement.HasBorder">
            <summary>
            Gets a value indicating whether the scrollbar has a border.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ScrollBarElement.Inverted">
            <summary>
            Gets a value indicating whether the scrollbar is invented.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ScrollBarElement.LargeChange">
            <summary>
            Gets the value which is added or subtracted if PageUp or PageDown is pressed.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ScrollBarElement.Location">
            <summary>
            Gets the location.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ScrollBarElement.Max">
            <summary>
            Gets the maximum value of the ScrollBarElement.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ScrollBarElement.Min">
            <summary>
            Gets the minimum value.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ScrollBarElement.Orientation">
            <summary>
            Gets or sets the orientation.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ScrollBarElement.Size">
            <summary>
            Gets the size in pixels.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ScrollBarElement.Skin">
            <summary>
            Gets the TextureStyle.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ScrollBarElement.SubElements">
            <summary>
            Gets a collection of subelement.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ScrollBarElement.ThumbBounds">
            <summary>
            Gets the thumb bounds.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ScrollBarElement.ThumbElement">
            <summary>
            Gets the thumb.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ScrollBarElement.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ScrollBarElement.Visible">
            <summary>
            Gets or sets a value indicating whether the ScrollBarElement is visible.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.Elements.SkinElement">
            <summary>
            An element for displaying a texture that is surrounded by a border.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.Elements.TextureElement">
            <summary>
            An element for displaying a texture.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.TextureElement.#ctor(Miyagi.UI.Controls.Elements.IElementOwner,System.Func{System.Int32})">
            <summary>
            Initializes a new instance of the TextureElement class.
            </summary>
            <param name="owner">The owner of the element.</param>
            <param name="zorderGetter">The zorder getter.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.TextureElement.Resize(Miyagi.Common.Data.Point)">
            <summary>
            Resizes the sprites of the element.
            </summary>
            <param name="diff">The distance to resize.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.TextureElement.CreateSprite">
            <summary>
            Creates the sprite of the element.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.TextureElement.GetBounds">
            <summary>
            Gets the bounds.
            </summary>
            <returns>A Rectangle describing the bounds of the element.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.TextureElement.UpdateCore">
            <summary>
            Updates the element.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.TextureElement.Offset">
            <summary>
            Gets or sets the offset.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.TextureElement.Size">
            <summary>
            Gets the size.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.SkinElement.#ctor(Miyagi.UI.Controls.Elements.ISkinElementOwner,System.Func{System.Int32})">
            <summary>
            Initializes a new instance of the SkinElement class.
            </summary>
            <param name="owner">The owner of the element.</param>
            <param name="zorderGetter">The zorder getter.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.SkinElement.GetBounds">
            <summary>
            Gets the bounds.
            </summary>
            <returns>A Rectangle describing the bounds of the element.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.SkinElement.OnStylePropertyChanged(System.String)">
            <summary>
            Handles changed style properties.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="T:Miyagi.UI.Controls.Elements.TabBarElement">
            <summary>
            An element for displaying a tabbar.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.TabBarElement.#ctor(Miyagi.UI.Controls.Elements.ITabBarElementOwner,System.Func{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.UI.Controls.Elements.TabBarElement"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="zorderGetter">The zorder getter.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.TabBarElement.GetLocationInViewport">
            <summary>
            Gets the location of the control relative to its viewport origin.
            </summary>
            <returns>A <see cref="T:Miyagi.Common.Data.Point"/> representing the location of the control relative to its viewport origin.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.TabBarElement.RemoveButtons">
            <summary>
            Removes the buttons.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.TabBarElement.GetBounds">
            <summary>
            Gets the bounds.
            </summary>
            <returns>A Rectangle describing the bounds of the element.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.TabBarElement.GetDefaultTexture">
            <summary>
            Gets the default texture.
            </summary>
            <returns>The default texture.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.TabBarElement.OnMouseDown(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Handles MouseDown injections.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.TabBarElement.OnMouseEnter(Miyagi.Common.Events.MouseEventArgs)">
            <summary>
            Handles MouseEnter injections.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.TabBarElement.OnMouseHeld(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Handles MouseHeld injections.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.TabBarElement.OnMouseHover(Miyagi.Common.Events.MouseEventArgs)">
            <summary>
            Handles MouseHover injections.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.TabBarElement.OnMouseLeave(Miyagi.Common.Events.MouseEventArgs)">
            <summary>
            Handles MouseLeave injections.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.TabBarElement.OnMouseUp(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Handles MouseUp injections.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.TabBarElement.OnStylePropertyChanged(System.String)">
            <summary>
            Handles changed style properties.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.TabBarElement.OnStylePropertyChanging(System.String)">
            <summary>
            Handles changing style properties.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.TabBarElement.UpdateCore">
            <summary>
            Updates the element.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.TabBarElement.CreateSprite">
            <summary>
            Creates the sprite of the element.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.TabBarElement.CombinedSkinName">
            <summary>
            Gets the combined name of the skin.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.TabBarElement.ExtentChangedCallback">
            <summary>
            Gets or sets the extent changed callback.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.TabBarElement.IsTabBarDirty">
            <summary>
            Gets or sets a value indicating whether the tab bar is dirty.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.TabBarElement.Skin">
            <summary>
            Gets the skin.
            </summary>
            <value>The skin.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.TabBarElement.SubElements">
            <summary>
            Gets the sub elements.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.Elements.TabElement">
            <summary>
            An element for displaying a tab.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.TabElement.#ctor(Miyagi.UI.Controls.Elements.ITabElementOwner,System.Func{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.UI.Controls.Elements.TabElement"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="zorderGetter">The zorder getter.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.TabElement.AreAllSpritesNull">
            <summary>
            Returns whether the Sprites property is null.
            </summary>
            <returns><c>true</c> if the Sprites property is null; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.TabElement.GetLocationInViewport">
            <summary>
            Gets the location relative to its viewport origin.
            </summary>
            <returns>A <see cref="T:Miyagi.Common.Data.Point"/> representing the location of the control relative to its viewport origin.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.TabElement.GetBounds">
            <summary>
            Gets the bounds.
            </summary>
            <returns>A Rectangle describing the bounds of the element.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.TabElement.OnStylePropertyChanged(System.String)">
            <summary>
            Handles changed style properties.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.TabElement.SetSubElementStyles">
            <summary>
            Sets the style of subelements.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.TabElement.UpdateCore">
            <summary>
            Updates the ListBoxItemElement.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.TabElement.CreateSprite">
            <summary>
            Creates the sprite of the element.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.TabElement.CombinedSkinName">
            <summary>
            Gets the name of the combined skin.
            </summary>
            <value>The name of the combined skin.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.TabElement.DisplayedText">
            <summary>
            Gets the displayed text.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.TabElement.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>The location.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.TabElement.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.TabElement.SubElements">
            <summary>
            Gets a collection of subelement.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.TabElement.Text">
            <summary>
            Gets the text.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.TabElement.TextBounds">
            <summary>
            Gets the text rectangle.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.TabElement.TextElement">
            <summary>
            Gets the TextElement.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.TabElement.Visible">
            <summary>
            Gets a value indicating whether this <see cref="T:Miyagi.UI.Controls.Elements.TabElement"/> is visible.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Miyagi.UI.Controls.Elements.TextBoxElement">
            <summary>
            An element for displaying a textbox.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.TextBoxElement.#ctor(Miyagi.UI.Controls.Elements.ITextBoxElementOwner,System.Func{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.UI.Controls.Elements.TextBoxElement"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="zorderGetter">The zorder getter.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.TextBoxElement.CheckRestrictions(System.String)">
            <summary>
            Checks the text restrictions.
            </summary>
            <param name="text">The text.</param>
            <returns><c>true</c> if the text does not violates the restrictions; otherwise <c>false</c></returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.TextBoxElement.HandleKeyEventCore(Miyagi.Common.Events.KeyEvent,System.Boolean@,System.Boolean@)">
            <summary>
            Handles a KeyEvent.
            </summary>
            <param name="arg">The KeyEvent to handle.</param>
            <param name="deselectText">if set to <c>true</c> the text should be deselected.</param>
            <param name="handled">if set to <c>true</c> the keyevent has been handled.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.TextBoxElement.OnTextInserted(System.Boolean@)">
            <summary>
            Called when text is inserted.
            </summary>
            <param name="deselectText">if set to <c>true</c> the text should be deselected.</param>
        </member>
        <member name="T:Miyagi.UI.Controls.Elements.TextElement">
            <summary>
            An element for displaying text.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.TextElement.#ctor(Miyagi.UI.Controls.Elements.ITextElementOwner,System.Func{System.Int32})">
            <summary>
            Initializes a new instance of the TextElement class.
            </summary>
            <param name="owner">The owner of the element.</param>
            <param name="zorderGetter">The zorder getter.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.TextElement.ApplyOpacity">
            <summary>
            Applies the opacity.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.TextElement.ApplyTextureFiltering">
            <summary>
            Applies the TextureFiltering.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.TextElement.ApplyVisibility">
            <summary>
            Applies the visibility.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.TextElement.ApplyZOrder">
            <summary>
            Applies the ZOrder.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.TextElement.AreAllSpritesNull">
            <summary>
            Returns whether the Sprites property is null.
            </summary>
            <returns><c>true</c> if the Sprites property is null; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.TextElement.Move(Miyagi.Common.Data.Point)">
            <summary>
            Moves the sprites of the element.
            </summary>
            <param name="offset">The distance to move.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.TextElement.RemoveSprite">
            <summary>
            Removes the sprites.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.TextElement.SetSelectedQuads(Miyagi.Common.Data.Range,System.Int32)">
            <summary>
            Sets the quads of the selected text.
            </summary>
            <param name="range">The first and last index of the selected text.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.TextElement.UpdateSpriteCrop">
            <summary>
            Crops the sprites.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.TextElement.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the element.
            </summary>
            <param name="disposing">Whether Dispose has been called.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.TextElement.GetBounds">
            <summary>
            Gets the bounds.
            </summary>
            <returns>A Rectangle describing the bounds of the element.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.TextElement.OnStylePropertyChanged(System.String)">
            <summary>
            Handles changed style properties.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.TextElement.OnStylePropertyChanging(System.String)">
            <summary>
            Handles changing style properties.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.TextElement.UpdateCore">
            <summary>
            Updates the element.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.TextElement.CreateSprite">
            <summary>
            Creates the sprite of the element.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.TextElement.FontChangedCallback">
            <summary>
            Gets or sets an action which is called when the font changes.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.TextElement.Size">
            <summary>
            Gets the size.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.Elements.ThumbElement`1">
            <summary>
            An element for displaying a thumb.
            </summary>
        </member>
        <member name="F:Miyagi.UI.Controls.Elements.ThumbElement`1.MinThumbSize">
            <summary>
            The minimum size of a thumb.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ThumbElement`1.#ctor(Miyagi.UI.Controls.Elements.IThumbElementOwner{`0},System.Func{System.Int32})">
            <summary>
            Initializes a new instance of the ThumbElement class.
            </summary>
            <param name="owner">The owner of the element.</param>
            <param name="zorderGetter">The zorder getter.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ThumbElement`1.AreAllSpritesNull">
            <summary>
            Returns whether the Sprites property is null.
            </summary>
            <returns><c>true</c> if the Sprites property is null; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ThumbElement`1.GetLocationInViewport">
            <summary>
            Gets the derived location.
            </summary>
            <returns>A <see cref="T:Miyagi.Common.Data.Point"/> representing the location of the control relative to its viewport origin.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ThumbElement`1.GetBounds">
            <summary>
            Gets the bounds.
            </summary>
            <returns>A Rectangle describing the bounds of the element.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ThumbElement`1.OnStylePropertyChanged(System.String)">
            <summary>
            Handles changed style properties.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ThumbElement`1.OnStylePropertyChanging(System.String)">
            <summary>
            Handles changing style properties.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ThumbElement`1.SetSubElementStyles">
            <summary>
            Sets the style of subelements.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ThumbElement`1.UpdateCore">
            <summary>
            Updates the element.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ThumbElement`1.CreateSprite">
            <summary>
            Creates the sprite of the element.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ThumbElement`1.BorderElement">
            <summary>
            Gets the border.
            </summary>
            <value>A BorderElement representing the border.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ThumbElement`1.BorderTexture">
            <summary>
            Gets the texture of the border.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ThumbElement`1.CombinedSkinName">
            <summary>
            Gets the combined name of the skin.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ThumbElement`1.HasBorder">
            <summary>
            Gets a value indicating whether the thumb has a border.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ThumbElement`1.Location">
            <summary>
            Gets the location.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ThumbElement`1.PreferredOrientation">
            <summary>
            Gets or sets the preferred orientation.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ThumbElement`1.Size">
            <summary>
            Gets the size.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ThumbElement`1.Skin">
            <summary>
            Gets the SkinStyle.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ThumbElement`1.SubElements">
            <summary>
            Gets a collection of subelement.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.Elements.ToolTipElement">
            <summary>
            An element for displaying a ToolTip item.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ToolTipElement.#ctor(Miyagi.UI.Controls.Elements.IToolTipElementOwner,System.Func{System.Int32})">
            <summary>
            Initializes a new instance of the ToolTipElement class.
            </summary>
            <param name="owner">The owner of the ToolTipElement.</param>
            <param name="zorderGetter">The zorder getter.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ToolTipElement.AreAllSpritesNull">
            <summary>
            Returns whether the Sprites property is null.
            </summary>
            <returns><c>true</c> if the Sprites property is null; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ToolTipElement.GetLocationInViewport">
            <summary>
            Gets the derived location.
            </summary>
            <returns>A <see cref="T:Miyagi.Common.Data.Point"/> representing the location of the control relative to its viewport origin.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ToolTipElement.Hide">
            <summary>
            Hides the tooltip.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ToolTipElement.Show">
            <summary>
            Shows the tooltip.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ToolTipElement.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the element.
            </summary>
            <param name="disposing">Whether Dispose has been called.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ToolTipElement.OnMouseEnter(Miyagi.Common.Events.MouseEventArgs)">
            <summary>
            Inject an entering mouse.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseEventArgs"/> to inject.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ToolTipElement.OnMouseLeave(Miyagi.Common.Events.MouseEventArgs)">
            <summary>
            Inject a leaving mouse.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseEventArgs"/> to inject.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ToolTipElement.OnStylePropertyChanged(System.String)">
            <summary>
            Handles changed style properties.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ToolTipElement.SetSubElementStyles">
            <summary>
            Sets the style of subelements.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Elements.ToolTipElement.UpdateCore">
            <summary>
            Updates the element.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ToolTipElement.DefaultTexture">
            <summary>
            Gets or sets the default texture.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ToolTipElement.DisplayedText">
            <summary>
            Gets the displayed text.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ToolTipElement.DisplayRectangle">
            <summary>
            Gets the display rectangle.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ToolTipElement.Location">
            <summary>
            Gets or sets the location.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ToolTipElement.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ToolTipElement.Opacity">
            <summary>
            Gets the opacity.
            </summary>
            <value>The opacity, ranging between 0 and 1.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ToolTipElement.Size">
            <summary>
            Gets the size of the ToolTipElement.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ToolTipElement.SpriteRenderer">
            <summary>
            Gets the SpriteRenderer.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ToolTipElement.SubElements">
            <summary>
            Gets a collection of subelement.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ToolTipElement.Text">
            <summary>
            Gets the text.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ToolTipElement.TextBounds">
            <summary>
            Gets the text rectangle.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ToolTipElement.TextElement">
            <summary>
            Gets the TextElement of the Label.
            </summary>
            <value>A TextElement representing the text of the Label.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ToolTipElement.TextureElement">
            <summary>
            Gets the TextureElement.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Elements.ToolTipElement.Visible">
            <summary>
            Gets a value indicating whether the tooltip is visible.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.Expander">
            <summary>
            Represents the control that displays a header that has a collapsible window that displays content.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Expander.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.UI.Controls.Expander"/> class.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Expander.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.UI.Controls.Expander"/> class.
            </summary>
            <param name="name">The name of the SkinnedControl.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Expander.ClientSizeFromSize(Miyagi.Common.Data.Size)">
            <summary>
            Calculates a client area based on the size of a control.
            </summary>
            <param name="size">The size of the control.</param>
            <returns>A size representing said client area.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Expander.DoResize(System.Double,System.Double)">
            <summary>
            Resizes the control.
            </summary>
            <param name="widthFactor">The relative growth of the width.</param>
            <param name="heightFactor">The relative growth of the height.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Expander.OnCollapsed">
            <summary>
            Called when <see cref="P:Miyagi.UI.Controls.Expander.Expanded"/> is set to <c>false</c>.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Expander.OnExpanded">
            <summary>
            Called when <see cref="P:Miyagi.UI.Controls.Expander.Expanded"/> is set to <c>true</c>.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Expander.OnExpandedChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Expander.ExpandedChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Expander.OnMaxSizeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MaxSizeChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Expander.OnMinSizeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MinSizeChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Expander.OnMouseDown(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseDown"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Expander.OnMouseHover(Miyagi.Common.Events.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseHover"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Expander.OnMouseLeave(Miyagi.Common.Events.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseLeave"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Expander.OnMouseUp(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseUp"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Expander.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,Miyagi.UI.BoundsSpecified)">
            <summary>
            Performs the work of setting the specified bounds of this control.
            </summary>
            <param name="x">The new <see cref="P:Miyagi.UI.Controls.Control.Left"/> property value of the control.</param>
            <param name="y">The new <see cref="P:Miyagi.UI.Controls.Control.Top"/> property value of the control.</param>
            <param name="newWidth">The new <see cref="P:Miyagi.UI.Controls.Control.Width"/> property value of the control.</param>
            <param name="newHeight">The new <see cref="P:Miyagi.UI.Controls.Control.Height"/> property value of the control.</param>
            <param name="specified">A bitwise combination of <see cref="T:Miyagi.UI.BoundsSpecified"/> values.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Expander.SizeFromClientSize(Miyagi.Common.Data.Size)">
            <summary>
            Calculates the size of the control based on the size of the client area.
            </summary>
            <param name="size">The size of the client area.</param>
            <returns>A size for the whole control.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Expander.UpdateCore">
            <summary>
            Updates the control.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Expander.ExpandedChanged">
            <summary>
            Occurs when the <see cref="P:Miyagi.UI.Controls.Expander.Expanded"/> property changes.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Expander.TextBounds">
            <summary>
            Gets a Rectangle representing the text area.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Expander.ButtonElement">
            <summary>
            Gets the button element.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Expander.ClientLocation">
            <summary>
            Gets the client location.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Expander.Elements">
            <summary>
            Gets a list of elements.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Expander.Expanded">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Miyagi.UI.Controls.Expander"/> is expanded.
            </summary>
            <value><c>true</c> if expanded; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Miyagi.UI.Controls.FlowLayoutPanel">
            <summary>
            Represents a parent that dynamically lays out its contents horizontally or vertically.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.Panel">
            <summary>
            A Panel control.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.ScrollableControl">
            <summary>
            Base class for scrollable controls.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.ScrollableControl.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ScrollableControl class.
            </summary>
            <param name="name">The name of the ScrollableControl.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ScrollableControl.ScrollToBottom">
            <summary>
            Scrolls vertically to the end.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.ScrollableControl.ScrollToLeft">
            <summary>
            Scrolls horizontally to the beginning.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.ScrollableControl.ScrollToRight">
            <summary>
            Scrolls horizontally to the end.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.ScrollableControl.ScrollToTop">
            <summary>
            Scrolls vertically to the beginning.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.ScrollableControl.ClientSizeFromSize(Miyagi.Common.Data.Size)">
            <summary>
            Calculates a client area based on the size of a control.
            </summary>
            <param name="size">The size of the control.</param>
            <returns>A size representing said client area.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.ScrollableControl.Dispose(System.Boolean)">
            <summary>
            Disposes the control.
            </summary>
            <param name="disposing">Whether Dispose has been called.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ScrollableControl.DoResize(System.Double,System.Double)">
            <summary>
            Resizes the control.
            </summary>
            <param name="widthFactor">The relative growth of the width.</param>
            <param name="heightFactor">The relative growth of the height.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ScrollableControl.OnChildLocationChanged(Miyagi.UI.Controls.Control)">
            <summary>
            Handles child location changes.
            </summary>
            <param name="child">The child control which location has been changed.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ScrollableControl.OnChildSizeChanged(Miyagi.UI.Controls.Control)">
            <summary>
            Handles child size changes.
            </summary>
            <param name="child">The child control which size has been changed.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ScrollableControl.OnChildVisibleChanged(Miyagi.UI.Controls.Control)">
            <summary>
            Handles child visibility changes.
            </summary>
            <param name="child">The child control which visibility has been changed.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ScrollableControl.OnClientSizeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.ClientSizeChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ScrollableControl.OnControlAdded(Miyagi.Common.Events.ValueEventArgs{Miyagi.UI.Controls.Control})">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.ControlAdded"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.ValueEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ScrollableControl.OnControlRemoved(Miyagi.Common.Events.ValueEventArgs{Miyagi.UI.Controls.Control})">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.ControlRemoved"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.ValueEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ScrollableControl.OnMouseClick(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseClick"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ScrollableControl.OnMouseDoubleClick(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseDoubleClick"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ScrollableControl.OnMouseDown(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseDown"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ScrollableControl.OnMouseDrag(Miyagi.Common.Events.ChangedValueEventArgs{Miyagi.Common.Data.Point})">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseDrag"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.ChangedValueEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ScrollableControl.OnMouseHeld(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseHeld"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ScrollableControl.OnMouseHover(Miyagi.Common.Events.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseHover"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ScrollableControl.OnMouseUp(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseUp"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ScrollableControl.OnSizeChanged(Miyagi.Common.Events.ChangedValueEventArgs{Miyagi.Common.Data.Size})">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.SizeChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.ChangedValueEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ScrollableControl.SizeFromClientSize(Miyagi.Common.Data.Size)">
            <summary>
            Calculates the size of the control based on the size of the client area.
            </summary>
            <param name="size">The size of the client area.</param>
            <returns>A size for the whole control.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.ScrollableControl.UpdateCore">
            <summary>
            Updates the control.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.ScrollableControl.HScrollBarStyle">
            <summary>
            Gets or sets the style of the horizontal scrollbar.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.ScrollableControl.Scroll">
            <summary>
            Gets or sets the current scroll offset.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.ScrollableControl.VScrollBarStyle">
            <summary>
            Gets or sets the style of the vertical scrollbar.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.ScrollableControl.ChildOffset">
            <summary>
            Gets a <see cref="T:Miyagi.Common.Data.Point"/> representing the offset that is applied to added controls.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.ScrollableControl.Elements">
            <summary>
            Gets a list of elements.
            </summary>
            <value>A list of elements.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.ScrollableControl.HScrollBarElement">
            <summary>
            Gets the horizontal scrollbar.
            </summary>
            <value>A ScrollBarElement representing the scrollbar.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.ScrollableControl.ScrollBarsNeedUpdate">
            <summary>
            Gets or sets a value indicating whether the scrolbars needs to be updated.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.ScrollableControl.VScrollBarElement">
            <summary>
            Gets the vertival scrollbar.
            </summary>
            <value>A ScrollBarElement representing the scrollbar.</value>
        </member>
        <member name="T:Miyagi.UI.IMagneticDockable">
            <summary>
            Interface for magnatically dockable objects.
            </summary>
        </member>
        <member name="P:Miyagi.UI.IMagneticDockable.MagneticDockThreshold">
            <summary>
            Gets or sets the distance in which the control docks magnetically on other controls or the screen edges.
            </summary>
        </member>
        <member name="P:Miyagi.UI.IMagneticDockable.MagneticDockToScreenEdges">
            <summary>
            Gets or sets a value indicating whether the control should dock to the screen edges.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Panel.#ctor">
            <summary>
            Initializes a new instance of the Panel class.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Panel.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Panel class.
            </summary>
            <param name="name">The name of the Panel.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Panel.DoResize(System.Double,System.Double)">
            <summary>
            Resizes the control.
            </summary>
            <param name="widthFactor">The relative growth of the width.</param>
            <param name="heightFactor">The relative growth of the height.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Panel.GetPreferredSizeCore(Miyagi.Common.Data.Size)">
            <summary>
            Retrieves the size of a rectangular area into which the parent and its childs can be fitted.
            </summary>
            <param name="proposedSize">The custom-sized area for a control.</param>
            <returns>A Size representing the width and height of a rectangle.</returns>
            <remarks>As the DefaultLayout doesn't implement margins, there are ignored for this calculation too.</remarks>
        </member>
        <member name="M:Miyagi.UI.Controls.Panel.OnLostFocus(System.EventArgs)">
            <summary>
            Handles losing the focus.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Panel.OnMouseDown(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Handles mouse press events.
            </summary>
            <param name="e">A MouseButtonEventArgs that contains the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Panel.OnMouseDrag(Miyagi.Common.Events.ChangedValueEventArgs{Miyagi.Common.Data.Point})">
            <summary>
            Raises the MouseDrag event.
            </summary>
            <param name="e">A ChangedValueEventArgs that contains the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Panel.OnMouseHover(Miyagi.Common.Events.MouseEventArgs)">
            <summary>
            Handles mouse hover events.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Panel.OnMouseLeave(Miyagi.Common.Events.MouseEventArgs)">
            <summary>
            Handles mouse enter events.
            </summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Panel.OnMouseUp(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Handles mouse release events.
            </summary>
            <param name="e">A MouseButtonEventArgs that contains the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Panel.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,Miyagi.UI.BoundsSpecified)">
            <summary>
            Performs the work of setting the specified bounds of this control.
            </summary>
            <param name="x">The new <see cref="P:Miyagi.UI.Controls.Control.Left"/> property value of the control.</param>
            <param name="y">The new <see cref="P:Miyagi.UI.Controls.Control.Top"/> property value of the control.</param>
            <param name="newWidth">The new <see cref="P:Miyagi.UI.Controls.Control.Width"/> property value of the control.</param>
            <param name="newHeight">The new <see cref="P:Miyagi.UI.Controls.Control.Height"/> property value of the control.</param>
            <param name="specified">A bitwise combination of <see cref="T:Miyagi.UI.BoundsSpecified"/> values.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Panel.Throw(Miyagi.Common.Data.Point)">
            <summary>
            Throws the panel to the specified destination.
            </summary>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Panel.UpdateCore">
            <summary>
            Updates the control.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Panel.MagneticDockThreshold">
            <summary>
            Gets or sets the distance in which this Panel docks magnetically on other Panels or the screen edges.
            </summary>
            <remarks>If <see cref="P:Miyagi.UI.Controls.Control.CenterOnGrab"/> is true, MagneticDockThreshold is ignored.</remarks>
        </member>
        <member name="P:Miyagi.UI.Controls.Panel.MagneticDockToScreenEdges">
            <summary>
            Gets or sets a value indicating whether the Panel should dock to the screen edges.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Panel.ResizeMode">
            <summary>
            Gets or sets the ResizeMode of the Panel.
            </summary>
            <value>A bitwise combination of <see cref="T:Miyagi.UI.ResizeModes"/> representing how the panel can be resized.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Panel.ResizeThreshold">
            <summary>
            Gets or sets the size of the area where resizing is triggered.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Panel.Throwable">
            <summary>
            Gets or sets a value indicating whether the Panel is throwable.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Panel.IsMagneticallyDockingEnabled">
            <summary>
            Gets a value indicating whether magnetically docking is enabled.
            </summary>
            <value></value>
        </member>
        <member name="M:Miyagi.UI.Controls.FlowLayoutPanel.#ctor">
            <summary>
            Initializes a new instance of the FlowLayoutPanel class.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.FlowLayoutPanel.#ctor(System.String)">
            <summary>
            Initializes a new instance of the FlowLayoutPanel class.
            </summary>
            <param name="name">The name of the FlowLayoutPanel.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.FlowLayoutPanel.GetFlowBreak(Miyagi.UI.Controls.Control)">
            <summary>
            Returns a value that represents the flow-break setting of the FlowLayoutPanel control.
            </summary>
            <param name="control">The child control.</param>
            <returns><c>true</c> if the flow break is set; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.FlowLayoutPanel.SetFlowBreak(Miyagi.UI.Controls.Control,System.Boolean)">
            <summary>
            Sets the value that represents the flow-break setting of the FlowLayoutPanel control.
            </summary>
            <param name="control">The child control.</param>
            <param name="value">The flow-break value to set.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.FlowLayoutPanel.GetPreferredSizeCore(Miyagi.Common.Data.Size)">
            <summary>
            Retrieves the size of a rectangular area into which the flow parent and its childs can be fitted.
            </summary>
            <param name="proposedSize">The custom-sized area for a control.</param>
            <returns>A Size representing the width and height of a rectangle.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.FlowLayoutPanel.SizeWithBreaks(Miyagi.Common.Data.Size,System.Boolean)">
            <summary>
            Calculates a size for the parent that might need breaks between some controls.
            </summary>
            <param name="proposedSize">The proposed size for the control.</param>
            <param name="isHorizontal">Whether the flow is horizontal or vertical.</param>
            <returns>A size for the parent.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.FlowLayoutPanel.SizeWithoutBreaks(System.Boolean)">
            <summary>
            Calculates a size for the parent without breaks between child controls.
            </summary>
            <param name="isHorizontal">Whether the flow is horizontal or vertical.</param>
            <returns>A size for the parent.</returns>
        </member>
        <member name="P:Miyagi.UI.Controls.FlowLayoutPanel.FlowDirection">
            <summary>
            Gets or sets a value indicating the flow direction of the FlowLayoutPanel control.
            </summary>
            <value>The flow direction of the FlowLayoutPanel control.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.FlowLayoutPanel.WrapContents">
            <summary>
            Gets or sets a value indicating whether the FlowLayoutPanel control should wrap its contents or let the contents be clipped.
            </summary>
            <value><c>true</c> if the contents are wrapped; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.FlowLayoutPanel.LayoutSettings">
            <summary>
            Gets the settings for the parent.
            </summary>
            <value>The settings for the parent.</value>
        </member>
        <member name="T:Miyagi.UI.Controls.Layout.DefaultLayout">
            <summary>
            The Default layout engine.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.Layout.LayoutEngine">
            <summary>
            Provides the base class for implementing layout engines.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Layout.LayoutEngine.InitLayout(Miyagi.UI.Controls.Control,Miyagi.UI.BoundsSpecified)">
            <summary>
            Initializes the layout engine.
            </summary>
            <param name="child">The container on which the layout engine will operate.</param>
            <param name="specified">The bounds defining the container's size and position.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Layout.LayoutEngine.Layout(Miyagi.UI.Controls.Control,Miyagi.UI.Controls.Layout.LayoutEventArgs)">
            <summary>
            Requests that the layout engine perform a layout operation.
            </summary>
            <param name="parent">The container on which the layout engine will operate.</param>
            <param name="layoutEventArgs">An event argument from a Control.Layout event.</param>
            <returns><c>true</c> if layout should be performed again by the parent of container; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Layout.DefaultLayout.Layout(Miyagi.UI.Controls.Control,Miyagi.UI.Controls.Layout.LayoutEventArgs)">
            <summary>
            Performs the layout for the given container. The default layout only deals with anchors and docking.
            </summary>
            <param name="parent">The control whose layout has to be done.</param>
            <param name="layoutEventArgs">The LayoutEventArgs.</param>
            <returns>Always false.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Layout.DefaultLayout.HorizontalAnchor(Miyagi.Common.Data.Rectangle,Miyagi.UI.Controls.Control,Miyagi.UI.AnchorStyles,System.Int32@,System.Int32@)">
            <summary>
            Calculates the horizontal anchoring for a given control relative to a given space. This includes the left position and the width of the control.
            </summary>
            <param name="space">The rectangle where the control lays.</param>
            <param name="control">The control that needs anchoring.</param>
            <param name="anchor">The type of anchor for the control.</param>
            <param name="left">Initially stores the left position of the control, it is modified according to the anchor.</param>
            <param name="width">Initially stores the width of the control, is is modified according to the anchor.</param>
            <remarks>It can be that the value saved for the distance to the right inside the control is changed too.</remarks>
        </member>
        <member name="M:Miyagi.UI.Controls.Layout.DefaultLayout.LayoutAnchoredChildren(Miyagi.UI.Controls.Control)">
            <summary>
            Does the layout for anchored children, which are the ones that preserve the distance to a set of specified edges.
            </summary>
            <param name="parent">The parent control.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Layout.DefaultLayout.LayoutAutoSizedChildren(Miyagi.UI.Controls.IControlCollectionOwner)">
            <summary>
            Adjusts the size of children with the AutoSize property, except if they are docked.
            </summary>
            <param name="parent">The parent control whose children are to be adjusted.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Layout.DefaultLayout.LayoutDockedChildren(Miyagi.UI.Controls.Control)">
            <summary>
            Does the layout for docked children, which are children that can grow to fit a specified edge, or take all the remaining space.
            </summary>
            <param name="parent">The parent control.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Layout.DefaultLayout.LayoutTopLevelControl(Miyagi.UI.Controls.Control)">
            <summary>
            Adjusts the size of the parent control if it has the AutoSize property and it is a top level control.
            </summary>
            <param name="control">The top level control.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Layout.DefaultLayout.VerticalAnchor(Miyagi.Common.Data.Rectangle,Miyagi.UI.Controls.Control,Miyagi.UI.AnchorStyles,System.Int32@,System.Int32@)">
            <summary>
            Calculates the vertical anchoring for a given control relative to a given space. This includes the top position and the height of the control.
            </summary>
            <param name="space">The rectangle where the control lays.</param>
            <param name="control">The control that needs anchoring.</param>
            <param name="anchor">The type of anchor for the control.</param>
            <param name="top">Initially stores the top position of the control, it is modified according to the anchor.</param>
            <param name="height">Initially stores the height of the control, is is modified according to the anchor.</param>
            <remarks>It can be that the value saved for the distance to the bottom inside the control is changed too.</remarks>
        </member>
        <member name="T:Miyagi.UI.Controls.Layout.FlowLayout">
            <summary>
            Layout engine that dynamically lays out its contents horizontally or vertically, creating new rows or columns when necessary.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Layout.FlowLayout.Layout(Miyagi.UI.Controls.Control,Miyagi.UI.Controls.Layout.LayoutEventArgs)">
            <summary>
            Perform the layout for the given container, that has to be a FlowLayoutPanel.
            </summary>
            <param name="parent">The control whose layout has to be done.</param>
            <param name="layoutEventArgs">The LayoutEventArgs.</param>
            <returns>Always false.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Layout.FlowLayout.FinishColumn(System.Collections.Generic.ICollection{Miyagi.UI.Controls.Control})">
            <summary>
            Adjusts a column of controls.
            </summary>
            <param name="controls">The controls that form the column.</param>
            <returns>The rightmost x coordinate of the column.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Layout.FlowLayout.FinishRow(System.Collections.Generic.ICollection{Miyagi.UI.Controls.Control})">
            <summary>
            Adjusts a row of controls.
            </summary>
            <param name="controls">The controls that form the row.</param>
            <returns>The highest y coordinate (bottom) of the row.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Layout.FlowLayout.IsBottomOverFlow(Miyagi.Common.Data.Rectangle,System.Int32,Miyagi.UI.Controls.Control)">
            <summary>
            Checks whether the child control will overflow the bottom corner of the parent control.
            </summary>
            <param name="space">The dimensions of the parent control.</param>
            <param name="y">The value of the y-axis assigned to this control.</param>
            <param name="child">The control to position.</param>
            <returns><c>true</c> if there is an overflow, false otherwise.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Layout.FlowLayout.IsLeftOverFlow(System.Int32,Miyagi.UI.Controls.Control)">
            <summary>
            Checks whether the child control will overflow the left corner of the parent control.
            </summary>
            <param name="x">The value of the x-axis assigned to this control.</param>
            <param name="child">The control to position.</param>
            <returns><c>true</c> if there is an overflow, false otherwise.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Layout.FlowLayout.IsRightOverFlow(Miyagi.Common.Data.Rectangle,System.Int32,Miyagi.UI.Controls.Control)">
            <summary>
            Checks whether the child control will overflow the right corner of the parent control.
            </summary>
            <param name="space">The dimensions of the parent control.</param>
            <param name="x">The value of the x-axis assigned to this control.</param>
            <param name="child">The control to position.</param>
            <returns><c>true</c> if there is an overflow, false otherwise.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Layout.FlowLayout.IsTopOverFlow(System.Int32,Miyagi.UI.Controls.Control)">
            <summary>
            Checks whether the child control will overflow the top corner of the parent control.
            </summary>
            <param name="y">The value of the y-axis assigned to this control.</param>
            <param name="child">The control to position.</param>
            <returns><c>true</c> if there is an overflow, false otherwise.</returns>
        </member>
        <member name="T:Miyagi.UI.Controls.Layout.FlowLayoutSettings">
            <summary>
            Collects the characteristics associated with flow layouts.
            </summary>
        </member>
        <member name="F:Miyagi.UI.Controls.Layout.FlowLayoutSettings.flowBreaks">
            <summary>
            Stores the breaks for the child controls.
            </summary>
        </member>
        <member name="F:Miyagi.UI.Controls.Layout.FlowLayoutSettings.parent">
            <summary>
            The parent control.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Layout.FlowLayoutSettings.GetFlowBreak(Miyagi.UI.Controls.Control)">
            <summary>
            Returns a value that represents the flow break setting of the control.
            </summary>
            <param name="child">The child control.</param>
            <returns><c>true</c> if the flow break is set; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Layout.FlowLayoutSettings.SetFlowBreak(Miyagi.UI.Controls.Control,System.Boolean)">
            <summary>
            Sets the value that represents the flow break setting of the control.
            </summary>
            <param name="child">The child control.</param>
            <param name="value">The flow break value to set.</param>
        </member>
        <member name="P:Miyagi.UI.Controls.Layout.FlowLayoutSettings.FlowDirection">
            <summary>
            Gets or sets a value indicating the flow direction of consecutive controls.
            </summary>
            <value>The flow direction of consecutive controls.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Layout.FlowLayoutSettings.WrapContents">
            <summary>
            Gets or sets a value indicating whether the contents should be wrapped or clipped when they exceed the original boundaries of their container.
            </summary>
            <value><c>true</c> if the contents are wrapped; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Miyagi.UI.Controls.Layout.LayoutEventArgs">
            <summary>
            EventArgs for changes in the layout.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Layout.LayoutEventArgs.#ctor(Miyagi.UI.Controls.Control,System.String)">
            <summary>
            Initializes a new instance of the LayoutEventArgs class.
            </summary>
            <param name="affectedControl">The affected control.</param>
            <param name="affectedProperty">The affected property.</param>
        </member>
        <member name="P:Miyagi.UI.Controls.Layout.LayoutEventArgs.AffectedControl">
            <summary>
            Gets the affected control.
            </summary>
            <value>A Control representing the affected control.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Layout.LayoutEventArgs.AffectedProperty">
            <summary>
            Gets the affected property as a string.
            </summary>
            <value>A string representing the affected property.</value>
        </member>
        <member name="T:Miyagi.UI.Controls.Layout.TableLayout">
            <summary>
            Layout engine that positions the controls in a table with user-defined rows and columns.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Layout.TableLayout.Layout(Miyagi.UI.Controls.Control,Miyagi.UI.Controls.Layout.LayoutEventArgs)">
            <summary>
            Performs the layout for the given container, that has to be a TableLayoutPanel.
            </summary>
            <param name="parent">The control whose layout has to be done.</param>
            <param name="layoutEventArgs">The LayoutEventArgs.</param>
            <returns>Always false.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Layout.TableLayout.CalculateCellSizes(Miyagi.UI.Controls.Control,Miyagi.UI.Controls.Layout.TableLayoutSettings,Miyagi.UI.Controls.Control[0:,0:],System.Int32[]@,System.Int32[]@)">
            <summary>
            Calculate the widths of the columns and the heights of the rows.
            </summary>
            <param name="parent">The parent control.</param>
            <param name="settings">The layout settings.</param>
            <param name="grid">The matrix with the controls in their corresponding positions.</param>
            <param name="columnWidths">The list of widths for the columns.</param>
            <param name="rowHeights">The list of heights for the rows.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Layout.TableLayout.FindBiggestControl(System.Int32,System.Func{System.Int32,Miyagi.UI.Controls.Control},System.Func{Miyagi.Common.Data.Size,System.Int32},System.Func{Miyagi.Common.Data.Thickness,System.Int32})">
            <summary>
            Finds the biggest control in a given list, for a dimension specified by a function.
            </summary>
            <param name="elements">The number of elements in the list.</param>
            <param name="getChild">A function that retrieves an element from the list, given an index.</param>
            <param name="getDimension">A function that retrieves the value of the dimension (height or width) measured, given a size.</param>
            <param name="getMargin">A function that retrieves the value of the aplicable margin (vertical or horizontal), given a margin.</param>
            <returns>The value of the dimension (height or width) of the biggest control in the list.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Layout.TableLayout.GetDimensionSize(System.Int32,System.Collections.Generic.IEnumerable{Miyagi.UI.Controls.Layout.TableLayoutStyle},System.Int32,System.Func{System.Int32,System.Int32})">
            <summary>
            Calculates the value of a dimension (height or width) for a list of elements, given a list of styles, the amount of available space, and a function to calculate the biggest element for an index.
            </summary>
            <param name="elements">The number of elements.</param>
            <param name="styles">A collection of styles.</param>
            <param name="availableSpace">The amount of available space.</param>
            <param name="findBiggest">A function that returns the biggest value for a dimension, given an index.</param>
            <returns>A list of with the values of the measured dimension.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Layout.TableLayout.CalculateControlLocations(Miyagi.UI.Controls.IControlCollectionOwner,Miyagi.UI.Controls.Layout.TableLayoutSettings,System.Int32,System.Int32)">
            <summary>
            Fit each control into its corresponding position in the grid.
            </summary>
            <param name="parent">The parent control.</param>
            <param name="settings">The layout settings.</param>
            <param name="columns">The number of columns.</param>
            <param name="rows">The number of rows.</param>
            <returns>A matrix with the controls in their corresponding positions according to the settings.</returns>
        </member>
        <member name="T:Miyagi.UI.Controls.Layout.TableLayoutSettings">
            <summary>
            Collects the characteristics associated with table layouts.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Layout.TableLayoutSettings.GetCell(Miyagi.UI.Controls.Control,System.Int32@,System.Int32@)">
            <summary>
            Returns the row and column position of the specified child control.
            </summary>
            <param name="control">The child control.</param>
            <param name="row">The row position of the specified child control, or -1 if the position of control is determined by <see cref="P:Miyagi.UI.Controls.Control.LayoutEngine"/>.</param>
            <param name="column">The column position of the specified child control, or -1 if the position of control is determined by <see cref="P:Miyagi.UI.Controls.Control.LayoutEngine"/>.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Layout.TableLayoutSettings.GetColumn(Miyagi.UI.Controls.Control)">
            <summary>
            Returns the column position of the specified child control.
            </summary>
            <param name="control">The child control.</param>
            <returns>The column position of the specified child control, or -1 if the position of control is determined by <see cref="P:Miyagi.UI.Controls.Control.LayoutEngine"/>.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Layout.TableLayoutSettings.GetRow(Miyagi.UI.Controls.Control)">
            <summary>
            Returns the row position of the specified child control.
            </summary>
            <param name="control">The child control.</param>
            <returns>The row position of the specified child control, or -1 if the position of control is determined by <see cref="P:Miyagi.UI.Controls.Control.LayoutEngine"/>.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.Layout.TableLayoutSettings.RemoveControl(Miyagi.UI.Controls.Control)">
            <summary>
            Removes a control from the settings.
            </summary>
            <param name="control">The control to remove.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Layout.TableLayoutSettings.SetCell(Miyagi.UI.Controls.Control,System.Int32,System.Int32)">
            <summary>
            Sets the row and column position of the specified child control.
            </summary>
            <param name="control">The control to move.</param>
            <param name="row">The row to which control will be moved.</param>
            <param name="column">The column to which the control will be moved.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Layout.TableLayoutSettings.SetColumn(Miyagi.UI.Controls.Control,System.Int32)">
            <summary>
            Sets the column position of the specified child control.
            </summary>
            <param name="control">The control to move to another column.</param>
            <param name="column">The column to which control will be moved.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Layout.TableLayoutSettings.SetFirstFreeCell(Miyagi.UI.Controls.Control)">
            <summary>
            Sets the row and column position of the specified child control to the first free cell.
            </summary>
            <param name="control">The child control.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Layout.TableLayoutSettings.SetRow(Miyagi.UI.Controls.Control,System.Int32)">
            <summary>
            Sets the row position of the specified child control.
            </summary>
            <param name="control">The control to move to another row.</param>
            <param name="row">The row to which control will be moved.</param>
        </member>
        <member name="P:Miyagi.UI.Controls.Layout.TableLayoutSettings.ColumnCount">
            <summary>
            Gets or sets the maximum number of columns allowed in the table layout.
            </summary>
            <value>The maximum number of columns.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Layout.TableLayoutSettings.ColumnStyles">
            <summary>
            Gets the collection of styles used to determine the look and feel of the table layout columns.
            </summary>
            <value>The collection of styles.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Layout.TableLayoutSettings.RowCount">
            <summary>
            Gets or sets the maximum number of rows allowed in the table layout.
            </summary>
            <value>The maximum number of rows.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Layout.TableLayoutSettings.RowStyles">
            <summary>
            Gets the collection of styles used to determine the look and feel of the table layout rows.
            </summary>
            <value>The collection of styles.</value>
        </member>
        <member name="T:Miyagi.UI.Controls.Layout.TableLayoutStyle">
            <summary>
            Represents the look and feel of cells in a TableLayout.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Layout.TableLayoutStyle.#ctor(Miyagi.UI.SizeType,System.Single)">
            <summary>
            Initializes a new instance of the TableLayoutStyle struct.
            </summary>
            <param name="sizeType">The SizeType.</param>
            <param name="magnitude">The magnitude.</param>
        </member>
        <member name="P:Miyagi.UI.Controls.Layout.TableLayoutStyle.Magnitude">
            <summary>
            Gets or sets the size representing either the width or the height of a cell, in the units specified by the <see cref="P:Miyagi.UI.Controls.Layout.TableLayoutStyle.SizeType"/> property.
            </summary>
            <value>The size representing either the width or the height of a cell.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Layout.TableLayoutStyle.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Layout.TableLayoutStyle.SizeType">
            <summary>
            Gets or sets a flag indicating how a row or column should be sized relative to its containing table.
            </summary>
            <value>A flag indicating how a row or column should be sized relative to its containing table.</value>
        </member>
        <member name="T:Miyagi.UI.Controls.ListBox">
            <summary>
            A ListBox control.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.ListBox.#ctor">
            <summary>
            Initializes a new instance of the ListBox class.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.ListBox.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ListBox class.
            </summary>
            <param name="name">The name of the ListBox.</param>
        </member>
        <member name="P:Miyagi.UI.Controls.ListBox.ListBoxCroppingDisabled">
            <summary>
            Gets a value indicating whether the items should be cropped.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.ListBox.ListBoxHeight">
            <summary>
            Gets the total height available for items.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.ListBox.ListBoxVerticalOffset">
            <summary>
            Gets the fixed vertical offset.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.ListBox.ShouldShowScrollBar">
            <summary>
            Gets a value indicating whether the scrollbar should be displayed.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.ListItem">
            <summary>
            A item of a ListControl.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.ListItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.UI.Controls.ListItem"/> class.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.ListItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.UI.Controls.ListItem"/> class.
            </summary>
            <param name="text">The <see cref="P:Miyagi.UI.Controls.ListItem.Text"/> and <see cref="P:Miyagi.UI.Controls.ListItem.Name"/> of the <see cref="T:Miyagi.UI.Controls.ListItem"/>.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ListItem.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.UI.Controls.ListItem"/> class.
            </summary>
            <param name="text">The <see cref="P:Miyagi.UI.Controls.ListItem.Text"/> and <see cref="P:Miyagi.UI.Controls.ListItem.Name"/> of the <see cref="T:Miyagi.UI.Controls.ListItem"/>.</param>
            <param name="texture">The filename of the <see cref="P:Miyagi.UI.Controls.ListItem.Texture"/>.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ListItem.Dispose">
            <summary>
            Disposes the ListBoxItem.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.ListItem.GetLocationInViewport">
            <summary>
            Gets the location relative to its viewport origin.
            </summary>
            <returns>A <see cref="T:Miyagi.Common.Data.Point"/> representing the location of the control relative to its viewport origin.</returns>
        </member>
        <member name="P:Miyagi.UI.Controls.ListItem.DisplayedText">
            <summary>
            Gets the displayed text.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.ListItem.IsMouseOver">
            <summary>
            Gets a value indicating whether the mouse is over the item.
            </summary>
            <value><c>true</c> if the mouse is over the item; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.ListItem.Location">
            <summary>
            Gets the location.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.ListItem.MiyagiSystem">
            <summary>
            Gets the <see cref="P:Miyagi.UI.Controls.ListItem.MiyagiSystem"/>.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.ListItem.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.ListItem.Opacity">
            <summary>
            Gets the opacity.
            </summary>
            <value>The opacity, ranging between 0 and 1.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.ListItem.Owner">
            <summary>
            Gets the owning <see cref="T:Miyagi.UI.Controls.ListControl"/>.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.ListItem.Selected">
            <summary>
            Gets or sets a value indicating whether the item is selected.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.ListItem.Size">
            <summary>
            Gets the size.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.ListItem.SpriteRenderer">
            <summary>
            Gets the <see cref="T:Miyagi.Common.Rendering.ISpriteRenderer"/>.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.ListItem.Style">
            <summary>
            Gets or sets the style.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.ListItem.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.ListItem.Texture">
            <summary>
            Gets or sets the texture.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.ListItem.TextureFiltering">
            <summary>
            Gets the texture filtering.
            </summary>
            <value>A TextureFiltering enum representing the texture filtering.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.ListItem.ToolTipStyle">
            <summary>
            Gets or sets the style of the tooltip.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.ListItem.ToolTipText">
            <summary>
            Gets or sets the text of the tooltip.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.ListItem.UserData">
            <summary>
            Gets or sets an object which contains data about the item.
            </summary>
            <remarks>This is ignored by the serializer.</remarks>
        </member>
        <member name="P:Miyagi.UI.Controls.ListItem.Visible">
            <summary>
            Gets a value indicating whether the owner is visible.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.ListItem.ListItemElement">
            <summary>
            Gets the list item element.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.ListItem.ToolTipElement">
            <summary>
            Gets the tooltip.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.ListItemCollection">
            <summary>
            A collection of <see cref="T:Miyagi.UI.Controls.ListItem"/>.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.ListItemCollection.Add(System.String)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ListItemCollection.AddRange(System.String[])">
            <summary>
            Adds the specified items.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="T:Miyagi.UI.MagneticDockingHelper`1">
            <summary>
            Helper class for magnetically docking.
            </summary>
            <typeparam name="T">The type of the magnetically dockable control.</typeparam>
        </member>
        <member name="M:Miyagi.UI.MagneticDockingHelper`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.UI.MagneticDockingHelper`1"/> class.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="M:Miyagi.UI.MagneticDockingHelper`1.Do(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Recalculates the new coordinates.
            </summary>
            <param name="oldX">The old x-coordinate.</param>
            <param name="oldY">The old y-coordinate.</param>
            <param name="newX">The new x-coordinate.</param>
            <param name="newY">The new y-coordinate.</param>
        </member>
        <member name="M:Miyagi.UI.MagneticDockingHelper`1.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.PictureBox">
            <summary>
            A PictureBox.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.PictureBox.#ctor">
            <summary>
            Initializes a new instance of the PictureBox class.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.PictureBox.#ctor(System.String)">
            <summary>
            Initializes a new instance of the PictureBox class.
            </summary>
            <param name="name">The name of the PictureBox.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.PictureBox.Load(System.Byte[])">
            <summary>
            Loads a image from the specified byte array.
            </summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.PictureBox.Load(System.IO.Stream)">
            <summary>
            Loads a image from the specified stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.PictureBox.Load(System.String)">
            <summary>
            Loads a image from the specified file.
            </summary>
            <param name="fileName">A string representing the name of the file.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.PictureBox.Dispose(System.Boolean)">
            <summary>
            Disposes the control.
            </summary>
            <param name="disposing">Whether Dispose has been called.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.PictureBox.OnBitmapChanged">
            <summary>
            Called when the <see cref="T:System.Drawing.Bitmap"/> changes.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.PictureBox.UpdateBitmap">
            <summary>
            Updates the Bitmap
            </summary>
            <remarks>This is called <see cref="P:Miyagi.UI.Controls.BitmapControl.NeedsUpdate"/> is true.</remarks>
        </member>
        <member name="T:Miyagi.UI.Controls.ProgressBar">
            <summary>
            A ProgressBar control.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.ProgressBar.#ctor">
            <summary>
            Initializes a new instance of the ProgressBar class.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.ProgressBar.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ProgressBar class.
            </summary>
            <param name="name">The name of the ProgressBar.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ProgressBar.Dispose(System.Boolean)">
            <summary>
            Disposes the control.
            </summary>
            <param name="disposing">Whether Dispose has been called.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ProgressBar.DoResize(System.Double,System.Double)">
            <summary>
            Resizes the control.
            </summary>
            <param name="widthFactor">The relative growth of the width.</param>
            <param name="heightFactor">The relative growth of the height.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ProgressBar.OnSizeChanged(Miyagi.Common.Events.ChangedValueEventArgs{Miyagi.Common.Data.Size})">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.SizeChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.ChangedValueEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ProgressBar.OnValueChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.ProgressBar.ValueChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.ProgressBar.UpdateCore">
            <summary>
            Updates the control.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.ProgressBar.ValueChanged">
            <summary>
            Occurs when the <see cref="P:Miyagi.UI.Controls.ProgressBar.Value"/> property changes.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.ProgressBar.AutoOrientation">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:Miyagi.UI.Controls.Styles.ProgressBarStyle.Orientation"/> property is determinated automatically.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.ProgressBar.Max">
            <summary>
            Gets or sets the maximum value of the ProgressBar.
            </summary>
            <value>The maximum value.</value>
            <remarks>Max will be set to Min if it is set to a value smaller than Min.</remarks>
        </member>
        <member name="P:Miyagi.UI.Controls.ProgressBar.Min">
            <summary>
            Gets or sets the minimum value of the ProgressBar.
            </summary>
            <remarks>Min will be set to Max if it is set to a value larger than Max.</remarks>
        </member>
        <member name="P:Miyagi.UI.Controls.ProgressBar.ProgressBarStyle">
            <summary>
            Gets or sets the style of the bar.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.ProgressBar.Value">
            <summary>
            Gets or sets the value of the ProgressBar.
            </summary>
            <value>The value of the ProgressBar.</value>
            <remarks>Value will be set to Max if the value is larger than Max, and set to Min if the value is smaller than Min.</remarks>
        </member>
        <member name="P:Miyagi.UI.Controls.ProgressBar.Elements">
            <summary>
            Gets a list of elements.
            </summary>
            <value>A list of elements.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.ProgressBar.ProgressBarElement">
            <summary>
            Gets the bar.
            </summary>
            <value>A BarElement representing the bar.</value>
        </member>
        <member name="T:Miyagi.UI.Controls.RadioButton">
            <summary>
            A RadioButton control.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.RadioButton.#ctor">
            <summary>
            Initializes a new instance of the RadioButton class.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.RadioButton.#ctor(System.String)">
            <summary>
            Initializes a new instance of the RadioButton class.
            </summary>
            <param name="name">The name of the RadioButton.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.RadioButton.OnCheckedChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.RadioButton.CheckedChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.RadioButton.OnMouseClick(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseClick"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:Miyagi.UI.Controls.RadioButton.CheckedChanged">
            <summary>
            Occurs when the Checked property is changed.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.RadioButton.Checked">
            <summary>
            Gets or sets a value indicating whether the control is checked.
            </summary>
            <value>The check state of the control.</value>
        </member>
        <member name="T:Miyagi.UI.Controls.RenderBox">
            <summary>
            A RenderBox.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.RenderBox.#ctor">
            <summary>
            Initializes a new instance of the RenderBox class.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.RenderBox.#ctor(System.String)">
            <summary>
            Initializes a new instance of the RenderBox class.
            </summary>
            <param name="name">The name of the RenderBox.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.RenderBox.CreateRenderTexture">
            <summary>
            Creates the render texture.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.RenderBox.Dispose(System.Boolean)">
            <summary>
            Disposes the RenderBox.
            </summary>
            <param name="disposing">Whether Dispose has been called.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.RenderBox.DoResize(System.Double,System.Double)">
            <summary>
            Resizes the control.
            </summary>
            <param name="widthFactor">The relative growth of the width.</param>
            <param name="heightFactor">The relative growth of the height.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.RenderBox.OnSizeChanged(Miyagi.Common.Events.ChangedValueEventArgs{Miyagi.Common.Data.Size})">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.SizeChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.ChangedValueEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.RenderBox.RemoveTexture">
            <summary>
            Removes the texture.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.RenderBox.UpdateCore">
            <summary>
            Updates the control.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.RenderBox.BackgroundColour">
            <summary>
            Gets or sets the background colour.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.RenderBox.Camera">
            <summary>
            Gets or sets the camera.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Miyagi.UI.Controls.RenderBox.ResizeCamera">
            <summary>
            Gets or sets a value indicating whether the camera should be resized when the control is resized.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.RenderBox.Elements">
            <summary>
            Gets a list of elements.
            </summary>
            <value>A list of elements.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.RenderBox.NeedsUpdate">
            <summary>
            Gets or sets a value indicating whether the RenderBox has to be updated.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.RenderBox.TextureElement">
            <summary>
            Gets the TextureElement.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.RenderBox.TextureName">
            <summary>
            Gets the name of the texture.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.Slider">
            <summary>
            A Slider control.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Slider.#ctor">
            <summary>
            Initializes a new instance of the Slider class.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Slider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Slider class.
            </summary>
            <param name="name">The name of the Slider.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Slider.EndIncrement">
            <summary>
            Bring slider to the Max position.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Slider.LargeDecrement">
            <summary>
            Substract LargeChange to the slider.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Slider.LargeIncrement">
            <summary>
            Add LargeChange to the slider.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Slider.SmallDecrement">
            <summary>
            Substract SmallChange to the slider.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Slider.SmallIncrement">
            <summary>
            Add SmallChange to the slider.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Slider.StartDecrement">
            <summary>
            Bring slider to the Min position.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Slider.Dispose(System.Boolean)">
            <summary>
            Disposes the control.
            </summary>
            <param name="disposing">Whether Dispose has been called.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Slider.DoResize(System.Double,System.Double)">
            <summary>
            Resizes the control.
            </summary>
            <param name="widthFactor">The relative growth of the width.</param>
            <param name="heightFactor">The relative growth of the height.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Slider.OnKeyDown(Miyagi.Common.Events.KeyboardEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.KeyDown"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.KeyboardEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Slider.OnMouseDown(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseDown"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Slider.OnMouseDrag(Miyagi.Common.Events.ChangedValueEventArgs{Miyagi.Common.Data.Point})">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseDrag"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.ChangedValueEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Slider.OnMouseHover(Miyagi.Common.Events.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseHover"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Slider.OnMouseLeave(Miyagi.Common.Events.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseLeave"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Slider.OnMouseUp(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseUp"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Slider.OnMouseWheelMoved(Miyagi.Common.Events.ValueEventArgs{System.Int32})">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseWheelMoved"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.ValueEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Slider.OnScroll(Miyagi.Common.Events.ScrollEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Slider.Scroll"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.ScrollEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Slider.OnSizeChanged(Miyagi.Common.Events.ChangedValueEventArgs{Miyagi.Common.Data.Size})">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.SizeChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.ChangedValueEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Slider.OnValueChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Slider.ValueChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Slider.UpdateCore">
            <summary>
            Updates the control.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Slider.CheckValue(System.Single@)">
            <summary>
            Gets a proposed value for the slider, returns a value that satisfies the constraints of the slider.
            </summary>
            <param name="proposedValue">The proposed value for the slider.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Slider.Modify(Miyagi.Common.ScrollEventType,System.Single)">
            <summary>
            Modifies the position of the slider by the specified value, and fires a scroll event.
            </summary>
            <param name="type">The type of change to the value of the slider.</param>
            <param name="delta">The amount to add to the current value of the slider.</param>
        </member>
        <member name="E:Miyagi.UI.Controls.Slider.Scroll">
            <summary>
            Occurs when the scroll box has been moved by either a mouse or keyboard action.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Slider.ValueChanged">
            <summary>
            Occurs when the Value property is changed.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Slider.AutoOrientation">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:Miyagi.UI.Controls.Styles.ThumbStyle.Orientation"/> property is determinated automatically.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Slider.IgnoreBackgroundClicks">
            <summary>
            Gets or sets a value indicating whether the mouse clicks on the background set the position of the thumb.
            </summary>
            <value>If set to true, the thumb doesn't move without being grabbed. Default is false.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Slider.Inverted">
            <summary>
            Gets or sets a value indicating whether the Slider is inverted.
            </summary>
            <value>If true Min is the upmost / rightmost point and Max is the downmost / leftmost point of the Slider.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Slider.LargeChange">
            <summary>
            Gets or sets the value which is added or subtracted if PageUp or PageDown is pressed.
            </summary>
            <value>An <see cref="T:System.Int32"/> representing the value.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Slider.Max">
            <summary>
            Gets or sets the maximum value of the Slider.
            </summary>
            <value>The maximum value.</value>
            <remarks>Max will be set to Min if it is set to a value smaller than Min.</remarks>
        </member>
        <member name="P:Miyagi.UI.Controls.Slider.Min">
            <summary>
            Gets or sets the minimum value of the Slider.
            </summary>
            <value>The minimum value.</value>
            <remarks>Min will be set to Max if it is set to a value larger than Max.</remarks>
        </member>
        <member name="P:Miyagi.UI.Controls.Slider.SmallChange">
            <summary>
            Gets or sets the value which it added or subtracted if the mouse wheel is moved or the arrow keys are pressed.
            </summary>
            <value>An <see cref="T:System.Int32"/> representing the value.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Slider.ThumbStyle">
            <summary>
            Gets or sets the style of the thumb.
            </summary>
            <value>A ThumbStyle representing the style of the thumb.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Slider.Value">
            <summary>
            Gets or sets the value of the Slider.
            </summary>
            <value>The value of the Slider.</value>
            <remarks>Value will be set to Max if the value is larger than Max, and set to Min if the value is smaller than Min.</remarks>
        </member>
        <member name="P:Miyagi.UI.Controls.Slider.IsArrowKeyMovementBlocked">
            <summary>
            Gets a value indicating whether arrow key movement is blocked.
            </summary>
            <value>
            <c>true</c> if arrow key movement is blocked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Miyagi.UI.Controls.Slider.Elements">
            <summary>
            Gets a list of elements.
            </summary>
            <value>A list of elements.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Slider.ThumbElement">
            <summary>
            Gets the thumb.
            </summary>
            <value>A ThumbElement representing the thumb.</value>
        </member>
        <member name="T:Miyagi.UI.Controls.Styles.BorderStyle">
            <summary>
            The style of a BorderElement.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.Styles.Style">
            <summary>
            The base class for styles.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Styles.Style.DoResize(System.Double,System.Double)">
            <summary>
            Resizes the style.
            </summary>
            <param name="widthFactor">The relative growth of the width.</param>
            <param name="heightFactor">The relative growth of the height.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Styles.Style.OnPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="propertyName">The name of the changed property.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.Styles.Style.OnPropertyChanging(System.String)">
            <summary>
            Raises the PropertyChanging event.
            </summary>
            <param name="propertyName">The name of the changing property.</param>
        </member>
        <member name="E:Miyagi.UI.Controls.Styles.Style.PropertyChanged">
            <summary>
            Occurs after a property changes.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.Styles.Style.PropertyChanging">
            <summary>
            Occurs before a property changes.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Styles.BorderStyle.#ctor">
            <summary>
            Initializes a new instance of the BorderStyle class.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Styles.BorderStyle.DoResize(System.Double,System.Double)">
            <summary>
            Resizes the style.
            </summary>
            <param name="widthFactor">The relative growth of the width.</param>
            <param name="heightFactor">The relative growth of the height.</param>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.BorderStyle.Thickness">
            <summary>
            Gets or sets the thickness of the border.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.BorderStyle.UV">
            <summary>
            Gets or sets the UV-Coordinates used by the BorderElement.
            </summary>
            <value>A RectangleF representing the UV-coordinates used by the BorderElement. Default is (0.25, 0.25, 0.75, 0.75).</value>
            <remarks>These UV-coordinates represent the inner rectangle of a border texture, which is not used for the actual border.</remarks>
        </member>
        <member name="T:Miyagi.UI.Controls.Styles.CaretStyle">
            <summary>
            The style of a CaretElement.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Styles.CaretStyle.#ctor">
            <summary>
            Initializes a new instance of the CaretStyle class.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Styles.CaretStyle.DoResize(System.Double,System.Double)">
            <summary>
            Resizes the style.
            </summary>
            <param name="widthFactor">The relative growth of the width.</param>
            <param name="heightFactor">The relative growth of the height.</param>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.CaretStyle.BlinkInterval">
            <summary>
            Gets or sets the blink interval.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.CaretStyle.Colour">
            <summary>
            Gets or sets the colour of the CaretElement.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.CaretStyle.Size">
            <summary>
            Gets or sets the size of the CaretElement.
            </summary>
            <value>A Size representing the size of the CaretElement.</value>
        </member>
        <member name="T:Miyagi.UI.Controls.Styles.EditBoxStyle">
            <summary>
            The style of a EditBoxElement.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Styles.EditBoxStyle.#ctor">
            <summary>
            Initializes a new instance of the TextBoxStyle class.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Styles.EditBoxStyle.DoResize(System.Double,System.Double)">
            <summary>
            Resizes the style.
            </summary>
            <param name="widthFactor">The relative growth of the width.</param>
            <param name="heightFactor">The relative growth of the height.</param>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.EditBoxStyle.CaretStyle">
            <summary>
            Gets or sets the style of the caret.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.EditBoxStyle.MaxCharacterLimit">
            <summary>
            Gets or sets the maximum amount of characters.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.EditBoxStyle.ReadOnly">
            <summary>
            Gets or sets a value indicating whether the user can modify the text of the TextBox.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.EditBoxStyle.UseCaret">
            <summary>
            Gets or sets a value indicating whether the TextBox should use a caret.
            </summary>
            <value><c>true</c> if the TextBox uses a caret; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Miyagi.UI.Controls.Styles.ListItemStyle">
            <summary>
            The style of a ListBoxItemElement.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Styles.ListItemStyle.#ctor">
            <summary>
            Initializes a new instance of the ListBoxItemStyle class.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.ListItemStyle.TextStyle">
            <summary>
            Gets or sets the style of the text.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.ListItemStyle.Texture">
            <summary>
            Gets or sets the texture.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.Styles.ListStyle">
            <summary>
            The common style of all items of a ListBox.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Styles.ListStyle.#ctor">
            <summary>
            Initializes a new instance of the ListBoxStyle class.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Styles.ListStyle.DoResize(System.Double,System.Double)">
            <summary>
            Resizes the style.
            </summary>
            <param name="widthFactor">The relative growth of the width.</param>
            <param name="heightFactor">The relative growth of the height.</param>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.ListStyle.Alignment">
            <summary>
            Gets or sets the alignment of the items.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.ListStyle.Font">
            <summary>
            Gets or sets the font of the items.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.ListStyle.ForegroundColour">
            <summary>
            Gets or sets the foreground colour of the items.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.ListStyle.HoverColour">
            <summary>
            Gets or sets the colour of the hovered item.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.ListStyle.ItemOffset">
            <summary>
            Gets or sets the offset of the items.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.ListStyle.MaxVisibleItems">
            <summary>
            Gets or sets the maximum number of visible items.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.ListStyle.MultiSelect">
            <summary>
            Gets or sets a value indicating whether multiple items can be selected.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.ListStyle.ScrollBarStyle">
            <summary>
            Gets or sets the style of the scrollbar.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.ListStyle.SelectColour">
            <summary>
            Gets or sets the colour of selected items.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.Styles.ProgressBarStyle">
            <summary>
            The style of a ProgressBarElement.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Styles.ProgressBarStyle.#ctor">
            <summary>
            Initializes a new instance of the BarStyle class.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Styles.ProgressBarStyle.DoResize(System.Double,System.Double)">
            <summary>
            Resizes the style.
            </summary>
            <param name="widthFactor">The relative growth of the width.</param>
            <param name="heightFactor">The relative growth of the height.</param>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.ProgressBarStyle.BlockExtent">
            <summary>
            Gets or sets the extent of the individual blocks.
            </summary>
            <remarks>This is only used when the <see cref="P:Miyagi.UI.Controls.Styles.ProgressBarStyle.Mode"/> is <see cref="F:Miyagi.UI.ProgressBarMode.Blocks"/>.</remarks>
            <exception cref="T:System.ArgumentException">BlockWidth cannot be smaller than one.</exception>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.ProgressBarStyle.MarqueeAnimationTime">
            <summary>
            Gets or sets the time it takes for the bar to scroll.
            </summary>
            <remarks>This is only used when the <see cref="P:Miyagi.UI.Controls.Styles.ProgressBarStyle.Mode"/> is BarMode.Marquee.</remarks>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.ProgressBarStyle.Mode">
            <summary>
            Gets or sets the ProgressBarMode of the ProgressBar.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.ProgressBarStyle.Offset">
            <summary>
            Gets or sets the offset of the bar.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.ProgressBarStyle.Orientation">
            <summary>
            Gets or sets the orientation.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.Styles.ScrollBarStyle">
            <summary>
            The style of a ScrollBarElement.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Styles.ScrollBarStyle.#ctor">
            <summary>
            Initializes a new instance of the ScrollBarStyle class.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Styles.ScrollBarStyle.DoResize(System.Double,System.Double)">
            <summary>
            Resizes the style.
            </summary>
            <param name="widthFactor">The relative growth of the width.</param>
            <param name="heightFactor">The relative growth of the height.</param>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.ScrollBarStyle.AlwaysVisible">
            <summary>
            Gets or sets a value indicating whether the scrollbar is always visible.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.ScrollBarStyle.BorderStyle">
            <summary>
            Gets or sets the border.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.ScrollBarStyle.Extent">
            <summary>
            Gets or sets the extent of the scrollbar.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.ScrollBarStyle.ShowButtons">
            <summary>
            Gets or sets a value indicating whether to show the scrollbar buttons.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.ScrollBarStyle.ThumbStyle">
            <summary>
            Gets or sets the thumb of the scrollbar.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.Styles.TabBarStyle">
            <summary>
            The style of a TabBarElement.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Styles.TabBarStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.UI.Controls.Styles.TabBarStyle"/> class.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Styles.TabBarStyle.DoResize(System.Double,System.Double)">
            <summary>
            Resizes the style.
            </summary>
            <param name="widthFactor">The relative growth of the width.</param>
            <param name="heightFactor">The relative growth of the height.</param>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.TabBarStyle.Alignment">
            <summary>
            Gets or sets the alignment of the tab text.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.TabBarStyle.Extent">
            <summary>
            Gets or sets the extent.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.TabBarStyle.Font">
            <summary>
            Gets or sets the font of the tabs.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.TabBarStyle.ForegroundColour">
            <summary>
            Gets or sets the colour of the tabs.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.TabBarStyle.HoverColour">
            <summary>
            Gets or sets the colour of the hovered tab.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.TabBarStyle.Mode">
            <summary>
            Gets or sets the mode.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.TabBarStyle.SelectColour">
            <summary>
            Gets or sets the colour of the selected tab.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.Styles.TabStyle">
            <summary>
            The style of a TabElement.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Styles.TabStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.UI.Controls.Styles.TabStyle"/> class.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Styles.TabStyle.DoResize(System.Double,System.Double)">
            <summary>
            Resizes the style.
            </summary>
            <param name="widthFactor">The relative growth of the width.</param>
            <param name="heightFactor">The relative growth of the height.</param>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.TabStyle.FixedSize">
            <summary>
            Gets or sets the fixed size.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.TabStyle.TextStyle">
            <summary>
            Gets or sets the text style.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.Styles.TextBoxStyle">
            <summary>
            The style of a TextBoxElement.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.TextBoxStyle.DigitOnly">
            <summary>
            Gets or sets a value indicating whether only numbers should be accepted as input by the TextBox.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.TextBoxStyle.LetterOrDigitOnly">
            <summary>
            Gets or sets a value indicating whether only alphanumeric characters should be accepted as input by the TextBox.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.Styles.TextStyle">
            <summary>
            The style of a TextElement.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Styles.TextStyle.#ctor">
            <summary>
            Initializes a new instance of the TextStyle class.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Styles.TextStyle.DoResize(System.Double,System.Double)">
            <summary>
            Resizes the style.
            </summary>
            <param name="widthFactor">The relative growth of the width.</param>
            <param name="heightFactor">The relative growth of the height.</param>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.TextStyle.Alignment">
            <summary>
            Gets or sets the alignment.
            </summary>
            <value>The alignment of the text.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.TextStyle.Font">
            <summary>
            Gets or sets the font.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.TextStyle.ForegroundColour">
            <summary>
            Gets or sets the foreground colour of the text.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.TextStyle.Multiline">
            <summary>
            Gets or sets a value indicating whether the TextElement can extend more than one line.
            </summary>
            <value><c>true</c> if the the TextElement can extend more than one line; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.TextStyle.Offset">
            <summary>
            Gets or sets the offset of the text.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.TextStyle.SelectionBackgroundColour">
            <summary>
            Gets or sets the background colour of selected text.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.TextStyle.WordWrap">
            <summary>
            Gets or sets a value indicating whether words should be wrapped to the next line when necessary.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.Styles.ThumbStyle">
            <summary>
            The style of a ThumbElement.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Styles.ThumbStyle.#ctor">
            <summary>
            Initializes a new instance of the ThumbStyle class.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Styles.ThumbStyle.DoResize(System.Double,System.Double)">
            <summary>
            Resizes the style.
            </summary>
            <param name="widthFactor">The relative growth of the width.</param>
            <param name="heightFactor">The relative growth of the height.</param>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.ThumbStyle.AutoSize">
            <summary>
            Gets or sets a value indicating whether the thumb should be resized according to the Min and Max values.
            </summary>
            <value>If set to true, the thumb resizes if Max or Min has changed. Default is false.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.ThumbStyle.BorderStyle">
            <summary>
            Gets or sets the border.
            </summary>
            <value>A BorderElement representing the border of the control.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.ThumbStyle.Orientation">
            <summary>
            Gets or sets the orientation of the ThumbElement.
            </summary>
            <value>The orientation.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.ThumbStyle.Size">
            <summary>
            Gets or sets the height of the thumb.
            </summary>
            <value>The height in pixels.</value>
        </member>
        <member name="T:Miyagi.UI.Controls.Styles.ToolTipStyle">
            <summary>
            The style of a ToolTipElement.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.Styles.ToolTipStyle.#ctor">
            <summary>
            Initializes a new instance of the ToolTipStyle class.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.ToolTipStyle.DisplayDuration">
            <summary>
            Gets or sets how long the tooltip is displayed.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.ToolTipStyle.FadeInDuration">
            <summary>
            Gets or sets how long the tooltip is fades.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.ToolTipStyle.HoverDuration">
            <summary>
            Gets or sets how long the mouse cursor has to hover over the parent before the tooltip is displayed.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.ToolTipStyle.Padding">
            <summary>
            Gets or sets the inner padding of the tooltip.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.Styles.ToolTipStyle.TextStyle">
            <summary>
            Gets or sets the style of the text.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.TabControl">
            <summary>
            Manages a related set of tab pages.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.TabControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.UI.Controls.TabControl"/> class.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.TabControl.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.UI.Controls.TabControl"/> class.
            </summary>
            <param name="name">The name of the TabControl.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.TabControl.Dispose(System.Boolean)">
            <summary>
            Disposes the control.
            </summary>
            <param name="disposing">Whether Dispose has been called.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.TabControl.DoResize(System.Double,System.Double)">
            <summary>
            Resizes the control.
            </summary>
            <param name="widthFactor">The relative growth of the width.</param>
            <param name="heightFactor">The relative growth of the height.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.TabControl.OnControlAdded(Miyagi.Common.Events.ValueEventArgs{Miyagi.UI.Controls.Control})">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.ControlAdded"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.ValueEventArgs`1"/> instance containing the event data.</param>
            <exception cref="T:System.InvalidOperationException">Added control is not a TabPage.</exception>
        </member>
        <member name="M:Miyagi.UI.Controls.TabControl.OnControlRemoved(Miyagi.Common.Events.ValueEventArgs{Miyagi.UI.Controls.Control})">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.ControlRemoved"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.ValueEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.TabControl.OnMouseDown(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseDown"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.TabControl.OnMouseEnter(Miyagi.Common.Events.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseEnter"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.TabControl.OnMouseHeld(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseHeld"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.TabControl.OnMouseHover(Miyagi.Common.Events.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseHover"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.TabControl.OnMouseLeave(Miyagi.Common.Events.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseLeave"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.TabControl.OnMouseUp(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseUp"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.TabControl.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.TabControl.SelectedIndexChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.TabControl.OnTabBarExtentChanged(System.Int32,System.Int32)">
            <summary>
            Called when the tab bar extent changes.
            </summary>
            <param name="oldExtent">The old extent.</param>
            <param name="newExtent">The new extent.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.TabControl.UpdateCore">
            <summary>
            Updates the control.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.TabControl.SelectedIndexChanged">
            <summary>
            Occurs when the <see cref="P:Miyagi.UI.Controls.TabControl.SelectedIndex"/> property changes.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.TabControl.SelectedIndex">
            <summary>
            Gets or sets the index of the selected tab.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.TabControl.SelectedTab">
            <summary>
            Gets or sets the selected tab.
            </summary>
            <value>The selected tab.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.TabControl.TabBarStyle">
            <summary>
            Gets or sets the tab bar style.
            </summary>
            <value>The tab bar style.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.TabControl.TabCount">
            <summary>
            Gets the tab count.
            </summary>
            <value>The tab count.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.TabControl.TabPages">
            <summary>
            Gets the tab pages.
            </summary>
            <value>The tab pages.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.TabControl.TabBarElement">
            <summary>
            Gets the tab bar element.
            </summary>
            <value>The tab bar element.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.TabControl.Elements">
            <summary>
            Gets a list of elements.
            </summary>
            <value>A list of elements.</value>
        </member>
        <member name="T:Miyagi.UI.Controls.TableLayoutPanel">
            <summary>
            Represents a parent that dynamically lays out its contents in a grid composed of rows and columns.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.TableLayoutPanel.#ctor">
            <summary>
            Initializes a new instance of the TableLayoutPanel class.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.TableLayoutPanel.#ctor(System.String)">
            <summary>
            Initializes a new instance of the TableLayoutPanel class.
            </summary>
            <param name="name">The name of the TableLayoutPanel.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.TableLayoutPanel.AddControl(Miyagi.UI.Controls.Control,System.Int32,System.Int32)">
            <summary>
            Adds a control to the panel, specifying the row and column where it should go.
            </summary>
            <param name="control">The control to add.</param>
            <param name="row">The row inside the panel where the control should go.</param>
            <param name="column">The column inside the panel where the control should go.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.TableLayoutPanel.FillWith2DArray(System.Object[0:,0:],Miyagi.UI.Controls.Styles.TextStyle,System.Boolean)">
            <summary>
            Converts items from a two-dimensional array to Labels and adds them to the TableLayoutPanel.
            </summary>
            <param name="array">The array containing the elements.</param>
            <param name="textStyle">The TextStyle which will be applied to the Labels.</param>
            <param name="clear">Indicates whether the current control collection should be cleared.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.TableLayoutPanel.RemoveControl(Miyagi.UI.Controls.Control)">
            <summary>
            Removes a control from the panel.
            </summary>
            <param name="control">The control to remove.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.TableLayoutPanel.OnControlAdded(Miyagi.Common.Events.ValueEventArgs{Miyagi.UI.Controls.Control})">
            <summary>
            Raises the ControlAdded event.
            </summary>
            <param name="e">An ControlEventArgs that contains the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.TableLayoutPanel.OnControlRemoved(Miyagi.Common.Events.ValueEventArgs{Miyagi.UI.Controls.Control})">
            <summary>
            Raises the ControlRemoved event.
            </summary>
            <param name="e">An ControlEventArgs that contains the event data.</param>
        </member>
        <member name="P:Miyagi.UI.Controls.TableLayoutPanel.ColumnCount">
            <summary>
            Gets or sets the number of columns in the table.
            </summary>
            <value>The number of columns.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.TableLayoutPanel.ColumnStyles">
            <summary>
            Gets the collection of styles used to determine the look and feel of the table layout columns.
            </summary>
            <value>The collection of styles.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.TableLayoutPanel.LayoutSettings">
            <summary>
            Gets the settings for the parent.
            </summary>
            <value>The LayoutSettings.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.TableLayoutPanel.RowCount">
            <summary>
            Gets or sets the number of rows in the table.
            </summary>
            <value>The number of rows.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.TableLayoutPanel.RowStyles">
            <summary>
            Gets the collection of styles used to determine the look and feel of the table layout rows.
            </summary>
            <value>The collection of styles.</value>
        </member>
        <member name="T:Miyagi.UI.Controls.TabPage">
            <summary>
            Represents a single tab page in a <see cref="P:Miyagi.UI.Controls.TabPage.TabControl"/>.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.TabPage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.UI.Controls.TabPage"/> class.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.TabPage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.UI.Controls.TabPage"/> class.
            </summary>
            <param name="name">The name of the TabPage.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.TabPage.DoResize(System.Double,System.Double)">
            <summary>
            Resizes the control.
            </summary>
            <param name="widthFactor">The relative growth of the width.</param>
            <param name="heightFactor">The relative growth of the height.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.TabPage.OnParentChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.ParentChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.TabPage.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,Miyagi.UI.BoundsSpecified)">
            <summary>
            Performs the work of setting the specified bounds of this control.
            </summary>
            <param name="x">The new <see cref="P:Miyagi.UI.Controls.Control.Left"/> property value of the control.</param>
            <param name="y">The new <see cref="P:Miyagi.UI.Controls.Control.Top"/> property value of the control.</param>
            <param name="newWidth">The new <see cref="P:Miyagi.UI.Controls.Control.Width"/> property value of the control.</param>
            <param name="newHeight">The new <see cref="P:Miyagi.UI.Controls.Control.Height"/> property value of the control.</param>
            <param name="specified">A bitwise combination of <see cref="T:Miyagi.UI.BoundsSpecified"/> values.</param>
        </member>
        <member name="P:Miyagi.UI.Controls.TabPage.Anchor">
            <summary>
            Gets or sets the edges of the parent to which the control is bound.
            </summary>
            <value>
            A bitwise combination of <see cref="T:Miyagi.UI.AnchorStyles"/>. The default is <b>Top</b> and <b>Left</b>.
            </value>
        </member>
        <member name="P:Miyagi.UI.Controls.TabPage.AutoSize">
            <summary>
            Gets or sets a value indicating whether the control will resize according to the setting of AutoSizeMode.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.TabPage.Dock">
            <summary>
            Gets or sets which control borders are docked to its parent control and determines how a control is resized with its parent.
            </summary>
            <value>One of the DockStyle values. The default is None.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.TabPage.Selected">
            <summary>
            Gets a value indicating whether this <see cref="T:Miyagi.UI.Controls.TabPage"/> is selected.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.TabPage.TabStyle">
            <summary>
            Gets or sets the tab style.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.TabPage.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.TabPage.Visible">
            <summary>
            Gets or sets a value indicating whether the control and its children are visible.
            </summary>
            <value>If the control is visible true; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.TabPage.TabElement">
            <summary>
            Gets the tab element.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Controls.TextBox">
            <summary>
            A TextBox control.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.TextBox.#ctor">
            <summary>
            Initializes a new instance of the TextBox class.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.TextBox.#ctor(System.String)">
            <summary>
            Initializes a new instance of the TextBox class.
            </summary>
            <param name="name">The name of the TextBox.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.TextBox.DeselectText">
            <summary>
            Deselects the text.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Controls.TextBox.InsertText(System.String)">
            <summary>
            Tries to insert a string into the TextBox.
            </summary>
            <param name="text">String to insert.</param>
            <returns><c>true</c> if success; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Miyagi.UI.Controls.TextBox.Dispose(System.Boolean)">
            <summary>
            Disposes the control.
            </summary>
            <param name="disposing">Whether Dispose has been called.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.TextBox.DoResize(System.Double,System.Double)">
            <summary>
            Resizes the control.
            </summary>
            <param name="widthFactor">The relative growth of the width.</param>
            <param name="heightFactor">The relative growth of the height.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.TextBox.OnKeyDown(Miyagi.Common.Events.KeyboardEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.KeyDown"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.KeyboardEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.TextBox.OnKeyHeld(Miyagi.Common.Events.KeyboardEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.KeyHeld"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.KeyboardEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.TextBox.OnKeyUp(Miyagi.Common.Events.KeyboardEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.KeyUp"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.KeyboardEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.TextBox.OnMouseDown(Miyagi.Common.Events.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseDown"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.TextBox.OnMouseDrag(Miyagi.Common.Events.ChangedValueEventArgs{Miyagi.Common.Data.Point})">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Control.MouseDrag"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.ChangedValueEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.TextBox.OnPasswordCharChanged(System.EventArgs)">
            <summary>
            Handles PasswordChar changes.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.TextBox.OnSubmit(Miyagi.Common.Events.ValueEventArgs{System.String})">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.TextBox.Submit"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.ValueEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.TextBox.OnTextChanged(Miyagi.Common.Events.TextEventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Controls.Label.TextChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:Miyagi.Common.Events.TextEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Controls.TextBox.UpdateCore">
            <summary>
            Updates the control.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Controls.TextBox.Submit">
            <summary>
            Occurs when the enter is pressed and the control has the focus.
            </summary>
            <remarks>Submits the text.</remarks>
        </member>
        <member name="P:Miyagi.UI.Controls.TextBox.AutoCompleteSource">
            <summary>
            Gets or sets the auto completion source.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.TextBox.CaretLocation">
            <summary>
            Gets or sets the caret location.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.TextBox.ClearTextOnSubmit">
            <summary>
            Gets or sets a value indicating whether the text should be cleared after submit.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.TextBox.DefocusOnSubmit">
            <summary>
            Gets or sets a value indicating whether the TextBox should lose focus after submit.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.TextBox.DisplayedText">
            <summary>
            Gets the displayed text.
            </summary>
            <value>The displayed text.</value>
        </member>
        <member name="P:Miyagi.UI.Controls.TextBox.IsKeyDown">
            <summary>
            Gets a value indicating whether a key is currently down.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.TextBox.PasswordChar">
            <summary>
            Gets or sets the character used to obfuscate the text of the TextBox.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.TextBox.SelectedText">
            <summary>
            Gets the selected text.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.TextBox.TextBoxStyle">
            <summary>
            Gets or sets the TextBox style.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.TextBox.IsArrowKeyMovementBlocked">
            <summary>
            Gets a value indicating whether arrow key movement is blocked.
            </summary>
            <value>
            <c>true</c> if arrow key movement is blocked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Miyagi.UI.Controls.TextBox.Elements">
            <summary>
            Gets a list of elements.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Controls.TextBox.TextBoxElement">
            <summary>
            Gets the TextBoxElement.
            </summary>
        </member>
        <member name="T:Miyagi.UI.Cursor">
            <summary>
            Represents a mouse cursor.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Cursor.#ctor">
            <summary>
            Initializes a new instance of the Cursor class.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Cursor.#ctor(Miyagi.Common.Resources.Skin,Miyagi.Common.Data.Size,Miyagi.Common.Data.Point,System.Boolean)">
            <summary>
            Initializes a new instance of the Cursor class.
            </summary>
            <param name="skin">The name of the cursor's Skin.</param>
            <param name="size">The size of the cursor.</param>
            <param name="hotspotLocation">The position of the cursor's main hotspot.</param>
            <param name="visibility">Whether the cursor is initially visible.</param>
        </member>
        <member name="M:Miyagi.UI.Cursor.Finalize">
            <summary>
            Finalizes an instance of the Cursor class.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Cursor.Dispose">
            <summary>
            Releases the unmanaged resources used by the cursor.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Cursor.ForceRedraw">
            <summary>
            Forces a redraw of the cursor.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Cursor.Resize(System.Double,System.Double)">
            <summary>
            Resizes the cursor.
            </summary>
            <param name="widthFactor">The relative growth of the width.</param>
            <param name="heightFactor">The relative growth of the height.</param>
        </member>
        <member name="M:Miyagi.UI.Cursor.SetActiveMode(Miyagi.UI.CursorMode)">
            <summary>
            Sets the active mode.
            </summary>
            <param name="mode">A CursorMode representing the active mode.</param>
        </member>
        <member name="M:Miyagi.UI.Cursor.SetHotspot(Miyagi.UI.CursorMode,Miyagi.Common.Data.Point)">
            <summary>
            Sets the hotspot of a cursor mode.
            </summary>
            <param name="mode">The cursor mode.</param>
            <param name="hotspot">The hotspot of the cursor mode.</param>
        </member>
        <member name="M:Miyagi.UI.Cursor.Update">
            <summary>
            Updates the Cursor.
            </summary>
        </member>
        <member name="M:Miyagi.UI.Cursor.ChangeActiveMode(System.String)">
            <summary>
            Changes the active mode.
            </summary>
            <param name="newMode">A string representing the new mode.</param>
        </member>
        <member name="M:Miyagi.UI.Cursor.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the cursor.
            </summary>
            <param name="disposing">Whether Dispose has been called.</param>
        </member>
        <member name="M:Miyagi.UI.Cursor.DoResize(System.Double,System.Double)">
            <summary>
            Resizes the cursor.
            </summary>
            <param name="widthFactor">The relative growth of the width.</param>
            <param name="heightFactor">The relative growth of the height.</param>
        </member>
        <member name="M:Miyagi.UI.Cursor.GetCursorTexture(System.String)">
            <summary>
            Gets the cursor texture.
            </summary>
            <param name="skin">The name of the skin.</param>
            <returns>A <see cref="P:Miyagi.UI.Cursor.Texture"/> representing the cursor texture.</returns>
        </member>
        <member name="M:Miyagi.UI.Cursor.OnActiveHotspotChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Cursor.ActiveHotspotChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Cursor.OnActiveModeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Cursor.ActiveModeChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Cursor.OnLocationChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Cursor.LocationChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Cursor.OnSizeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Cursor.SizeChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Cursor.OnSkinChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Cursor.SkinChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Miyagi.UI.Cursor.OnVisibleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Miyagi.UI.Cursor.VisibleChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:Miyagi.UI.Cursor.ActiveHotspotChanged">
            <summary>
            Occurs when the <see cref="P:Miyagi.UI.Cursor.ActiveHotspot"/> property changes.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Cursor.ActiveModeChanged">
            <summary>
            Occurs when the <see cref="P:Miyagi.UI.Cursor.ActiveMode"/> property changes.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Cursor.LocationChanged">
            <summary>
            Occurs when the <see cref="P:Miyagi.UI.Cursor.Location"/> property changes.
            </summary> 
        </member>
        <member name="E:Miyagi.UI.Cursor.SizeChanged">
            <summary>
            Occurs when the <see cref="P:Miyagi.UI.Cursor.Size"/> property changes.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Cursor.SkinChanged">
            <summary>
            Occurs when the <see cref="P:Miyagi.UI.Cursor.Skin"/> property changes.
            </summary>
        </member>
        <member name="E:Miyagi.UI.Cursor.VisibleChanged">
            <summary>
            Occurs when the <see cref="P:Miyagi.UI.Cursor.Visible"/> property changes.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Cursor.ActiveHotspot">
            <summary>
            Gets the active hotspot.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Cursor.ActiveMode">
            <summary>
            Gets or sets the active cursor.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Cursor.Hotspots">
            <summary>
            Gets a dictionary of hotspot coordinates.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Cursor.Location">
            <summary>
            Gets the location of the cursor.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Cursor.Size">
            <summary>
            Gets or sets the size of the cursor.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Cursor.Skin">
            <summary>
            Gets or sets the Skin.
            </summary>
        </member>
        <member name="P:Miyagi.UI.Cursor.Visible">
            <summary>
            Gets or sets a value indicating whether the cursor is visible.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Miyagi.UI.Cursor.Texture">
            <summary>
            Gets or sets the texture.
            </summary>
            <value>The texture.</value>
        </member>
        <member name="T:Miyagi.UI.DragDropEffect">
            <summary>
            Represents the effect of a drag-and-drop operation.
            </summary>
        </member>
        <member name="P:Miyagi.UI.DragDropEffect.Cursor">
            <summary>
            Gets or sets the cursor mode.
            </summary>
            <value>The cursor.</value>
        </member>
        <member name="T:Miyagi.UI.DragEventArgs">
            <summary>
            EventArgs for drag-and-drop operations.
            </summary>
        </member>
        <member name="M:Miyagi.UI.DragEventArgs.#ctor(System.Object,Miyagi.UI.DragDropEffect,Miyagi.UI.Controls.Control)">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.UI.DragEventArgs"/> class.
            </summary>
            <param name="data">The data.</param>
            <param name="effect">The effect.</param>
            <param name="dragSource">The drag source.</param>
        </member>
        <member name="P:Miyagi.UI.DragEventArgs.Data">
            <summary>
            Gets the data.
            </summary>
        </member>
        <member name="P:Miyagi.UI.DragEventArgs.DragSource">
            <summary>
            Gets the drag source.
            </summary>
        </member>
        <member name="P:Miyagi.UI.DragEventArgs.Effect">
            <summary>
            Gets the effect.
            </summary>
        </member>
        <member name="T:Miyagi.UI.AnchorStyles">
            <summary>
            Specifies the AnchorStyle.
            </summary>
        </member>
        <member name="F:Miyagi.UI.AnchorStyles.None">
            <summary>
            The object is not anchored.
            </summary>
        </member>
        <member name="F:Miyagi.UI.AnchorStyles.Left">
            <summary>
            Left anchor.
            </summary>
        </member>
        <member name="F:Miyagi.UI.AnchorStyles.Top">
            <summary>
            Top anchor.
            </summary>
        </member>
        <member name="F:Miyagi.UI.AnchorStyles.Right">
            <summary>
            Right anchor.
            </summary>
        </member>
        <member name="F:Miyagi.UI.AnchorStyles.Bottom">
            <summary>
            Bottom anchor.
            </summary>
        </member>
        <member name="F:Miyagi.UI.AnchorStyles.Vertical">
            <summary>
            Top and Bottom alignment.
            </summary>
        </member>
        <member name="F:Miyagi.UI.AnchorStyles.Horizontal">
            <summary>
            Left and Right alignment.
            </summary>
        </member>
        <member name="F:Miyagi.UI.AnchorStyles.All">
            <summary>
            Vertical and Horizontal alignment.
            </summary>
        </member>
        <member name="F:Miyagi.UI.AnchorStyles.HorizontalCenter">
            <summary>
            Horizontally centered alignment.
            </summary>
        </member>
        <member name="F:Miyagi.UI.AnchorStyles.VerticalCenter">
            <summary>
            Vertically centered alignment.
            </summary>
        </member>
        <member name="F:Miyagi.UI.AnchorStyles.Center">
            <summary>
            Center alignment.
            </summary>
        </member>
        <member name="T:Miyagi.UI.AutoSizeMode">
            <summary>
            Specifies how a control will behave when its AutoSize property is enabled.
            </summary>
        </member>
        <member name="F:Miyagi.UI.AutoSizeMode.GrowAndShrink">
            <summary>
            The control grows or shrinks to fit its contents. The control cannot be resized manually.
            </summary>
        </member>
        <member name="F:Miyagi.UI.AutoSizeMode.GrowOnly">
            <summary>
            The control grows as much as necessary to fit its contents but does not shrink smaller than the value of its Size property. The form can be resized, but cannot be made so small that any of its contained controls are hidden.
            </summary>
        </member>
        <member name="T:Miyagi.UI.BoundsSpecified">
            <summary>
            Specifies the bounds of the control to use when defining a control's size and position.
            </summary>
        </member>
        <member name="F:Miyagi.UI.BoundsSpecified.None">
            <summary>
            No bounds are specified.
            </summary>
        </member>
        <member name="F:Miyagi.UI.BoundsSpecified.X">
            <summary>
            The left edge of the control is defined.
            </summary>
        </member>
        <member name="F:Miyagi.UI.BoundsSpecified.Y">
            <summary>
            The top edge of the control is defined.
            </summary>
        </member>
        <member name="F:Miyagi.UI.BoundsSpecified.Location">
            <summary>
            Both X and Y coordinates of the control are defined.
            </summary>
        </member>
        <member name="F:Miyagi.UI.BoundsSpecified.Width">
            <summary>
            The width of the control is defined.
            </summary>
        </member>
        <member name="F:Miyagi.UI.BoundsSpecified.Height">
            <summary>
            The height of the control is defined.
            </summary>
        </member>
        <member name="F:Miyagi.UI.BoundsSpecified.Size">
            <summary>
            Both Width and Height property values of the control are defined.
            </summary>
        </member>
        <member name="F:Miyagi.UI.BoundsSpecified.All">
            <summary>
            Both Point and Size property values are defined.
            </summary>
        </member>
        <member name="T:Miyagi.UI.CheckState">
            <summary>
            Specifies the state of a CheckBox.
            </summary>
        </member>
        <member name="F:Miyagi.UI.CheckState.Unchecked">
            <summary>
            The CheckBox is unchecked.
            </summary>
        </member>
        <member name="F:Miyagi.UI.CheckState.Checked">
            <summary>
            The CheckBox is checked.
            </summary>
        </member>
        <member name="F:Miyagi.UI.CheckState.Indeterminate">
            <summary>
            The CheckBox is in an indeterminate state.
            </summary>
        </member>
        <member name="T:Miyagi.UI.CursorMode">
            <summary>
            Specifies the mode of the cursor.
            </summary>
        </member>
        <member name="F:Miyagi.UI.CursorMode.BlockDrop">
            <summary>
            The name of the BlockDrop cursor.
            </summary>
        </member>
        <member name="F:Miyagi.UI.CursorMode.Main">
            <summary>
            The name of the main cursor.
            </summary>
        </member>
        <member name="F:Miyagi.UI.CursorMode.ResizeBottom">
            <summary>
            The name of the ResizeBottom cursor.
            </summary>
        </member>
        <member name="F:Miyagi.UI.CursorMode.ResizeBottomLeft">
            <summary>
            The name of the ResizeBottomLeft cursor.
            </summary>
        </member>
        <member name="F:Miyagi.UI.CursorMode.ResizeBottomRight">
            <summary>
            The name of the ResizeBottomRight cursor.
            </summary>
        </member>
        <member name="F:Miyagi.UI.CursorMode.ResizeLeft">
            <summary>
            The name of the ResizeLeft cursor.
            </summary>
        </member>
        <member name="F:Miyagi.UI.CursorMode.ResizeRight">
            <summary>
            The name of the ResizeRight cursor.
            </summary>
        </member>
        <member name="F:Miyagi.UI.CursorMode.ResizeTop">
            <summary>
            The name of the ResizeTop cursor.
            </summary>
        </member>
        <member name="F:Miyagi.UI.CursorMode.ResizeTopLeft">
            <summary>
            The name of the ResizeTopLeft cursor.
            </summary>
        </member>
        <member name="F:Miyagi.UI.CursorMode.ResizeTopRight">
            <summary>
            The name of the ResizeTopRight cursor.
            </summary>
        </member>
        <member name="F:Miyagi.UI.CursorMode.TextInput">
            <summary>
            The name of the TextInput cursor.
            </summary>
        </member>
        <member name="T:Miyagi.UI.DialogBoxButtons">
            <summary>
            Specifies the which buttons a dialog box uses.
            </summary>
        </member>
        <member name="F:Miyagi.UI.DialogBoxButtons.None">
            <summary>
            No Buttons.
            </summary>
        </member>
        <member name="F:Miyagi.UI.DialogBoxButtons.Ok">
            <summary>
            The Ok Button.
            </summary>
        </member>
        <member name="F:Miyagi.UI.DialogBoxButtons.Cancel">
            <summary>
            The Cancel Button.
            </summary>
        </member>
        <member name="F:Miyagi.UI.DialogBoxButtons.OkCancel">
            <summary>
            Ok and Cancel Buttons.
            </summary>
        </member>
        <member name="F:Miyagi.UI.DialogBoxButtons.Yes">
            <summary>
            The Yes Button.
            </summary>
        </member>
        <member name="F:Miyagi.UI.DialogBoxButtons.No">
            <summary>
            The No Button.
            </summary>
        </member>
        <member name="F:Miyagi.UI.DialogBoxButtons.YesNo">
            <summary>
            Yes and No Buttons.
            </summary>
        </member>
        <member name="F:Miyagi.UI.DialogBoxButtons.YesNoCancel">
            <summary>
            Yes, No and Cancel Buttons.
            </summary>
        </member>
        <member name="T:Miyagi.UI.DialogResult">
            <summary>
            Specifies the result of a modal dialog.
            </summary>
        </member>
        <member name="F:Miyagi.UI.DialogResult.None">
            <summary>
            No result.
            </summary>
        </member>
        <member name="F:Miyagi.UI.DialogResult.Ok">
            <summary>
            The result is Okay.
            </summary>
        </member>
        <member name="F:Miyagi.UI.DialogResult.Cancel">
            <summary>
            The result is Cancel.
            </summary>
        </member>
        <member name="F:Miyagi.UI.DialogResult.Yes">
            <summary>
            The result is Yes.
            </summary>
        </member>
        <member name="F:Miyagi.UI.DialogResult.No">
            <summary>
            The result is No.
            </summary>
        </member>
        <member name="T:Miyagi.UI.DockStyle">
            <summary>
            Specifies the position and manner in which a control is docked.
            </summary>
        </member>
        <member name="F:Miyagi.UI.DockStyle.None">
            <summary>
            The control is not docked.
            </summary>
        </member>
        <member name="F:Miyagi.UI.DockStyle.Top">
            <summary>
            The control's top edge is docked to the top of its containing control.
            </summary>
        </member>
        <member name="F:Miyagi.UI.DockStyle.Bottom">
            <summary>
            The control's bottom edge is docked to the bottom of its containing control.
            </summary>
        </member>
        <member name="F:Miyagi.UI.DockStyle.Left">
            <summary>
            The control's left edge is docked to the left edge of its containing control.
            </summary>
        </member>
        <member name="F:Miyagi.UI.DockStyle.Right">
            <summary>
            The control's right edge is docked to the right edge of its containing control.
            </summary>
        </member>
        <member name="F:Miyagi.UI.DockStyle.Fill">
            <summary>
            All the control's edges are docked to the all edges of its containing control and sized appropriately.
            </summary>
        </member>
        <member name="T:Miyagi.UI.FlowDirection">
            <summary>
            Defines constants that specify the direction in which consecutive user interface (UI) elements are placed in a linear layout container.
            </summary>
        </member>
        <member name="F:Miyagi.UI.FlowDirection.LeftToRight">
            <summary>
            Elements flow from the left edge of the design surface to the right.
            </summary>
        </member>
        <member name="F:Miyagi.UI.FlowDirection.TopDown">
            <summary>
            Elements flow from the top of the design surface to the bottom.
            </summary>
        </member>
        <member name="F:Miyagi.UI.FlowDirection.RightToLeft">
            <summary>
            Elements flow from the right edge of the design surface to the left.
            </summary>
        </member>
        <member name="F:Miyagi.UI.FlowDirection.BottomUp">
            <summary>
            Elements flow from the bottom of the design surface to the top.
            </summary>
        </member>
        <member name="T:Miyagi.UI.LayoutType">
            <summary>
            Types of layouts for a control.
            </summary>
        </member>
        <member name="F:Miyagi.UI.LayoutType.Anchor">
            <summary>
            Preserves the distance between the edge of a control and the adjacent edge of a control's container.
            </summary>
        </member>
        <member name="F:Miyagi.UI.LayoutType.Dock">
            <summary>
             Allows a control to stick itself to an edge of a control's container, or to grow using free space.
            </summary>
        </member>
        <member name="T:Miyagi.UI.ProgressBarMode">
            <summary>
            Specifies the mode of a ProgressBarElement.
            </summary>
        </member>
        <member name="F:Miyagi.UI.ProgressBarMode.Blocks">
            <summary>
            Indicates progress through blocks.
            </summary>
        </member>
        <member name="F:Miyagi.UI.ProgressBarMode.Continuous">
            <summary>
            Indicates progress through a continuous bar.
            </summary>
        </member>
        <member name="F:Miyagi.UI.ProgressBarMode.Marquee">
            <summary>
            Indicates progress through continuously scrolling.
            </summary>
        </member>
        <member name="T:Miyagi.UI.ResizeModes">
            <summary>
            Specifies the orientation of a control.
            </summary>
        </member>
        <member name="F:Miyagi.UI.ResizeModes.None">
            <summary>
            Not resizable.
            </summary>
        </member>
        <member name="F:Miyagi.UI.ResizeModes.Horizontal">
            <summary>
            Horizontally resizable.
            </summary>
        </member>
        <member name="F:Miyagi.UI.ResizeModes.Vertical">
            <summary>
            Vertically resizable.
            </summary>
        </member>
        <member name="F:Miyagi.UI.ResizeModes.Diagonal">
            <summary>
            Diagonally resizable.
            </summary>
        </member>
        <member name="F:Miyagi.UI.ResizeModes.All">
            <summary>
            Fully resizable.
            </summary>
        </member>
        <member name="T:Miyagi.UI.SizeType">
            <summary>
            Specifies how rows or columns of user interface elements should be sized relative to their container.
            </summary>
        </member>
        <member name="F:Miyagi.UI.SizeType.Absolute">
            <summary>
            The row or column should be sized to an exact number of pixels.
            </summary>
        </member>
        <member name="F:Miyagi.UI.SizeType.AutoSize">
            <summary>
            The row or column should be automatically sized to share space with its peers.
            </summary>
        </member>
        <member name="F:Miyagi.UI.SizeType.Percent">
            <summary>
            The row or column should be sized as a percentage of the parent container.
            </summary>
        </member>
        <member name="T:Miyagi.UI.TabMode">
            <summary>
            Specifies how a TabBar draws the tabs.
            </summary>
        </member>
        <member name="F:Miyagi.UI.TabMode.Fill">
            <summary>
            The tabs are spread equally along the TabBar.
            </summary>
        </member>
        <member name="F:Miyagi.UI.TabMode.AutoSize">
            <summary>
            The tabs are resized to fit their contents.
            </summary>
        </member>
        <member name="F:Miyagi.UI.TabMode.FixedSize">
            <summary>
            The value specified in <see cref="P:Miyagi.UI.Controls.Styles.TabStyle.FixedSize"/> is used.
            </summary>
        </member>
        <member name="T:Miyagi.UI.UpdateTypes">
            <summary>
            Specifies which updates have to be done.
            </summary>
        </member>
        <member name="F:Miyagi.UI.UpdateTypes.None">
            <summary>
            No update is required.
            </summary>
        </member>
        <member name="F:Miyagi.UI.UpdateTypes.Colour">
            <summary>
            The Colour requires an update.
            </summary>
        </member>
        <member name="F:Miyagi.UI.UpdateTypes.Opacity">
            <summary>
            The Opacity requires an update.
            </summary>
        </member>
        <member name="F:Miyagi.UI.UpdateTypes.SpriteCrop">
            <summary>
            Sprite crop has to be updated.
            </summary>
        </member>
        <member name="F:Miyagi.UI.UpdateTypes.Location">
            <summary>
            The Location requires an update.
            </summary>
        </member>
        <member name="F:Miyagi.UI.UpdateTypes.SelectedText">
            <summary>
            The SelectedText requires an update.
            </summary>
        </member>
        <member name="F:Miyagi.UI.UpdateTypes.Size">
            <summary>
            The Size requires an update.
            </summary>
        </member>
        <member name="F:Miyagi.UI.UpdateTypes.Text">
            <summary>
            Text has to be recreated.
            </summary>
        </member>
        <member name="F:Miyagi.UI.UpdateTypes.Texture">
            <summary>
            The Texture requires an update.
            </summary>
        </member>
        <member name="F:Miyagi.UI.UpdateTypes.TextureFiltering">
            <summary>
            The TextureFiltering requires an update.
            </summary>
        </member>
        <member name="F:Miyagi.UI.UpdateTypes.Visibility">
            <summary>
            Visibility requires an update.
            </summary>
        </member>
        <member name="F:Miyagi.UI.UpdateTypes.ZOrder">
            <summary>
            The ZOrder requires an update.
            </summary>
        </member>
        <member name="F:Miyagi.UI.UpdateTypes.OwnerSize">
            <summary>
            The OwnerSize requires an update.
            </summary>
        </member>
        <member name="F:Miyagi.UI.UpdateTypes.OwnerLocation">
            <summary>
            The OwnerLocation requires an update.
            </summary>
        </member>
        <member name="T:Miyagi.UI.GUI3D">
            <summary>
            A GUI represents a composite group of controls.
            </summary>
        </member>
        <member name="M:Miyagi.UI.GUI3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.UI.GUI3D"/> class.
            </summary>
        </member>
        <member name="M:Miyagi.UI.GUI3D.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Miyagi.UI.GUI3D"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Miyagi.UI.GUI3D.GetTopControlAt(Miyagi.Common.Data.Point)">
            <summary>
            Returns the topmost control at the specified position.
            </summary>
            <param name="p">The coordinate of the position where you want to look for a control.</param>
            <returns>
            If there is a control at the position the topmost, otherwise null.
            </returns>
        </member>
        <member name="M:Miyagi.UI.GUI3D.CreateSpriteRenderer(Miyagi.Common.MiyagiSystem)">
            <summary>
            Creates the sprite renderer.
            </summary>
            <param name="system">The system.</param>
        </member>
        <member name="P:Miyagi.UI.GUI3D.Offset">
            <summary>
            Gets or sets the offset.
            </summary>
        </member>
        <member name="P:Miyagi.UI.GUI3D.Orientation">
            <summary>
            Gets or sets the orientation.
            </summary>
        </member>
        <member name="T:Miyagi.UI.GUIManager">
            <summary>
            Manages the GUIs.
            </summary>
        </member>
        <member name="M:Miyagi.UI.GUIManager.#ctor(Miyagi.Common.MiyagiSystem)">
            <summary>
            Initializes a new instance of the GUIManager class.
            </summary>
            <param name="system">The MiyagiSystem.</param>
        </member>
        <member name="M:Miyagi.UI.GUIManager.Dispose">
            <summary>
            Disposes the GUIManager.
            </summary>
        </member>
        <member name="M:Miyagi.UI.GUIManager.DisposeAllGUIs">
            <summary>
            Disposes all GUIs.
            </summary>
        </member>
        <member name="M:Miyagi.UI.GUIManager.ForceRedraw">
            <summary>
            Force the redraw of the cursor and all GUIs.
            </summary>
        </member>
        <member name="M:Miyagi.UI.GUIManager.GetControl``1(System.String)">
            <summary>
            Gets a control of the specified type by name.
            </summary>
            <param name="name">The name of the control.</param>
            <returns>The first control of that name if it exists; otherwise, null.</returns>
            <typeparam name="T">The type of the control.</typeparam>
        </member>
        <member name="M:Miyagi.UI.GUIManager.GetControl(System.String)">
            <summary>
            Gets a control by name.
            </summary>
            <param name="name">The name of the control.</param>
            <returns>The first control of that name if it exists; otherwise, null.</returns>
        </member>
        <member name="M:Miyagi.UI.GUIManager.GetControlByPath(System.String[])">
            <summary>
            Gets a control by path.
            </summary>
            <param name="path">The path of the control.</param>
            <returns>The first control with the specified path if it exists; otherwise, null.</returns>
            <exception cref="T:System.ArgumentException">Insufficent amount of parameters. Expected at least 2.</exception>
        </member>
        <member name="M:Miyagi.UI.GUIManager.GetGUI(System.String)">
            <summary>
            Gets a GUI by name.
            </summary>
            <param name="name">The name of the GUI.</param>
            <returns>The first GUI of that name if it exists; otherwise, null.</returns>
        </member>
        <member name="M:Miyagi.UI.GUIManager.GetTopControl">
            <summary>
            Returns the topmost control under the mouse cursor.
            </summary>
            <returns>If there is a control under the cursor the topmost; otherwise, null.</returns>
        </member>
        <member name="M:Miyagi.UI.GUIManager.GetTopControlAt(Miyagi.Common.Data.Point)">
            <summary>
            Returns the topmost control at the specified position.
            </summary>
            <param name="pos">The position where you want to look for a control.</param>
            <returns>If there is a control at the position the topmost; otherwise, null.</returns>
        </member>
        <member name="M:Miyagi.UI.GUIManager.GetTopControlAt(System.Int32,System.Int32)">
            <summary>
            Returns the topmost control at the specified position.
            </summary>
            <param name="x">The x-coordinate of the position where you want to look for a control.</param>
            <param name="y">The y-coordinate of the position where you want to look for a control.</param>
            <returns>If there is a control at the position the topmost; otherwise, null.</returns>
        </member>
        <member name="M:Miyagi.UI.GUIManager.GetTopGUI">
            <summary>
            Returns the topmost GUI under the mouse cursor.
            </summary>
            <returns>If there is a GUI under the cursor the topmost; otherwise, null.</returns>
        </member>
        <member name="M:Miyagi.UI.GUIManager.GetTopGUIAt(Miyagi.Common.Data.Point)">
            <summary>
            Returns the topmost GUI at the specified position.
            </summary>
            <param name="pos">The position where you want to look for a control.</param>
            <returns>If there is a GUI at the position the topmost; otherwise, null.</returns>
        </member>
        <member name="M:Miyagi.UI.GUIManager.GetTopGUIAt(System.Int32,System.Int32)">
            <summary>
            Returns the topmost GUI at the specified position.
            </summary>
            <param name="x">The x-coordinate of the position where you want to look for a GUI.</param>
            <param name="y">The y-coordinate of the position where you want to look for a GUI.</param>
            <returns>If there is a GUI at the position the topmost; otherwise, null.</returns>
        </member>
        <member name="M:Miyagi.UI.GUIManager.HideCursor">
            <summary>
            Hides the mouse cursor.
            </summary>
        </member>
        <member name="M:Miyagi.UI.GUIManager.Initialize">
            <summary>
            Initializes the manager.
            </summary>
        </member>
        <member name="M:Miyagi.UI.GUIManager.Resize(System.Double,System.Double)">
            <summary>
            Resizes the cursor and all GUIs.
            </summary>
            <param name="widthFactor">The relative growth of the width.</param>
            <param name="heightFactor">The relative growth of the height.</param>
        </member>
        <member name="M:Miyagi.UI.GUIManager.ShowCursor">
            <summary>
            Shows the mouse cursor.
            </summary>
        </member>
        <member name="M:Miyagi.UI.GUIManager.Update">
            <summary>
            Updates all GUIs.
            </summary>
        </member>
        <member name="M:Miyagi.UI.GUIManager.GetTopGUIAt(System.Int32,System.Int32,Miyagi.UI.Controls.Control@)">
            <summary>
            Returns the topmost GUI at the specified position.
            </summary>
            <param name="x">The x-coordinate of the position where you want to look for a GUI.</param>
            <param name="y">The y-coordinate of the position where you want to look for a GUI.</param>
            <param name="topControl">The topmost control.</param>
            <returns>If there is a GUI at the position the topmost; otherwise, null.</returns>
        </member>
        <member name="M:Miyagi.UI.GUIManager.Dispose(System.Boolean)">
            <summary>
            Disposes the GUIManager.
            </summary>
            <param name="disposing">Whether Dispose has been called.</param>
        </member>
        <member name="M:Miyagi.UI.GUIManager.LocalizeControls(System.Collections.Generic.IEnumerable{Miyagi.UI.Controls.Control})">
            <summary>
            Localizes all controls.
            </summary>
            <param name="controls">The controls.</param>
        </member>
        <member name="E:Miyagi.UI.GUIManager.Disposing">
            <summary>
            Occurs when the manager is disposing.
            </summary>
        </member>
        <member name="E:Miyagi.UI.GUIManager.Updated">
            <summary>
            Occurs after the GUIManager has been updated.
            </summary>
        </member>
        <member name="E:Miyagi.UI.GUIManager.Updating">
            <summary>
            Occues before the GUIManager has been updated.
            </summary>
        </member>
        <member name="P:Miyagi.UI.GUIManager.AllControls">
            <summary>
            Gets an enumerator for a simple iteration over all GUI controls.
            </summary>
            <value>An enumerator for all gui controls.</value>
        </member>
        <member name="P:Miyagi.UI.GUIManager.CheckCursorVisibility">
            <summary>
            Gets or sets a value indicating whether the cursor visibility should be checked before processing mouse events.
            </summary>
        </member>
        <member name="P:Miyagi.UI.GUIManager.Cursor">
            <summary>
            Gets or sets the cursor.
            </summary>
        </member>
        <member name="P:Miyagi.UI.GUIManager.FocusedControl">
            <summary>
            Gets or sets the focused control.
            </summary>
            <remarks>Focused controls have to have their <see cref="P:Miyagi.UI.Controls.Control.Enabled"/> property set to true.</remarks>
        </member>
        <member name="P:Miyagi.UI.GUIManager.GrabbedControl">
            <summary>
            Gets or sets the control which is currently grabbed by the mouse.
            </summary>
        </member>
        <member name="P:Miyagi.UI.GUIManager.GUIs">
            <summary>
            Gets the collection of GUIs.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Miyagi.UI.GUIManager.IsDisposed">
            <summary>
            Gets a value indicating whether the manager has been disposed.
            </summary>
        </member>
        <member name="P:Miyagi.UI.GUIManager.IsDragActive">
            <summary>
            Gets a value indicating whether a drag operation is currently active.
            </summary>
            <value>
            <c>true</c> if a drag operation is currently active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Miyagi.UI.GUIManager.MiyagiSystem">
            <summary>
            Gets the MiyagiSystem.
            </summary>
        </member>
        <member name="P:Miyagi.UI.GUIManager.PixelPerfectHitDetection">
            <summary>
            Gets or sets a value indicating whether hit detection should be pixel-perfect.
            </summary>
        </member>
        <member name="P:Miyagi.UI.GUIManager.Type">
            <summary>
            Gets the type of the manager.
            </summary>
        </member>
        <member name="P:Miyagi.UI.GUIManager.InputManager">
            <summary>
            Gets the input manager.
            </summary>
        </member>
        <member name="P:Miyagi.UI.GUIManager.LocaleManager">
            <summary>
            Gets the locale manager.
            </summary>
        </member>
        <member name="T:Miyagi.UI.PopupGUI">
            <summary>
            A GUI that popups when the mouse cursor is between certain coordinates.
            </summary>
        </member>
        <member name="M:Miyagi.UI.PopupGUI.#ctor">
            <summary>
            Initializes a new instance of the PopupGUI class.
            </summary>
        </member>
        <member name="M:Miyagi.UI.PopupGUI.#ctor(System.String)">
            <summary>
            Initializes a new instance of the PopupGUI class.
            </summary>
            <param name="name">The name of the PopupGUI.</param>
        </member>
        <member name="M:Miyagi.UI.PopupGUI.DoResize(System.Double,System.Double)">
            <summary>
            Resizes the GUI.
            </summary>
            <param name="widthFactor">The relative growth of the width.</param>
            <param name="heightFactor">The relative growth of the height.</param>
        </member>
        <member name="M:Miyagi.UI.PopupGUI.OnPopupClosed">
            <summary>
            Handles mouse cursor outside the popup range.
            </summary>
        </member>
        <member name="M:Miyagi.UI.PopupGUI.OnPopupOpened">
            <summary>
            Handles mouse cursor inside the popup range.
            </summary>
        </member>
        <member name="M:Miyagi.UI.PopupGUI.UpdateCore">
            <summary>
            Updates the GUI.
            </summary>
        </member>
        <member name="P:Miyagi.UI.PopupGUI.PopupOrientation">
            <summary>
            Gets or sets the popup orientation.
            </summary>
            <remarks>If the orientation is horizontal</remarks>
        </member>
        <member name="P:Miyagi.UI.PopupGUI.PopupRange">
            <summary>
            Gets or sets the range when the GUI should pop up.
            </summary>
        </member>
        <member name="P:Miyagi.UI.PopupGUI.IsPopuped">
            <summary>
            Gets a value indicating whether this instance is popuped.
            </summary>
            <value>
            <c>true</c> if this instance is popuped; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Miyagi.UI.UISprite">
            <summary>
            A representation of a Sprite for UI elements.
            </summary>
        </member>
        <member name="M:Miyagi.UI.UISprite.#ctor(Miyagi.UI.Controls.Elements.IElement,Miyagi.Common.Rendering.Primitive[])">
            <summary>
            Initializes a new instance of the UISprite class.
            </summary>
            <param name="owner">The owner of the UISprite.</param>
            <param name="primitives">The primitives.</param>
        </member>
        <member name="M:Miyagi.UI.UISprite.GetQuad(System.Int32)">
            <summary>
            Gets the quad.
            </summary>
            <param name="index">The index.</param>
            <returns>The quad.</returns>
        </member>
        <member name="M:Miyagi.UI.UISprite.HitTest(Miyagi.Common.Data.Point,System.Boolean)">
            <summary>
            Performs a hit test.
            </summary>
            <param name="p">The coordinate.</param>
            <param name="pixelPerfect">if set to <c>true</c> performs a pixel-perfect hit test.</param>
            <returns>
            <c>true</c> if the primitive is hit; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Miyagi.UI.UISprite.RemoveCrop">
            <summary>
            Removes the crop.
            </summary>
        </member>
        <member name="M:Miyagi.UI.UISprite.SetQuadBounds(System.Int32,Miyagi.Common.Data.Rectangle)">
            <summary>
            Sets the quad bounds.
            </summary>
            <param name="quadIndex">Index of the quad.</param>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="M:Miyagi.UI.UISprite.SetUV(Miyagi.Common.Data.RectangleF)">
            <summary>
            Sets the uv coordinates of a sprite.
            </summary>
            <param name="uvRect">A RectangleF representing the uv coordinates.</param>
        </member>
        <member name="M:Miyagi.UI.UISprite.SetUV(System.Int32,Miyagi.Common.Data.RectangleF)">
            <summary>
            Sets the uv coordinates of a sprite.
            </summary>
            <param name="quadIndex">Index of the quad.</param>
            <param name="uvRect">A RectangleF representing the uv coordinates.</param>
        </member>
        <member name="M:Miyagi.UI.UISprite.UpdateCrop">
            <summary>
            Updates the sprite crop.
            </summary>
        </member>
        <member name="T:Miyagi.UI.UISprite.BorderQuad">
            <summary>
            Specifies the border quad.
            </summary>
        </member>
        <member name="F:Miyagi.UI.UISprite.BorderQuad.Bottom">
            <summary>
            The buttom border quad.
            </summary>
        </member>
        <member name="F:Miyagi.UI.UISprite.BorderQuad.BottomLeft">
            <summary>
            The buttom left border quad.
            </summary>
        </member>
        <member name="F:Miyagi.UI.UISprite.BorderQuad.BottomRight">
            <summary>
            The buttom right border quad.
            </summary>
        </member>
        <member name="F:Miyagi.UI.UISprite.BorderQuad.Left">
            <summary>
            The left border quad.
            </summary>
        </member>
        <member name="F:Miyagi.UI.UISprite.BorderQuad.Right">
            <summary>
            The right border quad.
            </summary>
        </member>
        <member name="F:Miyagi.UI.UISprite.BorderQuad.Top">
            <summary>
            The top border quad.
            </summary>
        </member>
        <member name="F:Miyagi.UI.UISprite.BorderQuad.TopLeft">
            <summary>
            The top left border quad.
            </summary>
        </member>
        <member name="F:Miyagi.UI.UISprite.BorderQuad.TopRight">
            <summary>
            The top right border quad.
            </summary>
        </member>
    </members>
</doc>
