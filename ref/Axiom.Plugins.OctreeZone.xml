<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Axiom.Plugins.OctreeZone</name>
    </assembly>
    <members>
        <member name="T:Octree">
            <summary>
            Summary description for Octree.
            </summary>
        </member>
        <member name="F:Octree._box">
            The bounding box of the octree
            	@remarks
            	This is used for octant index determination and rendering, but not culling
        </member>
        <member name="M:Octree.#ctor(Axiom.SceneManagers.PortalConnected.PCZone,Octree)">
            <summary>
            Constructor Octree 
            </summary>
            <param name="zone"></param>
            <param name="parent"></param>
        </member>
        <member name="M:Octree.AddNode(Axiom.SceneManagers.PortalConnected.PCZSceneNode)">
            <summary>
            AddNode
            </summary>
            <param name="node">PCZSceneNode</param>
        </member>
        <member name="M:Octree.RemoveNode(Axiom.SceneManagers.PortalConnected.PCZSceneNode)">
            <summary>
            RemoveNode
            </summary>
            <param name="node">PCZSceneNode</param>
        </member>
        <member name="M:Octree.IsTwiceSize(Axiom.Math.AxisAlignedBox)">
            <summary>
            Determines if this octree is twice as big as the given box.
            This method is used by the OctreeSceneManager to determine if the given
            box will fit into a child of this octree.
            </summary>
        </member>
        <member name="M:Octree.GetChildIndexes(Axiom.Math.AxisAlignedBox,System.Int32@,System.Int32@,System.Int32@)">
             <summary>
             Returns the appropriate indexes for the child of this octree into which the box will fit.
            @remarks
            	This is used by the OCtreeSceneManager to determine which child to traverse next when
            finding the appropriate octree to insert the box.  Since it is a loose octree, only the
            center of the box is checked to determine the octant.
             </summary>
        </member>
        <member name="M:Octree.Intersect(Axiom.Math.PlaneBoundedVolume,Axiom.Math.AxisAlignedBox)">
            Checks how the axis aligned box intersects with the plane bounded volume
        </member>
        <member name="M:Octree.Intersect(Axiom.Math.AxisAlignedBox,Axiom.Math.AxisAlignedBox)">
            Checks how the second box intersects with the first.
        </member>
        <member name="M:Octree.Intersect(Axiom.Math.Sphere,Axiom.Math.AxisAlignedBox)">
            Checks how the box intersects with the sphere.
        </member>
        <member name="M:Octree._GetChildIndexes(Axiom.Math.AxisAlignedBox,System.Int32@,System.Int32@,System.Int32@)">
            It's assumed the the given box has already been proven to fit into
            a child.  Since it's a loose octree, only the centers need to be
            compared to find the appropriate node.
        </member>
        <member name="P:Octree.NuNodeList">
            <summary>
            Returns the number of scene nodes attached to this octree
            </summary>
        </member>
        <member name="P:Octree.NodeList">
            <summary>
            Public list of SceneNodes attached to this particular octree
            </summary>
        </member>
        <member name="P:Octree.WireBoundingBox">
            <summary>
            Creates the wire frame bounding box for this octant
            </summary>
        </member>
        <member name="P:Octree.HalfSize">
            <summary>
            Vector containing the dimensions of this octree / 2
            </summary>
        </member>
        <member name="P:Octree.Children">
            <summary>
                3D array of children of this octree.
            </summary>
            <remarks>
            Children are dynamically created as needed when nodes are inserted in the Octree.
            If, later, the all the nodes are removed from the child, it is still kept around.
            </remarks>
        </member>
        <member name="P:Octree.Parent">
            <summary>
            Parent of this tree
            </summary>
        </member>
        <member name="P:Octree.Zone">
            <summary>
            Zone
            </summary>
        </member>
        <member name="P:Octree.BoundingBox">
            <summary>
            BoundingBox
            </summary>
        </member>
        <member name="P:Octree.CullBounds">
            <summary>
             Creates the AxisAlignedBox used for culling this octree.
            </summary>
            <remarks>
                Since it's a loose octree, the culling bounds can be different than the actual bounds of the octree.
            </remarks>
        </member>
        <member name="F:OctreeZoneData.mOctant">
            Octree this node is attached to.
        </member>
        <member name="M:OctreeZoneData._isIn(Axiom.Math.AxisAlignedBox)">
            Since we are loose, only check the center.
        </member>
        <member name="T:TerrainZoneOptions">
            <summary>
            Terrain Zone Options
            </summary>
        </member>
        <member name="P:TerrainZoneOptions.PageSize">
            <summary>
            The size of one edge of a terrain page, in vertices
            </summary>
        </member>
        <member name="P:TerrainZoneOptions.TileSize">
            <summary>
            The size of one edge of a terrain tile, in vertices
            </summary>
        </member>
        <member name="P:TerrainZoneOptions.TilesPerPage">
            <summary>
            Precalculated number of tiles per page
            </summary>
        </member>
        <member name="P:TerrainZoneOptions.PrimaryCamera">
            <summary>
            The primary camera, used for error metric calculation and page choice
            </summary> 
        </member>
        <member name="P:TerrainZoneOptions.MaxGeoMipMapLevel">
            <summary>
            The maximum terrain geo-mipmap level
            </summary>
        </member>
        <member name="P:TerrainZoneOptions.Scale">
            <summary>
            The scale factor to apply to the terrain (each vertex is 1 unscaled unit
            away from the next, and height is from 0 to 1)
            </summary>
        </member>
        <member name="P:TerrainZoneOptions.MaxPixelError">
            <summary>
            The maximum pixel error allowed
            </summary>
        </member>
        <member name="P:TerrainZoneOptions.UseTriStrips">
            <summary>
            Whether we should use triangle strips
            </summary>
        </member>
        <member name="P:TerrainZoneOptions.DetailTile">
            <summary>
            The number of times to repeat a detail texture over a tile
            </summary>
        </member>
        <member name="P:TerrainZoneOptions.LodMorph">
            <summary>
            Whether LOD morphing is enabled
            </summary>
        </member>
        <member name="P:TerrainZoneOptions.LodMorphStart">
            <summary>
            At what point (parametric) should LOD morphing start
            </summary>
        </member>
        <member name="P:TerrainZoneOptions.UseDynamicLighting">
            <summary>
            Whether dynamic lighting is enabled
            </summary>
        </member>
        <member name="P:TerrainZoneOptions.Coloured">
            <summary>
            Whether vertex colors are enabled
            </summary>
        </member>
        <member name="P:TerrainZoneOptions.terrainMaterial">
            <summary>
            Pointer to the material to use to render the terrain
            </summary>
        </member>
        <member name="T:HeightmapTerrainZonePageSource">
            <summary>
            Height map Terrain Zone Page Source
            </summary>
        </member>
        <member name="T:TerrainZonePageSource">
            <summary>
            TerrainZonePageSource
            </summary>
        </member>
        <member name="M:TerrainZonePageSource.Initialize(TerrainZone,System.Int32,System.Int32,System.Boolean,TerrainZonePageSourceOptionList)">
            <summary>
            Initialize
            </summary>
            <param name="tz">TerrainZone</param>
            <param name="tileSize">int</param>
            <param name="pageSize">int</param>
            <param name="asyncLoading">bool</param>
            <param name="optionList">TerrainZonePageSourceOptionList</param>
        </member>
        <member name="M:TerrainZonePageSource.BuildPage(Axiom.Math.Real[],Axiom.Graphics.Material)">
            <summary>
            BuildPage
            </summary>
            <param name="heightData">Real[]</param>
            <param name="material">Material</param>
            <returns>TerrainZonePage</returns>
        </member>
        <member name="E:TerrainZonePageSource.PageConstructed">
            <summary>
            TerrainZonePageConstructedEventHandler (PageConstructed)
            </summary>
        </member>
        <member name="P:TerrainZonePageSource.TerrainZone">
            <summary>
            Link back to parent manager
            </summary>
        </member>
        <member name="P:TerrainZonePageSource.mAsyncLoading">
            <summary>
            Has asynchronous loading been requested?
            </summary>
        </member>
        <member name="P:TerrainZonePageSource.PageSize">
            <summary>
            The expected size of the page in number of vertices
            </summary>
        </member>
        <member name="P:TerrainZonePageSource.mTileSize">
            <summary>
            The expected size of a tile in number of vertices
            </summary>
        </member>
        <member name="T:TerrainZonePageSource.TerrainZonePageConstructedEventHandler">
            <summary>
            TerrainZonePageConstructedEventHandler
            </summary>
            <param name="sender">object</param>
            <param name="te">TerrainZonePageConstructedEventArgs</param>
        </member>
        <member name="M:HeightmapTerrainZonePageSource.#ctor">
            <summary>
            Constructor HeightmapTerrainZonePageSource
            </summary>
        </member>
        <member name="M:HeightmapTerrainZonePageSource.Finalize">
            <summary>
            Destructor HeightmapTerrainZonePageSource
            </summary>
        </member>
        <member name="M:HeightmapTerrainZonePageSource.Shutdown">
            <summary>
            Shutdown
            </summary>
        </member>
        <member name="M:HeightmapTerrainZonePageSource.LoadHeightmap">
            <summary>
            Load Height map
            </summary>
        </member>
        <member name="M:HeightmapTerrainZonePageSource.Initialize(TerrainZone,System.Int32,System.Int32,System.Boolean,TerrainZonePageSourceOptionList)">
            <summary>
            Initialize
            </summary>
            <param name="tsm">TerrainZone</param>
            <param name="tileSize">int</param>
            <param name="pageSize">int</param>
            <param name="asyncLoading">bool</param>
            <param name="optionList">TerrainZonePageSourceOptionList</param>
        </member>
        <member name="M:HeightmapTerrainZonePageSource.RequestPage(System.UInt16,System.UInt16)">
            <summary>
            Request Page
            </summary>
            <param name="x">ushort</param>
            <param name="y">ushort</param>
        </member>
        <member name="M:HeightmapTerrainZonePageSource.ExpirePage(System.UInt16,System.UInt16)">
            <summary>
            ExpirePage
            </summary>
            <param name="x">ushort</param>
            <param name="y">ushort</param>
        </member>
        <member name="P:HeightmapTerrainZonePageSource.IsRaw">
            <summary>
             Is this input RAW?
            </summary>
        </member>
        <member name="P:HeightmapTerrainZonePageSource.FlipTerrainZone">
            <summary>
            Should we flip terrain vertically?
            </summary>
        </member>
        <member name="P:HeightmapTerrainZonePageSource.Image">
            <summary>
            Image containing the source height map if loaded from non-RAW
            </summary>
        </member>
        <member name="P:HeightmapTerrainZonePageSource.RawData">
            <summary>
            Arbitrary data loaded from RAW
            </summary>
        </member>
        <member name="P:HeightmapTerrainZonePageSource.Page">
            <summary>
            The (single) terrain page this source will provide
            </summary>
        </member>
        <member name="P:HeightmapTerrainZonePageSource.Source">
            <summary>
            Source file name
            </summary>
        </member>
        <member name="P:HeightmapTerrainZonePageSource.RawSize">
            <summary>
            Manual size if source is RAW
            </summary>
        </member>
        <member name="P:HeightmapTerrainZonePageSource.RawBpp">
            <summary>
            Manual bpp if source is RAW
            </summary>
        </member>
        <member name="F:OctreeZone.OctreeZone._nameGenerator">
            <summary>
            Name Generator 
            </summary>
        </member>
        <member name="F:OctreeZone.OctreeZone._rootOctree">
            The root octree
        </member>
        <member name="F:OctreeZone.OctreeZone._maxDepth">
            Max depth for the tree
        </member>
        <member name="F:OctreeZone.OctreeZone._box">
            Size of the octree
        </member>
        <member name="M:OctreeZone.OctreeZone.#ctor(Axiom.SceneManagers.PortalConnected.PCZSceneManager)">
            <summary>
            Default Constructor
            </summary>
            <param name="creator"></param>
        </member>
        <member name="M:OctreeZone.OctreeZone.NotifyWorldGeometryRenderQueue(Axiom.Core.RenderQueueGroupID)">
            <summary>
            NotifyWorldGeometryRenderQueue
            </summary>
            <param name="renderQueueGroupID"></param>
        </member>
        <member name="M:OctreeZone.OctreeZone.RemoveNodeFromOctree(Axiom.SceneManagers.PortalConnected.PCZSceneNode)">
            Only removes the node from the octree.  It leaves the octree, even if it's empty.
        </member>
        <member name="M:OctreeZone.OctreeZone.CreateNodeZoneData(Axiom.SceneManagers.PortalConnected.PCZSceneNode)">
            create zone specific data for a node
        </member>
        <member name="F:TerrainZone._nameGenerator">
            <summary>
            name generator
            </summary>
        </member>
        <member name="F:TerrainZone._terrainRoot">
            The node to which all terrain tiles are attached
        </member>
        <member name="F:TerrainZone._options">
            Terrain size, detail etc
        </member>
        <member name="F:TerrainZone._useCustomMaterial">
            Should we use an externally-defined custom material?
        </member>
        <member name="F:TerrainZone._customMaterialName">
            The name of the custom material to use
        </member>
        <member name="F:TerrainZone._worldTextureName">
            The name of the world texture
        </member>
        <member name="F:TerrainZone._detailTextureName">
            The name of the detail texture
        </member>
        <member name="F:TerrainZone._useNamedParameterLodMorph">
            Are we using a named parameter to hook up LOD morph?
        </member>
        <member name="F:TerrainZone._lodMorphParamName">
            The name of the parameter to send the LOD morph to
        </member>
        <member name="F:TerrainZone._lodMorphParamIndex">
            The index of the parameter to send the LOD morph to
        </member>
        <member name="F:TerrainZone._pagingEnabled">
            Whether paging is enabled, or whether a single page will be used
        </member>
        <member name="F:TerrainZone._livePageMargin">
            The number of pages to render outside the 'home' page
        </member>
        <member name="F:TerrainZone._bufferedPageMargin">
            The number of pages to keep loaded outside the 'home' page
        </member>
        <member name="F:TerrainZone._terrainZonePages">
            Grid of buffered pages
        </member>
        <member name="F:TerrainZone._indexCache">
            Shared list of index buffers
        </member>
        <member name="F:TerrainZone._levelIndex">
            Shared array of IndexData (reuse indexes across tiles)
        </member>
        <member name="F:TerrainZone._pageSources">
            Map of source type -> TerrainZonePageSource
        </member>
        <member name="F:TerrainZone._activePageSource">
            The currently active page source
        </member>
        <member name="M:TerrainZone.#ctor(Axiom.SceneManagers.PortalConnected.PCZSceneManager)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:TerrainZone.CheckSize(System.Int32)">
            Validates that the size picked for the terrain is acceptable
        </member>
        <member name="P:TerrainZone.Options">
            Terrain size, detail etc
        </member>
        <member name="P:TerrainZone.LevelIndex">
            Shared array of IndexData (reuse indexes across tiles)
        </member>
        <member name="P:TerrainZone.IndexCache">
            Shared list of index buffers
        </member>
        <member name="P:TerrainZone.EnclosureNode">
            Set the enclosure node for this TerrainZone
        </member>
        <member name="T:TerrainZoneRow">
            <summary>
            List Of TerrainZoneRenderable
            </summary>
        </member>
        <member name="T:TerrainZone2D">
            <summary>
            List of TerrainZoneRow
            </summary>
        </member>
        <member name="T:TerrainZonePage">
            <summary>
            Terrain Zone Page
            </summary>
        </member>
        <member name="M:TerrainZonePage.#ctor(System.UInt16)">
            <summary>
            Terrain Zone Page Constructor
            </summary>
            <param name="numTiles">ushort</param>
        </member>
        <member name="M:TerrainZonePage.LinkNeighbours">
            <summary>
            Link Neighbours
            </summary>
        </member>
        <member name="M:TerrainZonePage.GetTerrainZoneTile(Axiom.Math.Vector3)">
            <summary>
            GetTerrainZoneTile
            </summary>
            <param name="pt">Vector3</param>
            <returns>TerrainZoneRenderable</returns>
        </member>
        <member name="M:TerrainZonePage.GetTerrainZoneTile(System.UInt16,System.UInt16)">
            <summary>
            Returns the TerrainZoneRenderable Tile with given index
            </summary>
            <param name="x">ushort</param>
            <param name="z">ushort</param>
            <returns>TerrainZoneRenderable</returns>
        </member>
        <member name="M:TerrainZonePage.SetRenderQueue(Axiom.Core.RenderQueueGroupID)">
            <summary>
            SetRenderQueue
            </summary>
            <param name="qid">RenderQueueGroupID</param>
        </member>
        <member name="P:TerrainZonePage.Tiles">
            <summary>
            2-dimensional vector of tiles, pre-allocated to the correct size
            </summary>
        </member>
        <member name="P:TerrainZonePage.TilesPerPage">
            <summary>
            The number of tiles across a page
            </summary>
        </member>
        <member name="P:TerrainZonePage.PageSceneNode">
            <summary>
            The scene node to which all the tiles for this page are attached
            </summary>
        </member>
        <member name="T:TerrainZonePageConstructedEventArgs">
            <summary>
            TerrainZonePageConstructedEventArgs
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:TerrainZonePageConstructedEventArgs.#ctor(System.Int32,System.Int32,Axiom.Math.Real[])" -->
        <member name="P:TerrainZonePageConstructedEventArgs.PageX">
            <summary>
            PageX
            </summary>
        </member>
        <member name="P:TerrainZonePageConstructedEventArgs.PageZ">
            <summary>
            PageZ
            </summary>
        </member>
        <member name="P:TerrainZonePageConstructedEventArgs.HeightData">
            <summary>
            HeightData
            </summary>
        </member>
        <member name="T:Neighbor">
            <summary>
            Neighbor
            </summary>
        </member>
        <member name="T:TerrainZoneRenderable">
            <summary>
            TerrainZoneRenderable
            </summary>
        </member>
        <member name="F:TerrainZoneRenderable._terrainZone">
            <summary>
            Parent Zone
            </summary>   
        </member>
        <member name="F:TerrainZoneRenderable._options">
            <summary>
            Link to shared options
            </summary>
        </member>
        <member name="F:TerrainZoneRenderable._terrain">
            <summary>
            Terrain
            </summary>
        </member>
        <member name="F:TerrainZoneRenderable._renderLevel">
            <summary>
            The current LOD level
            </summary>
        </member>
        <member name="F:TerrainZoneRenderable._lastNextLevel">
            <summary>
            The previous 'next' LOD level down, for frame coherency
            </summary>
        </member>
        <member name="F:TerrainZoneRenderable._lODMorphFactor">
            <summary>
            The morph factor between this and the next LOD level down
            </summary>
        </member>
        <member name="F:TerrainZoneRenderable._minLevelDistSqr">
            <summary>
            List of squared distances at which LODs change
            </summary>
        </member>
        <member name="F:TerrainZoneRenderable._neighbors">
            <summary>
            Connection to tiles four neighbors
            </summary>
        </member>
        <member name="F:TerrainZoneRenderable._lightListDirty">
            <summary>
            Whether light list need to re-calculate
            </summary>
        </member>
        <member name="F:TerrainZoneRenderable._lightList">
            <summary>
            Cached light list
            </summary>
        </member>
        <member name="F:TerrainZoneRenderable._center">
            <summary>
            The center point of this tile
            </summary>
        </member>
        <member name="F:TerrainZoneRenderable._init">
            <summary>
            Whether this tile has been initialized
            </summary>
        </member>
        <member name="F:TerrainZoneRenderable._mainBuffer">
            <summary>
            The buffer with all the renderable geometry in it
            </summary>
        </member>
        <member name="F:TerrainZoneRenderable.mDeltaBuffers">
            <summary>
            Optional set of delta buffers, used to morph from one LOD to the next
            </summary>
        </member>
        <member name="F:TerrainZoneRenderable._positionBuffer">
            <summary>
            System-memory buffer with just positions in it, for CPU operations
            </summary>
        </member>
        <member name="F:TerrainZoneRenderable._forcedRenderLevel">
            <summary>
            Forced rendering LOD level, optional
            </summary>
        </member>
        <member name="F:TerrainZoneRenderable._nextLevelDown">
            <summary>
            Array of LOD indexes specifying which LOD is the next one down
            (deals with clustered error metrics which cause LODs to be skipped)
            </summary>
        </member>
        <member name="F:TerrainZoneRenderable._normalizeNormals">
            <summary>
            Normalize Normals
            </summary>
        </member>
        <member name="F:TerrainZoneRenderable._WorldTransformsCount">
            <summary>
            Number World Translations
            </summary>
        </member>
        <member name="F:TerrainZoneRenderable._useIdentityProjection">
            <summary>
            Use Identity Projection
            </summary>
        </member>
        <member name="F:TerrainZoneRenderable._useIdentityView">
            <summary>
            Use Identity View
            </summary>
        </member>
        <member name="F:TerrainZoneRenderable._polygonModeOverrideable">
            <summary>
            Polygon Mode Overrideable
            </summary>
        </member>
        <member name="F:TerrainZoneRenderable._worldOrientation">
            <summary>
            World Orientation
            </summary>
        </member>
        <member name="F:TerrainZoneRenderable._worldPosition">
            <summary>
            World Position
            </summary>
        </member>
        <member name="M:TerrainZoneRenderable.Index(System.Int32,System.Int32)">
            <summary>
            Returns the index into the height array for the given coords.
            </summary>
            <param name="x">int</param>
            <param name="z">int</param>
            <returns>ushort</returns>
        </member>
        <member name="M:TerrainZoneRenderable.Vertex(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the  vertex coord for the given coordinates
            </summary>
            <param name="x">int</param>
            <param name="z">int</param>
            <param name="n">int</param>
            <returns>float</returns>
        </member>
        <member name="M:TerrainZoneRenderable.UpdateCustomGpuParameter(Axiom.Graphics.GpuProgramParameters.AutoConstantEntry,Axiom.Graphics.GpuProgramParameters)">
            <summary>
            	Update a custom GpuProgramParameters constant which is derived from
            	information only this Renderable knows.
            </summary>
            <remarks>
            	This method allows a Renderable to map in a custom GPU program parameter
            	based on it's own data. This is represented by a GPU auto parameter
            	of AutoConstantType.Custom, and to allow there to be more than one of these per
            	Renderable, the 'data' field on the auto parameter will identify
            	which parameter is being updated. The implementation of this method
            	must identify the parameter being updated, and call a 'SetConstant'
            	method on the passed in <see cref="T:Axiom.Graphics.GpuProgramParameters"/> object, using the details
            	provided in the incoming auto constant setting to identify the index
            	at which to set the parameter.
            </remarks>
            <param name="constantEntry">The auto constant entry referring to the parameter being updated.</param>
            <param name="param">The parameters object which this method should call to set the updated parameters.</param>
        </member>
        <member name="M:TerrainZoneRenderable.GetWorldTransforms(Axiom.Math.Matrix4[])">
            <summary>
               Gets the world transform matrix / matrices for this renderable object.
            </summary>
            <remarks>
               If the object has any derived transforms, these are expected to be up to date as long as
               all the SceneNode structures have been updated before this is called.
             <p/>
               This method will populate xform with 1 matrix if it does not use vertex blending. If it
               does use vertex blending it will fill the passed in pointer with an array of matrices,
               the length being the value returned from getNumWorldTransforms.
            </remarks>
        </member>
        <member name="M:TerrainZoneRenderable.GetSquaredViewDepth(Axiom.Core.Camera)">
            <summary>
            	Returns the camera-relative squared depth of this renderable.
            </summary>
            <remarks>
            	Used to sort transparent objects. Squared depth is used rather than
            	actual depth to avoid having to perform a square root on the result.
            </remarks>
            <param name="camera"></param>
            <returns></returns>
        </member>
        <member name="P:TerrainZoneRenderable.BoundingBox">
            <summary>
            Bounding box of this tile
            </summary>
        </member>
        <member name="P:TerrainZoneRenderable.BoundingRadius">
            <summary>
            	An abstract method required by subclasses to return the bounding box of this object in local coordinates.
            </summary>
        </member>
        <member name="P:TerrainZoneRenderable.NumberNeighbors">
            <summary>
            Number Neighbors
            </summary>
        </member>
        <member name="P:TerrainZoneRenderable.Lights">
            <summary>
               Gets a list of lights, ordered relative to how close they are to this renderable.
            </summary>
            <remarks>
               Directional lights, which have no position, will always be first on this list.
            </remarks>
        </member>
        <member name="P:TerrainZoneRenderable.NormalizeNormals">
            <summary>
               Returns whether or not this Renderable wishes the hardware to normalize normals.
            </summary>
        </member>
        <member name="P:TerrainZoneRenderable.NumWorldTransforms">
            <summary>
               Gets the number of world transformations that will be used for this object.
            </summary>
            <remarks>
               When a renderable uses vertex blending, it uses multiple world matrices instead of a single
               one. Each vertex sent to the pipeline can reference one or more matrices in this list
               with given weights.
               If a renderable does not use vertex blending this method returns 1, which is the default for
               simplicity.
            </remarks>
        </member>
        <member name="P:TerrainZoneRenderable.UseIdentityProjection">
            <summary>
               Returns whether or not to use an 'identity' projection.
            </summary>
            <remarks>
               Usually IRenderable objects will use a projection matrix as determined
               by the active camera. However, if they want they can cancel this out
               and use an identity projection, which effectively projects in 2D using
               a {-1, 1} view space. Useful for overlay rendering. Normal renderables need
               not override this.
            </remarks>
        </member>
        <member name="P:TerrainZoneRenderable.UseIdentityView">
            <summary>
               Returns whether or not to use an 'identity' projection.
            </summary>
            <remarks>
               Usually IRenderable objects will use a view matrix as determined
               by the active camera. However, if they want they can cancel this out
               and use an identity matrix, which means all geometry is assumed
               to be relative to camera space already. Useful for overlay rendering.
               Normal renderables need not override this.
            </remarks>
        </member>
        <member name="P:TerrainZoneRenderable.PolygonModeOverrideable">
            <summary>
            Gets whether this renderable's chosen detail level can be
            overridden (downgraded) by the camera setting.
            override true means that a lower camera detail will override this
            renderables detail level, false means it won't.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:TerrainZoneRenderable.WorldOrientation" -->
        <!-- Badly formed XML comment ignored for member "P:TerrainZoneRenderable.WorldPosition" -->
        <member name="P:TerrainZoneRenderable.TypeFlags">
            <summary>
            Get the 'type flags' for this <see cref="T:TerrainZoneRenderable"/>.
            </summary>
            <seealso cref="P:Axiom.Core.MovableObject.TypeFlags"/>
        </member>
        <member name="T:TerrainZoneRenderable.Binding">
            <summary>
            Binding
            </summary>
        </member>
        <member name="T:TerrainZoneRenderable.StitchShift">
            <summary>
            StitchShift
            </summary>
        </member>
        <member name="T:TerrainZoneRenderable.StitchDirection">
            <summary>
            StitchDirection (flag)
            </summary>
        </member>
    </members>
</doc>
